{
    "form": {
        "description": "Form provides validation functionality and manages form state.\n\n[Live Demo](https://www.primevue.org/forms/)",
        "components": {
            "default": {
                "description": "Form provides validation functionality and manages form state.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FormPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FormProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "FormPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "FormProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FormPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "FormPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "FormResolverOptions": {
                    "description": "Resolver options for Form component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "values",
                            "optional": false,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "The values of the form fields."
                        },
                        {
                            "name": "names",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string[]",
                            "default": "",
                            "description": "The names of the form fields."
                        }
                    ],
                    "methods": []
                },
                "FormSubmitEvent": {
                    "description": "Submit events",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "The original DOM event."
                        },
                        {
                            "name": "values",
                            "optional": false,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "The form values."
                        },
                        {
                            "name": "states",
                            "optional": false,
                            "readonly": false,
                            "type": "Record<string, FormFieldState>",
                            "default": "",
                            "description": "The form state."
                        },
                        {
                            "name": "valid",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the form is valid."
                        },
                        {
                            "name": "errors",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "The form errors."
                        },
                        {
                            "name": "reset",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "FormResetEvent": {
                    "description": "Reset events",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "The original DOM event."
                        }
                    ],
                    "methods": []
                },
                "FormFieldState": {
                    "description": "The state of a form field.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The value of the form field."
                        },
                        {
                            "name": "touched",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the form field has been touched."
                        },
                        {
                            "name": "dirty",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the form field has been modified."
                        },
                        {
                            "name": "pristine",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the form field has not been modified."
                        },
                        {
                            "name": "valid",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the form field is valid."
                        },
                        {
                            "name": "invalid",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the form field is invalid."
                        },
                        {
                            "name": "error",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The first error message of the form field."
                        },
                        {
                            "name": "errors",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "[]",
                            "description": "All error messages of the form field."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "useFormFieldState"
                },
                "FormProps": {
                    "description": "Defines valid properties in Form component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "resolver",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "initialValues",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "The initial values for the form fields."
                        },
                        {
                            "name": "validateOnValueUpdate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | string[]",
                            "default": "true",
                            "description": "Whether to validate the form fields when the values change."
                        },
                        {
                            "name": "validateOnBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | string[]",
                            "default": "false",
                            "description": "Whether to validate the form fields when they lose focus (on blur)."
                        },
                        {
                            "name": "validateOnMount",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | string[]",
                            "default": "false",
                            "description": "Whether to validate the form fields immediately after the form is mounted."
                        },
                        {
                            "name": "validateOnSubmit",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | string[]",
                            "default": "true",
                            "description": "Whether to validate the form fields when the form is submitted."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<FormPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "FormSlots": {
                    "description": "Defines valid slots in Form component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "FormEmitsOptions": {
                    "description": "Defines valid emits in Form component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "submit",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "reset",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "FormInstance": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "setFieldValue",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getFieldState",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "validate",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "setValues",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "reset",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "submit",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "valid",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the form is valid."
                        },
                        {
                            "name": "states",
                            "optional": false,
                            "readonly": false,
                            "type": "Record<string, FormFieldState>",
                            "default": "",
                            "description": "The state of each form field, with the field name as the key and its state as the value."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FormPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "FormPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "FormPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "FormResolverOptions": {
                    "description": "Resolver options for Form component.",
                    "props": []
                },
                "FormSubmitEvent": {
                    "description": "Submit events",
                    "props": []
                },
                "FormResetEvent": {
                    "description": "Reset events",
                    "props": []
                },
                "FormFieldState": {
                    "description": "The state of a form field.",
                    "props": []
                },
                "FormProps": {
                    "description": "Defines valid properties in Form component.",
                    "props": []
                },
                "FormSlots": {
                    "description": "Defines valid slots in Form component.",
                    "props": []
                },
                "FormEmitsOptions": {
                    "description": "Defines valid emits in Form component.",
                    "props": []
                },
                "FormInstance": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FormPassThroughOptionType": {
                    "values": "FormPassThroughAttributes | (options: FormPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "FormEmits": {
                    "values": "EmitFn<FormEmitsOptions>"
                }
            }
        }
    },
    "formstyle": {
        "description": "[Live Demo](https://www.primevue.org/forms/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FormStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FormStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "FormClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-form\"",
                            "description": "The class of root element"
                        }
                    ]
                }
            }
        }
    },
    "formfield": {
        "description": "FormField is a helper component that provides validation and tracking for form fields.\n\n[Live Demo](https://www.primevue.org/forms/)",
        "components": {
            "default": {
                "description": "FormField is a helper component that provides validation and tracking for form fields.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FormFieldPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FormFieldProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "FormFieldPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "FormFieldProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FormFieldPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "FormFieldPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "FormFieldResolverOptions": {
                    "description": "Resolver options for Form component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The value of the form field."
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string",
                            "default": "",
                            "description": "The name of the form field."
                        }
                    ],
                    "methods": []
                },
                "FormFieldProps": {
                    "description": "Defines valid properties in Form component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name of the form field."
                        },
                        {
                            "name": "resolver",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "initialValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The initial value for the form field."
                        },
                        {
                            "name": "validateOnValueUpdate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to validate the form field when the value change."
                        },
                        {
                            "name": "validateOnBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to validate the form field when it loses focus (on blur)."
                        },
                        {
                            "name": "validateOnMount",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to validate the form field immediately after the form is mounted."
                        },
                        {
                            "name": "validateOnSubmit",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to validate the form field when the form is submitted."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Component<any, any, any, ComputedOptions, MethodOptions, Object, any>",
                            "default": "DIV",
                            "description": "Use to change the HTML tag of root element."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it changes the default rendered element for the one passed as a child element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<FormFieldPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "FormFieldSlots": {
                    "description": "Defines valid slots in Form component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "FormFieldEmitsOptions": {
                    "description": "Defines valid emits in Form component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FormFieldPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "FormFieldPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "FormFieldPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "FormFieldResolverOptions": {
                    "description": "Resolver options for Form component.",
                    "props": []
                },
                "FormFieldProps": {
                    "description": "Defines valid properties in Form component.",
                    "props": []
                },
                "FormFieldSlots": {
                    "description": "Defines valid slots in Form component.",
                    "props": []
                },
                "FormFieldEmitsOptions": {
                    "description": "Defines valid emits in Form component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FormFieldPassThroughOptionType": {
                    "values": "FormFieldPassThroughAttributes | (options: FormFieldPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "FormEmits": {
                    "values": "EmitFn<FormFieldEmitsOptions>"
                }
            }
        }
    },
    "formfieldstyle": {
        "description": "[Live Demo](https://www.primevue.org/forms/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FormFieldStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FormFieldStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "FormFieldClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-formfield\"",
                            "description": "The class of root element"
                        }
                    ]
                }
            }
        }
    },
    "forms/src": {},
    "forms/src/resolvers/joi": {},
    "forms/src/resolvers/superstruct": {},
    "forms/src/resolvers/valibot": {},
    "forms/src/resolvers/yup": {},
    "forms/src/resolvers/zod": {},
    "forms/src/types": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PassThroughOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "mergeSections",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "mergeProps",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughMergePropsType",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PassThroughOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PassThroughMergePropsType": {
                    "values": "(args: any) => undefined | boolean | undefined",
                    "description": "From primevue/passthrough/index.d.ts"
                }
            }
        }
    },
    "forms/src/useform": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "useForm": {
                    "name": "useForm",
                    "parameters": [
                        {
                            "name": "options",
                            "type": "useFormOptions"
                        }
                    ],
                    "returnType": "useFormReturn"
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "useFormFieldState": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "touched",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "dirty",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "pristine",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "valid",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "invalid",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "error",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "errors",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedBy": "FormFieldState"
                },
                "useFormReturn": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "defineField",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "setFieldValue",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getFieldState",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "handleSubmit",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "handleReset",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "validate",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "setValues",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "reset",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "valid",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "states",
                            "optional": false,
                            "readonly": false,
                            "type": "Record<string, useFormFieldState>",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "useFormResolverOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "values",
                            "optional": false,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": ""
                        },
                        {
                            "name": "names",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string[]",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "useFormOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "resolver",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "initialValues",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": ""
                        },
                        {
                            "name": "validateOnValueUpdate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | string[]",
                            "default": ""
                        },
                        {
                            "name": "validateOnBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | string[]",
                            "default": ""
                        },
                        {
                            "name": "validateOnMount",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | string[]",
                            "default": ""
                        },
                        {
                            "name": "validateOnSubmit",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | string[]",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "useFormFieldState": {
                    "props": []
                },
                "useFormReturn": {
                    "props": []
                },
                "useFormResolverOptions": {
                    "props": []
                },
                "useFormOptions": {
                    "props": []
                }
            }
        }
    },
    "accordion": {
        "description": "Accordion groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "components": {
            "default": {
                "description": "Accordion groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AccordionTabOpenEvent": {
                    "description": "Custom tab open event.",
                    "relatedProp": "AccordionEmitsOptions.tab-open",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Opened tab index."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AccordionTabCloseEvent,AccordionClickEvent"
                },
                "AccordionTabCloseEvent": {
                    "description": "Custom tab close event.",
                    "relatedProp": "AccordionEmitsOptions.tab-close",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Opened tab index."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "AccordionTabOpenEvent"
                },
                "AccordionClickEvent": {
                    "description": "Custom tab open event.",
                    "relatedProp": "AccordionEmitsOptions.tab-open",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Opened tab index."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "AccordionTabOpenEvent"
                },
                "AccordionPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AccordionProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "AccordionPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AccordionState": {
                    "description": "Defines current inline state in Accordion component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string"
                        },
                        {
                            "name": "d_value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | string[]",
                            "default": "",
                            "description": "Current active value state."
                        }
                    ],
                    "methods": []
                },
                "AccordionProps": {
                    "description": "Defines valid properties in Accordion component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "null | string | number | string[] | number[]",
                            "default": "null",
                            "description": "Value of the active panel or an array of values in multiple mode."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, multiple tabs can be activated at the same time."
                        },
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "null | number | number[]",
                            "default": "null",
                            "description": "Index of the active tab or an array of indexes in multiple mode.",
                            "deprecated": "since v4. Use value property instead."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css."
                        },
                        {
                            "name": "expandIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of a collapsed tab."
                        },
                        {
                            "name": "collapseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of an expanded tab."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AccordionPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "AccordionSlots": {
                    "description": "Defines valid slots in Accordion slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect AccordionTab components."
                        },
                        {
                            "name": "collapseicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom collapse icon template."
                        },
                        {
                            "name": "expandicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom expand icon template."
                        }
                    ]
                },
                "AccordionEmitsOptions": {
                    "description": "Defines valid emits in Accordion component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:value",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | null | string | string[]",
                                    "description": "Value of new active panel."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the active panel changes."
                        },
                        {
                            "name": "update:activeIndex",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | number",
                                    "description": "Index of new active tab."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the active tab changes.",
                            "deprecated": "since v4. Use update:value emit instead."
                        },
                        {
                            "name": "tab-open",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionTabOpenEvent",
                                    "description": "Custom tab open event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded.",
                            "deprecated": "since v4."
                        },
                        {
                            "name": "tab-close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionTabCloseEvent",
                                    "description": "Custom tab close event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header.",
                            "deprecated": "since v4."
                        },
                        {
                            "name": "tab-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionClickEvent",
                                    "description": "Custom tab click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is clicked.",
                            "deprecated": "since v4."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AccordionPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "AccordionTabOpenEvent": {
                    "description": "Custom tab open event.",
                    "props": []
                },
                "AccordionTabCloseEvent": {
                    "description": "Custom tab close event.",
                    "props": []
                },
                "AccordionClickEvent": {
                    "description": "Custom tab open event.",
                    "props": []
                },
                "AccordionPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "AccordionPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "AccordionState": {
                    "description": "Defines current inline state in Accordion component.",
                    "props": []
                },
                "AccordionProps": {
                    "description": "Defines valid properties in Accordion component.",
                    "props": []
                },
                "AccordionSlots": {
                    "description": "Defines valid slots in Accordion slots.",
                    "props": []
                },
                "AccordionEmitsOptions": {
                    "description": "Defines valid emits in Accordion component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AccordionPassThroughOptionType": {
                    "values": "AccordionPassThroughAttributes | (options: AccordionPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "AccordionEmits": {
                    "values": "EmitFn<AccordionEmitsOptions>"
                }
            }
        }
    },
    "accordionstyle": {
        "description": "Accordion groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AccordionStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "AccordionClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-accordion\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "accordioncontent": {
        "description": "AccordionContent is a helper component for Accordion component.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "components": {
            "default": {
                "description": "AccordionContent is a helper component for Accordion component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionContentPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionContentProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionContentContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AccordionContentPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AccordionContentProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionContentPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionContentPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the transition's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionContentPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "AccordionContentPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AccordionContentProps": {
                    "description": "Defines valid properties in AccordionContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Component<any, any, any, ComputedOptions, MethodOptions, Object, any>",
                            "default": "DIV",
                            "description": "Use to change the HTML tag of root element."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it changes the default rendered element for the one passed as a child element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AccordionContentPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "AccordionContentContext": {
                    "description": "Defines current options in AccordionContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is active."
                        }
                    ],
                    "methods": []
                },
                "AccordionContentSlots": {
                    "description": "Defines valid slots in AccordionContent slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        }
                    ]
                },
                "AccordionContentEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AccordionContentPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "AccordionContentPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "AccordionContentPassThroughAttributes": {
                    "props": []
                },
                "AccordionContentProps": {
                    "description": "Defines valid properties in AccordionContent component.",
                    "props": []
                },
                "AccordionContentContext": {
                    "description": "Defines current options in AccordionContent component.",
                    "props": []
                },
                "AccordionContentSlots": {
                    "description": "Defines valid slots in AccordionContent slots.",
                    "props": []
                },
                "AccordionContentEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AccordionContentPassThroughOptionType": {
                    "values": "AccordionContentPassThroughAttributes | (options: AccordionContentPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "AccordionContentEmits": {
                    "values": "EmitFn<AccordionContentEmitsOptions>"
                }
            }
        }
    },
    "accordioncontentstyle": {
        "description": "AccordionContent is a helper component for Accordion component.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionContentStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AccordionContentStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "AccordionContentClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-accordioncontent\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-accordioncontent-content\"",
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "accordionheader": {
        "description": "AccordionHeader is a helper component for Accordion component.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "components": {
            "default": {
                "description": "AccordionHeader is a helper component for Accordion component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionHeaderPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionHeaderProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionHeaderContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AccordionHeaderPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AccordionHeaderProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionHeaderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "toggleicon",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionHeaderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "AccordionHeaderPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AccordionHeaderProps": {
                    "description": "Defines valid properties in AccordionHeader component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Component<any, any, any, ComputedOptions, MethodOptions, Object, any>",
                            "default": "BUTTON",
                            "description": "Use to change the HTML tag of root element."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it changes the default rendered element for the one passed as a child element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AccordionHeaderPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "AccordionHeaderContext": {
                    "description": "Defines current options in AccordionHeader component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is active."
                        }
                    ],
                    "methods": []
                },
                "AccordionHeaderSlots": {
                    "description": "Defines valid slots in AccordionHeader slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "toggleicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom toggleicon template."
                        }
                    ]
                },
                "AccordionHeaderEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AccordionHeaderPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "AccordionHeaderPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "AccordionHeaderPassThroughAttributes": {
                    "props": []
                },
                "AccordionHeaderProps": {
                    "description": "Defines valid properties in AccordionHeader component.",
                    "props": []
                },
                "AccordionHeaderContext": {
                    "description": "Defines current options in AccordionHeader component.",
                    "props": []
                },
                "AccordionHeaderSlots": {
                    "description": "Defines valid slots in AccordionHeader slots.",
                    "props": []
                },
                "AccordionHeaderEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AccordionHeaderPassThroughOptionType": {
                    "values": "AccordionHeaderPassThroughAttributes | (options: AccordionHeaderPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "AccordionHeaderEmits": {
                    "values": "EmitFn<AccordionHeaderEmitsOptions>"
                }
            }
        }
    },
    "accordionheaderstyle": {
        "description": "AccordionHeader is a helper component for Accordion component.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionHeaderStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AccordionHeaderStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "AccordionHeaderClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-accordionheader\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "toggleicon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-accordionheader-toggle-icon\"",
                            "description": "Class name of the toggleicon element"
                        }
                    ]
                }
            }
        }
    },
    "accordionpanel": {
        "description": "AccordionPanel is a helper component for Accordion component.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "components": {
            "default": {
                "description": "AccordionPanel is a helper component for Accordion component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionPanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionPanelContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AccordionPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AccordionPanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "AccordionPanelPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AccordionPanelProps": {
                    "description": "Defines valid properties in AccordionPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | number",
                            "default": "",
                            "description": "Unique value of item."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the item is disabled."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Component<any, any, any, ComputedOptions, MethodOptions, Object, any>",
                            "default": "DIV",
                            "description": "Use to change the HTML tag of root element."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it changes the default rendered element for the one passed as a child element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AccordionPanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "AccordionPanelContext": {
                    "description": "Defines current options in AccordionPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AccordionPanelSlots": {
                    "description": "Defines valid slots in AccordionPanel slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        }
                    ]
                },
                "AccordionPanelEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AccordionPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "AccordionPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "AccordionPanelPassThroughAttributes": {
                    "props": []
                },
                "AccordionPanelProps": {
                    "description": "Defines valid properties in AccordionPanel component.",
                    "props": []
                },
                "AccordionPanelContext": {
                    "description": "Defines current options in AccordionPanel component.",
                    "props": []
                },
                "AccordionPanelSlots": {
                    "description": "Defines valid slots in AccordionPanel slots.",
                    "props": []
                },
                "AccordionPanelEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AccordionPanelPassThroughOptionType": {
                    "values": "AccordionPanelPassThroughAttributes | (options: AccordionPanelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "AccordionPanelEmits": {
                    "values": "EmitFn<AccordionPanelEmitsOptions>"
                }
            }
        }
    },
    "accordionpanelstyle": {
        "description": "AccordionPanel is a helper component for Accordion component.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionPanelStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AccordionPanelStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "AccordionPanelClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-accordionpanel\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "accordiontab": {
        "description": "",
        "components": {
            "default": {
                "description": "",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionTabPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionTabProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionTabContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AccordionTabPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AccordionTabProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerAction",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the headeraction's DOM element."
                        },
                        {
                            "name": "headerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the headericon's DOM element."
                        },
                        {
                            "name": "headerTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the headertitle's DOM element."
                        },
                        {
                            "name": "toggleableContent",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toggleablecontent's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "AccordionTabPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AccordionTabProps": {
                    "description": "Defines valid properties in AccordionTab component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Orientation of tab headers."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab header."
                        },
                        {
                            "name": "headerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab header."
                        },
                        {
                            "name": "headerProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the tab header."
                        },
                        {
                            "name": "headerActionProps",
                            "optional": true,
                            "readonly": false,
                            "type": "AnchorHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLAnchorElement to the focusable anchor element inside the tab header."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab content."
                        },
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab content."
                        },
                        {
                            "name": "contentProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the tab content."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tab is disabled."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AccordionTabPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "AccordionTabContext": {
                    "description": "Defines current options in AccordionTab component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the tab."
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Count of tabs"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is last."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is active."
                        }
                    ],
                    "methods": []
                },
                "AccordionTabSlots": {
                    "description": "Defines valid slots in AcordionTab slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot for content."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for the title section of a AccordionTab is defined using the header template."
                        },
                        {
                            "name": "headericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the tab</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Whether the tab is active</span>\n}",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon for the header section of a AccordionTab is defined using the headericon template."
                        }
                    ]
                },
                "AccordionTabEmitsOptions": {
                    "description": "Defines valid emits in AcordionTab component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AccordionTabPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "AccordionTabPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "AccordionTabPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "AccordionTabProps": {
                    "description": "Defines valid properties in AccordionTab component.",
                    "props": []
                },
                "AccordionTabContext": {
                    "description": "Defines current options in AccordionTab component.",
                    "props": []
                },
                "AccordionTabSlots": {
                    "description": "Defines valid slots in AcordionTab slots.",
                    "props": []
                },
                "AccordionTabEmitsOptions": {
                    "description": "Defines valid emits in AcordionTab component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AccordionTabPassThroughOptionType": {
                    "values": "AccordionTabPassThroughAttributes | (options: AccordionTabPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "AccordionTabPassThroughTransitionType": {
                    "values": "TransitionProps | (options: AccordionTabPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "AccordionTabEmits": {
                    "values": "EmitFn<AccordionTabEmitsOptions>"
                }
            }
        }
    },
    "accordiontabstyle": {
        "description": "",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionTabStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AccordionTabStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "AccordionTabClasses": {
                    "members": []
                }
            }
        }
    },
    "animateonscroll": {
        "description": "AnimateOnScroll manages CSS classes declaratively to during enter/leave animations on scroll or on page load.\n\n[Live Demo](https://primevue.org/animateonscroll)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AnimateOnScrollOptions": {
                    "description": "Defines options of AnimateOnScroll.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "enterClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item goes into viewport, use white space as a delimeter to define multiple classes."
                        },
                        {
                            "name": "leaveClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item leaves the viewport, use white space as a delimeter to define multiple classes."
                        },
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "null | Element | Document",
                            "default": "",
                            "description": "Specifies the  `root`  option of the IntersectionObserver API"
                        },
                        {
                            "name": "rootMargin",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specifies the  `rootMargin`  option of the IntersectionObserver API"
                        },
                        {
                            "name": "threshold",
                            "optional": true,
                            "readonly": false,
                            "type": "readonly number[]",
                            "default": "",
                            "description": "Specifies the  `threshold`  option of the IntersectionObserver API"
                        }
                    ],
                    "methods": []
                },
                "AnimateOnScrollDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) directive options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "AnimateOnScrollDirectiveModifiers": {
                    "description": "Defines modifiers of AnimateOnScroll.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "once",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the scroll event listener should be removed after initial run."
                        }
                    ],
                    "methods": []
                },
                "AnimateOnScrollDirectiveBinding": {
                    "description": "Binding of AnimateOnScroll directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "null | ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, \"\", Object, any> | Record<string, any>",
                            "default": ""
                        },
                        {
                            "name": "oldValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "arg",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dir",
                            "optional": false,
                            "readonly": false,
                            "type": "ObjectDirective<any, any, string, string>",
                            "default": ""
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "AnimateOnScrollOptions",
                            "default": "",
                            "description": "Value of the AnimateOnScroll."
                        },
                        {
                            "name": "modifiers",
                            "optional": true,
                            "readonly": false,
                            "type": "AnimateOnScrollDirectiveModifiers",
                            "default": "",
                            "description": "Modifiers of the AnimateOnScroll."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AnimateOnScrollOptions": {
                    "description": "Defines options of AnimateOnScroll.",
                    "props": []
                },
                "AnimateOnScrollDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) directive options.",
                    "props": []
                },
                "AnimateOnScrollDirectiveModifiers": {
                    "description": "Defines modifiers of AnimateOnScroll.",
                    "props": []
                },
                "AnimateOnScrollDirectiveBinding": {
                    "description": "Binding of AnimateOnScroll directive.",
                    "props": []
                }
            }
        }
    },
    "animateonscrollstyle": {
        "description": "AnimateOnScroll manages CSS classes declaratively to during enter/leave animations on scroll or on page load.\n\n[Live Demo](https://primevue.org/animateonscroll)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AnimateOnScrollStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AnimateOnScrollStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "AnimateOnScrollClasses": {
                    "members": []
                }
            }
        }
    },
    "autocomplete": {
        "description": "AutoComplete is an input component that provides real-time suggestions while being typed.\n\n[Live Demo](https://www.primevue.org/autocomplete/)",
        "components": {
            "default": {
                "description": "AutoComplete is an input component that provides real-time suggestions while being typed.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AutoCompletePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "AutoCompleteEmitsOptions.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteOptionSelectEvent": {
                    "description": "Custom item select event.",
                    "relatedProp": "AutoCompleteEmitsOptions['item-select']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected item"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AutoCompleteOptionUnselectEvent"
                },
                "AutoCompleteOptionUnselectEvent": {
                    "description": "Custom item unselect event.",
                    "relatedProp": "AutoCompleteEmitsOptions['item-unselect']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected item"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "AutoCompleteOptionSelectEvent"
                },
                "AutoCompleteDropdownClickEvent": {
                    "description": "Custom dropdown click event.",
                    "relatedProp": "AutoCompleteEmitsOptions['dropdown-click']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event"
                        },
                        {
                            "name": "query",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current value of the input field"
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteCompleteEvent": {
                    "description": "Custom complete event.",
                    "relatedProp": "AutoCompleteEmitsOptions.complete",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "query",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value to search with"
                        }
                    ],
                    "methods": []
                },
                "AutoCompletePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AutoCompleteProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "pcInputText",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "inputMultiple",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input multiple's DOM element."
                        },
                        {
                            "name": "chipItem",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the chip's DOM element."
                        },
                        {
                            "name": "pcChip",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Chip."
                        },
                        {
                            "name": "chipIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the chip icon's DOM element."
                        },
                        {
                            "name": "inputChip",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input chip's DOM element."
                        },
                        {
                            "name": "loader",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loader's DOM element."
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown's DOM element."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown icon's DOM element."
                        },
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the overlay's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "listContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list container's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "optionGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option group's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "searchResultMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the search result message's DOM element."
                        },
                        {
                            "name": "selectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the selected message's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "AutoCompletePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteState": {
                    "description": "Defines current inline state in AutoComplete component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "-1",
                            "description": "Current focused item index as a number."
                        },
                        {
                            "name": "focusedMultipleOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "-1",
                            "description": "Current focused item index as a number."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "searching",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current search state as a boolean."
                        },
                        {
                            "name": "multipleInputValue",
                            "optional": false,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "null",
                            "description": "Value of the token input as a string."
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteContext": {
                    "description": "Defines current options in AutoComplete component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current option."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the current option."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selection state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteProps": {
                    "description": "Defines valid properties in AutoComplete component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "suggestions",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of suggestions to display."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "typeahead",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "whether typeahead is active or not."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "14rem",
                            "description": "Maximum height of the suggestions overlay."
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a button next to the input field when enabled."
                        },
                        {
                            "name": "dropdownMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"blank\" | \"current\"",
                            "default": "blank",
                            "description": "Specifies the behavior dropdown button. Default 'blank' mode sends an empty string and 'current' mode sends the input value."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if multiple values can be selected."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the autocomplete is in loading state."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "minLength",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Minimum number of characters to initiate a search."
                        },
                        {
                            "name": "delay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Delay between keystrokes to wait before sending a query."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached.\nSpecial keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "forceSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions."
                        },
                        {
                            "name": "completeOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to run a query when input receives focus."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay."
                        },
                        {
                            "name": "overlayStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay overlay."
                        },
                        {
                            "name": "overlayClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay overlay."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dropdown."
                        },
                        {
                            "name": "dropdownClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the dropdown button."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in loading state.",
                            "deprecated": "since v4.0. Use 'loader' slot."
                        },
                        {
                            "name": "loader",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in chip remove action."
                        },
                        {
                            "name": "chipIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in chip remove action."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element when the overlay is shown."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "searchLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in searching. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "searchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySearchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "showEmptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, empty search message will be visible."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AutoCompletePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteSlots": {
                    "description": "Defines valid slots in AutoComplete component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "chip",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// A value in the selection</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the token.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Remove token icon function.</span>\n}",
                                    "description": "chip slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">suggestions</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template of panel."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">suggestions</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template of panel."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option group slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option group template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// An array of objects to display for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">styleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">contentRef</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">el</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Referance of the content</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">getItemOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Options of the items</span>\n}",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template when there is no data to display."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom dropdown icon template."
                        },
                        {
                            "name": "removetokenicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the token.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Remove token icon function.</span>\n}",
                                    "description": "chip icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'chipicon' slot instead.\nCustom chip icon template in multiple mode."
                        },
                        {
                            "name": "chipicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the token.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Remove token icon function.</span>\n}",
                                    "description": "chip icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip icon template in multiple mode."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loader.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'loader' slot instead.\nCustom loader template."
                        },
                        {
                            "name": "dropdownbutton",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Toggle function.</span>\n}"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'dropdown' slot instead.\nCustom dropdown template."
                        },
                        {
                            "name": "dropdown",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Toggle function.</span>\n}"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom dropdown template."
                        }
                    ]
                },
                "AutoCompleteEmitsOptions": {
                    "description": "Defines valid emits in AutoComplete component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "item-select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteOptionSelectEvent",
                                    "description": "Custom option select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "",
                            "deprecated": "since v4.0. Use 'option-select' emit.\nCallback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "item-unselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteOptionUnselectEvent",
                                    "description": "Custom option unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "",
                            "deprecated": "since v4.0. Use 'option-unselect' emit.\nCallback to invoke when a selected value is removed."
                        },
                        {
                            "name": "option-select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteOptionSelectEvent",
                                    "description": "Custom option select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "option-unselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteOptionUnselectEvent",
                                    "description": "Custom option unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a selected value is removed."
                        },
                        {
                            "name": "dropdown-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteDropdownClickEvent",
                                    "description": "Custom dropdown click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to when dropdown button is clicked."
                        },
                        {
                            "name": "clear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when input is cleared by the user."
                        },
                        {
                            "name": "complete",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteCompleteEvent",
                                    "description": "Custom complete event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to search for suggestions."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AutoCompletePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "AutoCompleteSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "AutoCompleteChangeEvent": {
                    "description": "Custom change event.",
                    "props": []
                },
                "AutoCompleteOptionSelectEvent": {
                    "description": "Custom item select event.",
                    "props": []
                },
                "AutoCompleteOptionUnselectEvent": {
                    "description": "Custom item unselect event.",
                    "props": []
                },
                "AutoCompleteDropdownClickEvent": {
                    "description": "Custom dropdown click event.",
                    "props": []
                },
                "AutoCompleteCompleteEvent": {
                    "description": "Custom complete event.",
                    "props": []
                },
                "AutoCompletePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "AutoCompletePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "AutoCompleteState": {
                    "description": "Defines current inline state in AutoComplete component.",
                    "props": []
                },
                "AutoCompleteContext": {
                    "description": "Defines current options in AutoComplete component.",
                    "props": []
                },
                "AutoCompleteProps": {
                    "description": "Defines valid properties in AutoComplete component.",
                    "props": []
                },
                "AutoCompleteSlots": {
                    "description": "Defines valid slots in AutoComplete component.",
                    "props": []
                },
                "AutoCompleteEmitsOptions": {
                    "description": "Defines valid emits in AutoComplete component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AutoCompletePassThroughOptionType": {
                    "values": "AutoCompletePassThroughAttributes | (options: AutoCompletePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "AutoCompletePassThroughTransitionType": {
                    "values": "TransitionProps | (options: AutoCompletePassThroughMethodOptions) => TransitionProps | undefined"
                },
                "AutoCompleteEmits": {
                    "values": "EmitFn<AutoCompleteEmitsOptions>"
                }
            }
        }
    },
    "autocompletestyle": {
        "description": "AutoComplete is an input component that provides real-time suggestions while being typed.\n\n[Live Demo](https://www.primevue.org/autocomplete/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AutoCompleteStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AutoCompleteStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "AutoCompleteClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "pcInput",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-input\"",
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "inputMultiple",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-input-multiple\"",
                            "description": "Class name of the input multiple element"
                        },
                        {
                            "name": "chipItem",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-chip-item\"",
                            "description": "Class name of the chip item element"
                        },
                        {
                            "name": "pcChip",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-chip\"",
                            "description": "Class name of the chip element"
                        },
                        {
                            "name": "chipIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-chip-icon\"",
                            "description": "Class name of the chip icon element"
                        },
                        {
                            "name": "inputChip",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-input-chip\"",
                            "description": "Class name of the input chip element"
                        },
                        {
                            "name": "loader",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-loader\"",
                            "description": "Class name of the loader element"
                        },
                        {
                            "name": "dropdown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-dropdown\"",
                            "description": "Class name of the dropdown element"
                        },
                        {
                            "name": "panel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-overlay\"",
                            "description": "Class name of the panel element"
                        },
                        {
                            "name": "list",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-list\"",
                            "description": "Class name of the list element"
                        },
                        {
                            "name": "listContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-list-container\"",
                            "description": "Class name of the list container element"
                        },
                        {
                            "name": "optionGroup",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-option-group\"",
                            "description": "Class name of the option group element"
                        },
                        {
                            "name": "option",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-option\"",
                            "description": "Class name of the option element"
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-autocomplete-empty-message\"",
                            "description": "Class name of the empty message element"
                        }
                    ]
                }
            }
        }
    },
    "avatar": {
        "description": "Avatar represents people using icons, labels and images.\n\n- [Live Demo](https://primevue.org/avatar)",
        "components": {
            "default": {
                "description": "Avatar represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AvatarProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AvatarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AvatarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AvatarProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the image's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "AvatarProps": {
                    "description": "Defines valid properties in Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the text to display."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the icon to display."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the image to display."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"large\" | \"normal\" | \"xlarge\"",
                            "default": "normal",
                            "description": "Size of the element."
                        },
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"square\" | \"circle\"",
                            "default": "square",
                            "description": "Shape of the element."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AvatarPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "AvatarSlots": {
                    "description": "Defines valid slots in Avatar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Content can easily be customized with the default slot instead of using the built-in modes."
                        },
                        {
                            "name": "icon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        }
                    ]
                },
                "AvatarEmitsOptions": {
                    "description": "Defines valid emits in Avatar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "error",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Triggered when an error occurs while loading an image file."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AvatarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "AvatarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "AvatarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "AvatarProps": {
                    "description": "Defines valid properties in Avatar component.",
                    "props": []
                },
                "AvatarSlots": {
                    "description": "Defines valid slots in Avatar component.",
                    "props": []
                },
                "AvatarEmitsOptions": {
                    "description": "Defines valid emits in Avatar component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AvatarPassThroughOptionType": {
                    "values": "AvatarPassThroughAttributes | (options: AvatarPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "AvatarEmits": {
                    "values": "EmitFn<AvatarEmitsOptions>"
                }
            }
        }
    },
    "avatarstyle": {
        "description": "Avatar represents people using icons, labels and images.\n\n- [Live Demo](https://primevue.org/avatar)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AvatarStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "AvatarClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-avatar\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-avatar-label\"",
                            "description": "Class name of the label element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-avatar-icon\"",
                            "description": "Class name of the icon element"
                        }
                    ]
                }
            }
        }
    },
    "avatargroup": {
        "description": "A set of Avatars can be displayed together using the AvatarGroup component.\n\n[Live Demo](https://www.primevue.org/avatar/)",
        "components": {
            "default": {
                "description": "A set of Avatars can be displayed together using the AvatarGroup component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AvatarGroupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AvatarGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AvatarGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AvatarGroupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "AvatarGroupProps": {
                    "description": "Defines valid properties in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AvatarGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "AvatarGroupSlots": {
                    "description": "Defines valid slots in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect Avatar components."
                        }
                    ]
                },
                "AvatarGroupEmitsOptions": {
                    "description": "Defines valid emits in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AvatarGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "AvatarGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "AvatarGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "AvatarGroupProps": {
                    "description": "Defines valid properties in AvatarGroup component.",
                    "props": []
                },
                "AvatarGroupSlots": {
                    "description": "Defines valid slots in AvatarGroup component.",
                    "props": []
                },
                "AvatarGroupEmitsOptions": {
                    "description": "Defines valid emits in AvatarGroup component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupPassThroughOptionType": {
                    "values": "AvatarGroupPassThroughAttributes | (options: AvatarGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "AvatarGroupEmits": {
                    "values": "EmitFn<AvatarGroupEmitsOptions>"
                }
            }
        }
    },
    "avatargroupstyle": {
        "description": "A set of Avatars can be displayed together using the AvatarGroup component.\n\n[Live Demo](https://www.primevue.org/avatar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "AvatarGroupStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "AvatarGroupClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-avatar-group\""
                        }
                    ]
                }
            }
        }
    },
    "badge": {
        "description": "Badge represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/badge)",
        "components": {
            "default": {
                "description": "Badge represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "BadgeProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        }
                    ],
                    "methods": []
                },
                "BadgePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "BadgePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "BadgeProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "BadgeProps": {
                    "description": "Defines valid properties in Badge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value to display inside the badge."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HintedString<\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\">",
                            "default": "",
                            "description": "Severity type of the badge."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"small\" | \"large\" | \"xlarge\"",
                            "default": "",
                            "description": "Size of the badge, valid options are 'small', 'large', and 'xlarge'."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<BadgePassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "BadgeSlots": {
                    "description": "Defines valid slots in Badge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Content can easily be customized with the default slot instead of using the built-in display."
                        }
                    ]
                },
                "BadgeEmitsOptions": {
                    "description": "Defines valid emits in Badge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "BadgePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "BadgePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "BadgePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "BadgeProps": {
                    "description": "Defines valid properties in Badge component.",
                    "props": []
                },
                "BadgeSlots": {
                    "description": "Defines valid slots in Badge component.",
                    "props": []
                },
                "BadgeEmitsOptions": {
                    "description": "Defines valid emits in Badge component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BadgePassThroughOptionType": {
                    "values": "BadgePassThroughAttributes | (options: BadgePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "BadgeEmits": {
                    "values": "EmitFn<BadgeEmitsOptions>"
                }
            }
        }
    },
    "badgestyle": {
        "description": "Badge represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/badge)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgeStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "BadgeStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "BadgeClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-badge\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "badgedirective": {
        "description": "Badge directive is a small status indicator for another element.\n\n[Live Demo](https://primevue.org/badge)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgeDirectivePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "BadgeContext",
                            "default": ""
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "BadgeDirectiveOptions": {
                    "description": "Defines options of Badge.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<BadgeDirectivePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "BadgeDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "BadgeDirectiveOptions.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgeDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "BadgeDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "BadgeContext": {
                    "description": "Defines current options in Badge directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "info",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Current info state as a boolean."
                        },
                        {
                            "name": "success",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current success state as a boolean."
                        },
                        {
                            "name": "warn",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current warn state as a boolean."
                        },
                        {
                            "name": "danger",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current danger state as a boolean."
                        },
                        {
                            "name": "nogutter",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current gutter state as a boolean."
                        },
                        {
                            "name": "dot",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current dot state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "BadgeDirectiveModifiers": {
                    "description": "Defines modifiers of Badge directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "info",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Info severity for Badge directive."
                        },
                        {
                            "name": "success",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Success severity for Badge directive."
                        },
                        {
                            "name": "warn",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "warn severity for Badge directive."
                        },
                        {
                            "name": "danger",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Danger severity for Badge directive."
                        }
                    ],
                    "methods": []
                },
                "BadgeDirectiveBinding": {
                    "description": "Binding of Badge directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "null | ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, \"\", Object, any> | Record<string, any>",
                            "default": ""
                        },
                        {
                            "name": "oldValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "arg",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dir",
                            "optional": false,
                            "readonly": false,
                            "type": "ObjectDirective<any, any, string, string>",
                            "default": ""
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | BadgeDirectiveOptions",
                            "default": "",
                            "description": "Value of the Badge."
                        },
                        {
                            "name": "modifiers",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgeDirectiveModifiers",
                            "default": "",
                            "description": "Modifiers of the Badge."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "BadgeDirectivePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "BadgeDirectiveOptions": {
                    "description": "Defines options of Badge.",
                    "props": []
                },
                "BadgeDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "BadgeDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "BadgeContext": {
                    "description": "Defines current options in Badge directive.",
                    "props": []
                },
                "BadgeDirectiveModifiers": {
                    "description": "Defines modifiers of Badge directive.",
                    "props": []
                },
                "BadgeDirectiveBinding": {
                    "description": "Binding of Badge directive.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BadgeDirectivePassThroughOptionType": {
                    "values": "BadgeDirectivePassThroughAttributes | (options: BadgeDirectivePassThroughMethodOptions) => BadgeDirectivePassThroughAttributes | null | undefined"
                }
            }
        }
    },
    "badgedirectivestyle": {
        "description": "Badge directive is a small status indicator for another element.\n\n[Live Demo](https://primevue.org/badge)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgeDirectiveStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "BadgeDirectiveStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "BadgeDirectiveClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-badge\""
                        }
                    ]
                }
            }
        }
    },
    "blockui": {
        "description": "BlockUI represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/blockui)",
        "components": {
            "default": {
                "description": "BlockUI represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BlockUIPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "BlockUIProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "BlockUIState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "BlockUIPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "BlockUIProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BlockUIPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "BlockUIPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "BlockUIPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "BlockUIState": {
                    "description": "Defines current inline state in BlockUI component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "isBlocked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current blocked state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "BlockUIProps": {
                    "description": "Defines valid properties in BlockUI component",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "blocked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Controls the blocked state."
                        },
                        {
                            "name": "fullScreen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the whole document gets blocked."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<BlockUIPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "BlockUISlots": {
                    "description": "Defines valid slots in BlockUI component",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content's slot."
                        }
                    ]
                },
                "BlockUIEmitsOptions": {
                    "description": "Defines valid emits in BlockUI component",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "block",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the element gets blocked."
                        },
                        {
                            "name": "unblock",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the element gets unblocked."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "BlockUIPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "BlockUIPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "BlockUIPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "BlockUIState": {
                    "description": "Defines current inline state in BlockUI component.",
                    "props": []
                },
                "BlockUIProps": {
                    "description": "Defines valid properties in BlockUI component",
                    "props": []
                },
                "BlockUISlots": {
                    "description": "Defines valid slots in BlockUI component",
                    "props": []
                },
                "BlockUIEmitsOptions": {
                    "description": "Defines valid emits in BlockUI component",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BlockUIPassThroughOptionType": {
                    "values": "BlockUIPassThroughAttributes | (options: BlockUIPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "BlockUIEmits": {
                    "values": "EmitFn<BlockUIEmitsOptions>"
                }
            }
        }
    },
    "blockuistyle": {
        "description": "BlockUI represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/blockui)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BlockUIStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "BlockUIStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "BlockUIClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-blockui\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "breadcrumb": {
        "description": "Breadcrumb provides contextual information about page hierarchy.\n\n[Live Demo](https://www.primevue.org/breadcrumb/)",
        "components": {
            "default": {
                "description": "Breadcrumb provides contextual information about page hierarchy.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BreadcrumbPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "BreadcrumbProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "BreadcrumbContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "BreadcrumbProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the  item's DOM element."
                        },
                        {
                            "name": "itemLink",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item link's DOM element."
                        },
                        {
                            "name": "itemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item icon's DOM element."
                        },
                        {
                            "name": "itemLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item label's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "separatorIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbContext": {
                    "description": "Defines current options in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem"
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbRouterBindProps": {
                    "description": "Defines valid router binding props in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbProps": {
                    "description": "Defines valid properties in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "home",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Configuration for the home icon."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<BreadcrumbPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbSlots": {
                    "description": "Defines valid slots in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">BreadcrumbRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "separator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom separator template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        }
                    ]
                },
                "BreadcrumbEmitsOptions": {
                    "description": "Defines valid emits in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "BreadcrumbPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "BreadcrumbPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "BreadcrumbPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "BreadcrumbContext": {
                    "description": "Defines current options in Breadcrumb component.",
                    "props": []
                },
                "BreadcrumbRouterBindProps": {
                    "description": "Defines valid router binding props in Breadcrumb component.",
                    "props": []
                },
                "BreadcrumbProps": {
                    "description": "Defines valid properties in Breadcrumb component.",
                    "props": []
                },
                "BreadcrumbSlots": {
                    "description": "Defines valid slots in Breadcrumb component.",
                    "props": []
                },
                "BreadcrumbEmitsOptions": {
                    "description": "Defines valid emits in Breadcrumb component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BreadcrumbPassThroughOptionType": {
                    "values": "BreadcrumbPassThroughAttributes | (options: BreadcrumbPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "BreadcrumbEmits": {
                    "values": "EmitFn<BreadcrumbEmitsOptions>"
                }
            }
        }
    },
    "breadcrumbstyle": {
        "description": "Breadcrumb provides contextual information about page hierarchy.\n\n[Live Demo](https://www.primevue.org/breadcrumb/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BreadcrumbStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "BreadcrumbStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "BreadcrumbClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-breadcrumb\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "list",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-breadcrumb-list\"",
                            "description": "Class name of the list element"
                        },
                        {
                            "name": "homeItem",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-breadcrumb-home-item\"",
                            "description": "Class name of the home item element"
                        },
                        {
                            "name": "separator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-breadcrumb-separator\"",
                            "description": "Class name of the separator element"
                        },
                        {
                            "name": "separatorIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-breadcrumb-separator-icon\"",
                            "description": "Class name of the separator icon element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-breadcrumb-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "itemLink",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-breadcrumb-item-link\"",
                            "description": "Class name of the item link element"
                        },
                        {
                            "name": "itemIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-breadcrumb-item-icon\"",
                            "description": "Class name of the item icon element"
                        },
                        {
                            "name": "itemLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-breadcrumb-item-label\"",
                            "description": "Class name of the item label element"
                        }
                    ]
                }
            }
        }
    },
    "button": {
        "description": "Button is an extension to standard button element with icons and theming.\n\n[Live Demo](https://www.primevue.org/button/)",
        "components": {
            "default": {
                "description": "Button is an extension to standard button element with icons and theming.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ButtonContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ButtonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "pcBadge",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the Badge component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ButtonProps": {
                    "description": "Defines valid properties in Button component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-activedescendant",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
                        },
                        {
                            "name": "aria-atomic",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
                        },
                        {
                            "name": "aria-autocomplete",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"inline\" | \"list\" | \"both\"",
                            "default": "",
                            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
                        },
                        {
                            "name": "aria-busy",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
                        },
                        {
                            "name": "aria-checked",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"mixed\"",
                            "default": "",
                            "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
                        },
                        {
                            "name": "aria-colcount",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the total number of columns in a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-colindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-colspan",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-controls",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
                        },
                        {
                            "name": "aria-current",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"page\" | \"step\" | \"location\" | \"date\" | \"time\"",
                            "default": "",
                            "description": "Indicates the element that represents the current item within a container or set of related elements."
                        },
                        {
                            "name": "aria-describedby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) that describes the object."
                        },
                        {
                            "name": "aria-details",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element that provides a detailed, extended description for the object."
                        },
                        {
                            "name": "aria-disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
                        },
                        {
                            "name": "aria-dropeffect",
                            "optional": true,
                            "readonly": false,
                            "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"",
                            "default": "",
                            "description": "Indicates what functions can be performed when a dragged object is released on the drop target.",
                            "deprecated": "in ARIA 1.1"
                        },
                        {
                            "name": "aria-errormessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element that provides an error message for the object."
                        },
                        {
                            "name": "aria-expanded",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
                        },
                        {
                            "name": "aria-flowto",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
                        },
                        {
                            "name": "aria-grabbed",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
                            "deprecated": "in ARIA 1.1"
                        },
                        {
                            "name": "aria-haspopup",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"menu\" | \"listbox\" | \"tree\" | \"grid\" | \"dialog\"",
                            "default": "",
                            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
                        },
                        {
                            "name": "aria-hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether the element is exposed to an accessibility API."
                        },
                        {
                            "name": "aria-invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"grammar\" | \"spelling\"",
                            "default": "",
                            "description": "Indicates the entered value does not conform to the format expected by the application."
                        },
                        {
                            "name": "aria-keyshortcuts",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels the current element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) that labels the current element."
                        },
                        {
                            "name": "aria-level",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the hierarchical level of an element within a structure."
                        },
                        {
                            "name": "aria-live",
                            "optional": true,
                            "readonly": false,
                            "type": "\"off\" | \"assertive\" | \"polite\"",
                            "default": "",
                            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
                        },
                        {
                            "name": "aria-modal",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether an element is modal when displayed."
                        },
                        {
                            "name": "aria-multiline",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether a text box accepts multiple lines of input or only a single line."
                        },
                        {
                            "name": "aria-multiselectable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the user may select more than one item from the current selectable descendants."
                        },
                        {
                            "name": "aria-orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "",
                            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
                        },
                        {
                            "name": "aria-owns",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
                        },
                        {
                            "name": "aria-placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
                        },
                        {
                            "name": "aria-posinset",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
                        },
                        {
                            "name": "aria-pressed",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"mixed\"",
                            "default": "",
                            "description": "Indicates the current \"pressed\" state of toggle buttons."
                        },
                        {
                            "name": "aria-readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the element is not editable, but is otherwise operable."
                        },
                        {
                            "name": "aria-relevant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
                            "default": "",
                            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
                        },
                        {
                            "name": "aria-required",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that user input is required on the element before a form may be submitted."
                        },
                        {
                            "name": "aria-roledescription",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a human-readable, author-localized description for the role of an element."
                        },
                        {
                            "name": "aria-rowcount",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the total number of rows in a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-rowindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-rowspan",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-selected",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates the current \"selected\" state of various widgets."
                        },
                        {
                            "name": "aria-setsize",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
                        },
                        {
                            "name": "aria-sort",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
                            "default": "",
                            "description": "Indicates if items in a table or grid are sorted in ascending or descending order."
                        },
                        {
                            "name": "aria-valuemax",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the maximum allowed value for a range widget."
                        },
                        {
                            "name": "aria-valuemin",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the minimum allowed value for a range widget."
                        },
                        {
                            "name": "aria-valuenow",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the current value for a range widget."
                        },
                        {
                            "name": "aria-valuetext",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the human readable text alternative of aria-valuenow for a range widget."
                        },
                        {
                            "name": "innerHTML",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "accesskey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "contenteditable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"inherit\" | \"plaintext-only\"",
                            "default": ""
                        },
                        {
                            "name": "contextmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dir",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "\"\" | Booleanish | \"hidden\" | \"until-found\"",
                            "default": ""
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "inert",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "lang",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spellcheck",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "translate",
                            "optional": true,
                            "readonly": false,
                            "type": "\"yes\" | \"no\"",
                            "default": ""
                        },
                        {
                            "name": "radiogroup",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "role",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "about",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "datatype",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "inlist",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "prefix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "property",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "resource",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "typeof",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "vocab",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autocapitalize",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autocorrect",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autosave",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemprop",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemscope",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "itemtype",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemid",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemref",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "results",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "security",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "unselectable",
                            "optional": true,
                            "readonly": false,
                            "type": "\"on\" | \"off\"",
                            "default": ""
                        },
                        {
                            "name": "inputmode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\" | \"search\"",
                            "default": "",
                            "description": "Hints at the type of data that might be entered by the user while editing the element or its contents"
                        },
                        {
                            "name": "is",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specify that a standard HTML element should behave like a defined custom built-in element"
                        },
                        {
                            "name": "autofocus",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "form",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formaction",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formenctype",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formmethod",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formnovalidate",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "formtarget",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"submit\" | \"reset\" | \"button\"",
                            "default": ""
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number | readonly string[]",
                            "default": ""
                        },
                        {
                            "name": "onCopy",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCut",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPaste",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionupdate",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDrag",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragexit",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDrop",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocusin",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocusout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onChange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onBeforeinput",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onInput",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onReset",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSubmit",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onInvalid",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoad",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onError",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeydown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeypress",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeyup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAuxclick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onClick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onContextmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDblclick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMousedown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMousemove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAbort",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCanplay",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCanplaythrough",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDurationchange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEmptied",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEncrypted",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEnded",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadeddata",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadedmetadata",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPause",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPlay",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPlaying",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onProgress",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onRatechange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSeeked",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSeeking",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onStalled",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSuspend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTimeupdate",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onVolumechange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onWaiting",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onScrollend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchcancel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchmove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerdown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointermove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointercancel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onWheel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationiteration",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTransitionend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTransitionstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the button."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the button."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the button."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the icon."
                        },
                        {
                            "name": "iconPos",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"top\" | \"bottom\"",
                            "default": "left",
                            "description": "Position of the icon."
                        },
                        {
                            "name": "iconClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the icon."
                        },
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the badge."
                        },
                        {
                            "name": "badgeClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the badge."
                        },
                        {
                            "name": "badgeSeverity",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HintedString<\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\">",
                            "default": "",
                            "description": "Severity type of the badge."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the button is in loading state."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Component<any, any, any, ComputedOptions, MethodOptions, Object, any>",
                            "default": "BUTTON",
                            "description": "Use to change the HTML tag of root element."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it changes the default rendered element for the one passed as a child element."
                        },
                        {
                            "name": "link",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a link style to the button."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\" | \"help\">",
                            "default": "",
                            "description": "Defines the style of the button."
                        },
                        {
                            "name": "raised",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a shadow to indicate elevation."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a circular border radius to the button."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a textual class to the button without a background initially."
                        },
                        {
                            "name": "outlined",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a border class without a background initially."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the button."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"outlined\" | \"text\" | \"link\"",
                            "default": "undefined",
                            "description": "Specifies the variant of the component."
                        },
                        {
                            "name": "plain",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a plain textual class to the button without a background initially.",
                            "deprecated": "since v4.2.0. Use a contrast severity instead."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ButtonPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "ButtonHTMLAttributes"
                },
                "ButtonContext": {
                    "description": "Defines current options in Button component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the element as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ButtonSlots": {
                    "description": "Defines valid slots in Button component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">a11yAttrs</span>: <span class=\"doc-option-parameter-type\">Record</span>, <span class=\"doc-option-parameter-type\">// Object containing the accessibility attributes.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content such as icons, images and text can be placed inside the button via the default slot. Note that when slot is used, label, icon and badge properties are not included."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "loading icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        }
                    ]
                },
                "ButtonEmitsOptions": {
                    "description": "Defines valid emits in Button component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ButtonProps": {
                    "description": "Defines valid properties in Button component.",
                    "props": []
                },
                "ButtonContext": {
                    "description": "Defines current options in Button component.",
                    "props": []
                },
                "ButtonSlots": {
                    "description": "Defines valid slots in Button component.",
                    "props": []
                },
                "ButtonEmitsOptions": {
                    "description": "Defines valid emits in Button component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ButtonPassThroughOptionType": {
                    "values": "ButtonPassThroughAttributes | (options: ButtonPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ButtonEmits": {
                    "values": "EmitFn<ButtonEmitsOptions>"
                }
            }
        }
    },
    "buttonstyle": {
        "description": "Button is an extension to standard button element with icons and theming.\n\n[Live Demo](https://www.primevue.org/button/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ButtonStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ButtonClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-button\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-button-loading-icon\"",
                            "description": "Class name of the loading icon element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-button-icon\"",
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-button-label\"",
                            "description": "Class name of the label element"
                        }
                    ]
                }
            }
        }
    },
    "buttongroup": {
        "description": "A set of Buttons can be displayed together using the ButtonGroup component.\n\n[Live Demo](https://www.primevue.org/button/)",
        "components": {
            "default": {
                "description": "A set of Buttons can be displayed together using the ButtonGroup component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ButtonGroupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ButtonGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ButtonGroupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ButtonGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ButtonGroupProps": {
                    "description": "Defines valid properties in ButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ButtonGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ButtonGroupSlots": {
                    "description": "Defines valid slots in ButtonGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect Button components."
                        }
                    ]
                },
                "ButtonGroupEmitsOptions": {
                    "description": "Defines valid emits in ButtonGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ButtonGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ButtonGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ButtonGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ButtonGroupProps": {
                    "description": "Defines valid properties in ButtonGroup component.",
                    "props": []
                },
                "ButtonGroupSlots": {
                    "description": "Defines valid slots in ButtonGroup component.",
                    "props": []
                },
                "ButtonGroupEmitsOptions": {
                    "description": "Defines valid emits in ButtonGroup component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupPassThroughOptionType": {
                    "values": "ButtonGroupPassThroughAttributes | (options: ButtonGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ButtonGroupEmits": {
                    "values": "EmitFn<ButtonGroupEmitsOptions>"
                }
            }
        }
    },
    "buttongroupstyle": {
        "description": "A set of Buttons can be displayed together using the ButtonGroup component.\n\n[Live Demo](https://www.primevue.org/button/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ButtonGroupStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ButtonGroupClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-buttongroup\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "calendar": {
        "description": "Calendar also known as DatePicker, is a form component to work with dates.\n\n[Live Demo](https://www.primevue.org/datepicker/)",
        "components": {
            "default": {
                "description": "",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CalendarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarResponsiveOptions": {
                    "description": "Custom Calendar responsive options metadata.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarMonthChangeEvent": {
                    "description": "Custom Calendar month change event.",
                    "relatedProp": "CalendarEmitsOptions['month-change']]",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarYearChangeEvent": {
                    "description": "Custom Calendar year change event.",
                    "relatedProp": "CalendarEmitsOptions['year-change']]",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarBlurEvent": {
                    "description": "Custom Calendar blur event.",
                    "relatedProp": "CalendarEmitsOptions['blur']",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "undefined.CalendarProps.pt",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarState": {
                    "description": "Defines current inline state in Calendar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarDateContext": {
                    "description": "Defines current date options in Calendar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarContext": {
                    "description": "Defines current options in Calendar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarMonthOptions": {
                    "description": "Defines current month options.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarYearOptions": {
                    "description": "Defines current year options.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarProps": {
                    "description": "Defines valid properties in Calendar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarDateSlotOptions": {
                    "description": "Defines valid options of the date slot in Calendar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarSlots": {
                    "description": "Defines valid slots in Calendar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "CalendarEmitsOptions": {
                    "description": "Defines valid emits in Calendar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CalendarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "CalendarSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "CalendarResponsiveOptions": {
                    "description": "Custom Calendar responsive options metadata.",
                    "props": []
                },
                "CalendarMonthChangeEvent": {
                    "description": "Custom Calendar month change event.",
                    "props": []
                },
                "CalendarYearChangeEvent": {
                    "description": "Custom Calendar year change event.",
                    "props": []
                },
                "CalendarBlurEvent": {
                    "description": "Custom Calendar blur event.",
                    "props": []
                },
                "CalendarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "CalendarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "CalendarState": {
                    "description": "Defines current inline state in Calendar component.",
                    "props": []
                },
                "CalendarDateContext": {
                    "description": "Defines current date options in Calendar component.",
                    "props": []
                },
                "CalendarContext": {
                    "description": "Defines current options in Calendar component.",
                    "props": []
                },
                "CalendarMonthOptions": {
                    "description": "Defines current month options.",
                    "props": []
                },
                "CalendarYearOptions": {
                    "description": "Defines current year options.",
                    "props": []
                },
                "CalendarProps": {
                    "description": "Defines valid properties in Calendar component.",
                    "props": []
                },
                "CalendarDateSlotOptions": {
                    "description": "Defines valid options of the date slot in Calendar component.",
                    "props": []
                },
                "CalendarSlots": {
                    "description": "Defines valid slots in Calendar component.",
                    "props": []
                },
                "CalendarEmitsOptions": {
                    "description": "Defines valid emits in Calendar component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CalendarEmits": {
                    "values": "EmitFn<CalendarEmitsOptions> & DatePicker.DatePickerEmits"
                }
            }
        }
    },
    "calendarstyle": {
        "description": "Calendar also known as DatePicker, is a form component to work with dates.\n\n[Live Demo](https://www.primevue.org/datepicker/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CalendarStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CalendarStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "CalendarClasses": {
                    "members": []
                }
            }
        }
    },
    "card": {
        "description": "Card is a flexible container component.\n\n[Live Demo](https://www.primevue.org/card/)",
        "components": {
            "default": {
                "description": "Card is a flexible container component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CardProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "CardPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "CardProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "body",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the body's DOM element."
                        },
                        {
                            "name": "caption",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the caption's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "subtitle",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the subtitle's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "CardPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CardProps": {
                    "description": "Defines valid properties in Card component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<CardPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "CardSlots": {
                    "description": "Defines valid slots in Card component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "title",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom title template."
                        },
                        {
                            "name": "subtitle",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom subtitle template."
                        },
                        {
                            "name": "content",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        }
                    ]
                },
                "CardEmitsOptions": {
                    "description": "Defines valid emits in Card component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CardPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "CardPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "CardPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "CardProps": {
                    "description": "Defines valid properties in Card component.",
                    "props": []
                },
                "CardSlots": {
                    "description": "Defines valid slots in Card component.",
                    "props": []
                },
                "CardEmitsOptions": {
                    "description": "Defines valid emits in Card component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CardPassThroughOptionType": {
                    "values": "CardPassThroughAttributes | (options: CardPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "CardEmits": {
                    "values": "EmitFn<CardEmitsOptions>"
                }
            }
        }
    },
    "cardstyle": {
        "description": "Card is a flexible container component.\n\n[Live Demo](https://www.primevue.org/card/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CardStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "CardClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-card\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-card-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "body",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-card-body\"",
                            "description": "Class name of the body element"
                        },
                        {
                            "name": "caption",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-card-caption\"",
                            "description": "Class name of the caption element"
                        },
                        {
                            "name": "title",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-card-title\"",
                            "description": "Class name of the title element"
                        },
                        {
                            "name": "subtitle",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-card-subtitle\"",
                            "description": "Class name of the subtitle element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-card-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "footer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-card-footer\"",
                            "description": "Class name of the footer element"
                        }
                    ]
                }
            }
        }
    },
    "carousel": {
        "description": "Carousel is a content slider featuring various customization options.\n\n[Live Demo](https://www.primevue.org/carousel/)",
        "components": {
            "default": {
                "description": "Carousel is a content slider featuring various customization options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CarouselPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CarouselProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CarouselState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "CarouselContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "CarouselSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CarouselProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CarouselState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "CarouselPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "CarouselProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "contentContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content container's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "pcPrevButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the previous button's DOM element."
                        },
                        {
                            "name": "viewport",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the viewport's DOM element."
                        },
                        {
                            "name": "itemList",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the items list's DOM element."
                        },
                        {
                            "name": "itemClone",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item clone's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "pcNextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the next button's DOM element."
                        },
                        {
                            "name": "indicatorList",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicator list's DOM element."
                        },
                        {
                            "name": "indicator",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicator's DOM element."
                        },
                        {
                            "name": "indicatorButton",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicator button's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "CarouselPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CarouselState": {
                    "description": "Defines current inline state in Carousel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "remainingItems",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Remaining items' count as a number."
                        },
                        {
                            "name": "d_numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items per page as a number."
                        },
                        {
                            "name": "d_numScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items to scroll as a number."
                        },
                        {
                            "name": "d_oldNumScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Old number of items to scroll as a number."
                        },
                        {
                            "name": "d_oldNumVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Old number of items per page as a number."
                        },
                        {
                            "name": "d_oldValue",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Old array of objects to display."
                        },
                        {
                            "name": "d_page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "totalShiftedItems",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Total shifted items' count as a number."
                        },
                        {
                            "name": "allowAutoplay",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Allow autoplay as a boolean."
                        },
                        {
                            "name": "d_circular",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite as a boolean."
                        },
                        {
                            "name": "swipeThreshold",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "20",
                            "description": "Swipe threshold count as a number."
                        }
                    ],
                    "methods": []
                },
                "CarouselContext": {
                    "description": "Defines current inline options in Carousel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "highlighted",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current highlighted state of the indicator as a boolean."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the item as a number."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the item as a boolean."
                        },
                        {
                            "name": "start",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current start state of the item as a boolean."
                        },
                        {
                            "name": "end",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current end state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "CarouselResponsiveOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Breakpoint for responsive mode. Exp;"
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of visible items on breakpoint."
                        },
                        {
                            "name": "numScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of scrolled items on breakpoint."
                        }
                    ],
                    "methods": []
                },
                "CarouselProps": {
                    "description": "Defines valid properties in Carousel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "page",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "numVisible",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items per page."
                        },
                        {
                            "name": "numScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items to scroll."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselResponsiveOptions[]",
                            "default": "",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the layout of the component, valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "verticalViewPortHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "300px",
                            "description": "Height of the viewport in vertical layout."
                        },
                        {
                            "name": "containerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the viewport container."
                        },
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of main content."
                        },
                        {
                            "name": "indicatorsContentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the indicator items."
                        },
                        {
                            "name": "circular",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite."
                        },
                        {
                            "name": "autoplayInterval",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Time in milliseconds to scroll items automatically."
                        },
                        {
                            "name": "showNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in container."
                        },
                        {
                            "name": "showIndicators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display indicator container."
                        },
                        {
                            "name": "prevButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass attributes to the previous Button component."
                        },
                        {
                            "name": "nextButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass attributes to the next Button component."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<CarouselPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "CarouselSlots": {
                    "description": "Defines valid slots in Carousel slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Data of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the item</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "previcon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom previous icon template."
                        },
                        {
                            "name": "nexticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom next icon template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        }
                    ]
                },
                "CarouselEmitsOptions": {
                    "description": "Defines valid emits in Carousel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:page",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New page value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the page changes."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CarouselPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "CarouselSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "CarouselPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "CarouselPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "CarouselState": {
                    "description": "Defines current inline state in Carousel component.",
                    "props": []
                },
                "CarouselContext": {
                    "description": "Defines current inline options in Carousel component.",
                    "props": []
                },
                "CarouselResponsiveOptions": {
                    "props": []
                },
                "CarouselProps": {
                    "description": "Defines valid properties in Carousel component.",
                    "props": []
                },
                "CarouselSlots": {
                    "description": "Defines valid slots in Carousel slots.",
                    "props": []
                },
                "CarouselEmitsOptions": {
                    "description": "Defines valid emits in Carousel component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CarouselPassThroughOptionType": {
                    "values": "CarouselPassThroughAttributes | (options: CarouselPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "CarouselEmits": {
                    "values": "EmitFn<CarouselEmitsOptions>"
                }
            }
        }
    },
    "carouselstyle": {
        "description": "Carousel is a content slider featuring various customization options.\n\n[Live Demo](https://www.primevue.org/carousel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CarouselStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CarouselStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "CarouselClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "contentContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-content-container\"",
                            "description": "Class name of the content container element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "pcPrevButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-prev-button\"",
                            "description": "Class name of the previous button element"
                        },
                        {
                            "name": "viewport",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-viewport\"",
                            "description": "Class name of the viewport element"
                        },
                        {
                            "name": "itemList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-item-list\"",
                            "description": "Class name of the item list element"
                        },
                        {
                            "name": "itemClone",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-item-clone\"",
                            "description": "Class name of the item clone element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "pcNextButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-next-button\"",
                            "description": "Class name of the next button element"
                        },
                        {
                            "name": "indicatorList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-indicator-list\"",
                            "description": "Class name of the indicator list element"
                        },
                        {
                            "name": "indicator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-indicator\"",
                            "description": "Class name of the indicator element"
                        },
                        {
                            "name": "indicatorButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-indicator-button\"",
                            "description": "Class name of the indicator button element"
                        },
                        {
                            "name": "footer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-carousel-footer\"",
                            "description": "Class name of the footer element"
                        }
                    ]
                }
            }
        }
    },
    "cascadeselect": {
        "description": "CascadeSelect is a form component to select a value from a nested structure of options.\n\n[Live Demo](https://www.primevue.org/cascadeselect/)",
        "components": {
            "default": {
                "description": "CascadeSelect is a form component to select a value from a nested structure of options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CascadeSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CascadeSelectProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CascadeSelectState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "CascadeSelectContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectChangeEvent": {
                    "description": "Custom change event",
                    "relatedProp": "CascadeSelectEmitsOptions.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "CascadeSelectGroupChangeEvent"
                },
                "CascadeSelectGroupChangeEvent": {
                    "description": "",
                    "relatedProp": "CascadeSelectEmitsOptions.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "CascadeSelectChangeEvent"
                },
                "CascadeSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "CascadeSelectProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown button's DOM element."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown icon's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the overlay's DOM element."
                        },
                        {
                            "name": "listContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list container's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option's DOM element."
                        },
                        {
                            "name": "optionContent",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option content's DOM element."
                        },
                        {
                            "name": "optionText",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option text's DOM element."
                        },
                        {
                            "name": "optionList",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option list's DOM element."
                        },
                        {
                            "name": "groupIconContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the group icon container's DOM element."
                        },
                        {
                            "name": "groupIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the group icon's DOM element."
                        },
                        {
                            "name": "hiddenInputContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden input container's DOM element."
                        },
                        {
                            "name": "hiddenInput",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden input's DOM element."
                        },
                        {
                            "name": "hiddenSelectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden selected message's DOM element."
                        },
                        {
                            "name": "hiddenSearchResult",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the search result message text aria's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectFocusedOptionInfo": {
                    "description": "Defines focused item info",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item index"
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item level"
                        },
                        {
                            "name": "parentKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Parent key info"
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectState": {
                    "description": "Defines current inline state in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string"
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedOptionInfo",
                            "optional": false,
                            "readonly": false,
                            "type": "CascadeSelectFocusedOptionInfo",
                            "default": "",
                            "description": "Current focused item info."
                        },
                        {
                            "name": "activeOptionPath",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectContext": {
                    "description": "Defines current options in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "option",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current option."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the option."
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Level of the option."
                        },
                        {
                            "name": "optionGroup",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current option group state of option as a boolean."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of option as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of option as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of option as a boolean."
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectProps": {
                    "description": "Defines valid properties in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | string[] | Function",
                            "default": "",
                            "description": "Property name or getter function to retrieve the items of a group."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "showClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in clear button."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4.0. Use 'overlayStyle' prop.\nInline style of the overlay overlay."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4.0. Use 'overlayClass' prop.\nStyle class of the overlay overlay."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4.0. Use 'overlayProps' prop.\nUsed to pass all properties of the HTMLDivElement to the overlay overlay inside the component."
                        },
                        {
                            "name": "overlayStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay overlay."
                        },
                        {
                            "name": "overlayClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay overlay."
                        },
                        {
                            "name": "overlayProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the overlay overlay inside the component."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dropdown is in loading state."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dropdown."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "optionGroupIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the option group."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected/opened."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "searchLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in searching. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "searchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySearchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No available options",
                            "description": "Text to be displayed when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<CascadeSelectPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectSlots": {
                    "description": "Defines valid slots in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each option."
                        },
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">placeholder</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Placeholder text to show</span>\n }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom dropdown icon template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "optiongroupicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option group icon template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Current value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Options of the component</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Current value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Options of the component</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "clearicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">clearCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Clear icon click function.</span>\n}",
                                    "description": "clear icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom clear icon template."
                        }
                    ]
                },
                "CascadeSelectEmitsOptions": {
                    "description": "Defines valid emits in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CascadeSelectChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        },
                        {
                            "name": "group-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CascadeSelectGroupChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a group changes."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CascadeSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "CascadeSelectChangeEvent": {
                    "description": "Custom change event",
                    "props": []
                },
                "CascadeSelectGroupChangeEvent": {
                    "description": "",
                    "props": []
                },
                "CascadeSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "CascadeSelectPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "CascadeSelectFocusedOptionInfo": {
                    "description": "Defines focused item info",
                    "props": []
                },
                "CascadeSelectState": {
                    "description": "Defines current inline state in CascadeSelect component.",
                    "props": []
                },
                "CascadeSelectContext": {
                    "description": "Defines current options in CascadeSelect component.",
                    "props": []
                },
                "CascadeSelectProps": {
                    "description": "Defines valid properties in CascadeSelect component.",
                    "props": []
                },
                "CascadeSelectSlots": {
                    "description": "Defines valid slots in CascadeSelect component.",
                    "props": []
                },
                "CascadeSelectEmitsOptions": {
                    "description": "Defines valid emits in CascadeSelect component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CascadeSelectPassThroughOptionType": {
                    "values": "CascadeSelectPassThroughAttributes | (options: CascadeSelectPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "CascadeSelectPassThroughTransitionType": {
                    "values": "TransitionProps | (options: CascadeSelectPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "CascadeSelectEmits": {
                    "values": "EmitFn<CascadeSelectEmitsOptions>"
                }
            }
        }
    },
    "cascadeselectstyle": {
        "description": "CascadeSelect is a form component to select a value from a nested structure of options.\n\n[Live Demo](https://www.primevue.org/cascadeselect/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CascadeSelectStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CascadeSelectStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "CascadeSelectClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-label\"",
                            "description": "Class name of the label element"
                        },
                        {
                            "name": "dropdown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-dropdown\"",
                            "description": "Class name of the dropdown element"
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-loading-icon\"",
                            "description": "Class name of the loading icon element"
                        },
                        {
                            "name": "clearIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-clear-icon\"",
                            "description": "Class name of the dropdown icon element"
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-dropdown-icon\"",
                            "description": "Class name of the dropdown icon element"
                        },
                        {
                            "name": "overlay",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-overlay\"",
                            "description": "Class name of the overlay element"
                        },
                        {
                            "name": "listContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-list-container\"",
                            "description": "Class name of the list container element"
                        },
                        {
                            "name": "list",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-list\"",
                            "description": "Class name of the list element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "itemContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-item-content\"",
                            "description": "Class name of the item content element"
                        },
                        {
                            "name": "itemText",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-item-text\"",
                            "description": "Class name of the item text element"
                        },
                        {
                            "name": "groupIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-group-icon\"",
                            "description": "Class name of the group icon element"
                        },
                        {
                            "name": "itemList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-cascadeselect-item-list\"",
                            "description": "Class name of the item list element"
                        }
                    ]
                }
            }
        }
    },
    "chart": {
        "description": "Chart groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/chart/)",
        "components": {
            "default": {
                "description": "Chart groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChartPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ChartProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ChartPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ChartProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "canvas",
                            "optional": true,
                            "readonly": false,
                            "type": "ChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the canvas's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ChartPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ChartSelectEvent": {
                    "description": "Custom select event.",
                    "relatedProp": "ChartEmitsOptions.select",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected element."
                        },
                        {
                            "name": "dataset",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected dataset."
                        }
                    ],
                    "methods": []
                },
                "ChartProps": {
                    "description": "Defines valid properties in Chart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the chart."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Data to display."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Options to customize the chart."
                        },
                        {
                            "name": "plugins",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Used to custom plugins of the chart."
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Width of the chart in non-responsive mode."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "150",
                            "description": "Height of the chart in non-responsive mode."
                        },
                        {
                            "name": "canvasProps",
                            "optional": true,
                            "readonly": false,
                            "type": "CanvasHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the CanvasHTMLAttributes to canvas element inside the component."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ChartPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ChartSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ChartEmitsOptions": {
                    "description": "Defines valid emits in Chart component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ChartSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded."
                        },
                        {
                            "name": "loaded",
                            "parameters": [
                                {
                                    "name": "chart",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Chart instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when chart is loaded."
                        }
                    ]
                },
                "ChartMethods": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "refresh",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Redraws the graph."
                        },
                        {
                            "name": "reinit",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Destroys the graph first and then creates it again."
                        },
                        {
                            "name": "generateLegend",
                            "parameters": [],
                            "returnType": "any",
                            "description": "Returns an HTML string of a legend for that chart. The legend is generated from the legendCallback in the options."
                        },
                        {
                            "name": "getChart",
                            "parameters": [],
                            "returnType": "any",
                            "description": "Returns Chart instance."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ChartPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ChartPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ChartPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ChartSelectEvent": {
                    "description": "Custom select event.",
                    "props": []
                },
                "ChartProps": {
                    "description": "Defines valid properties in Chart component.",
                    "props": []
                },
                "ChartSlots": {
                    "props": []
                },
                "ChartEmitsOptions": {
                    "description": "Defines valid emits in Chart component.",
                    "props": []
                },
                "ChartMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ChartPassThroughOptionType": {
                    "values": "ChartPassThroughAttributes | (options: ChartPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ChartEmits": {
                    "values": "EmitFn<ChartEmitsOptions>"
                }
            }
        }
    },
    "chartstyle": {
        "description": "Chart groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/chart/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChartStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ChartStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ChartClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-chart\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "checkbox": {
        "description": "Checkbox is an extension to standard checkbox element with theming.\n\n[Live Demo](https://www.primevue.org/checkbox/)",
        "components": {
            "default": {
                "description": "Accordion groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CheckboxProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CheckboxState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "CheckboxContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "CheckboxPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "CheckboxProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "box",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the box's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "CheckboxPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CheckboxState": {
                    "description": "Defines current inline state in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CheckboxProps": {
                    "description": "Defines valid properties in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value binding of the checkbox."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "binary",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Allows to select a boolean value instead of multiple values."
                        },
                        {
                            "name": "indeterminate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies input state as indeterminate."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that the element is required."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<CheckboxPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "CheckboxContext": {
                    "description": "Defines current options in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current checked state of the item as a boolean."
                        },
                        {
                            "name": "indeterminate",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current indeterminate state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "CheckboxSlots": {
                    "description": "Defines valid slots in Checkbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// State of the checkbox.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">indeterminate</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Indeterminate state of the checkbox.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        }
                    ]
                },
                "CheckboxEmitsOptions": {
                    "description": "Defines valid emits in Checkbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "update:indeterminate",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "false",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the \"indeterminate\" changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CheckboxPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "CheckboxPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "CheckboxPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "CheckboxState": {
                    "description": "Defines current inline state in Checkbox component.",
                    "props": []
                },
                "CheckboxProps": {
                    "description": "Defines valid properties in Checkbox component.",
                    "props": []
                },
                "CheckboxContext": {
                    "description": "Defines current options in Checkbox component.",
                    "props": []
                },
                "CheckboxSlots": {
                    "description": "Defines valid slots in Checkbox component.",
                    "props": []
                },
                "CheckboxEmitsOptions": {
                    "description": "Defines valid emits in Checkbox component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CheckboxPassThroughOptionType": {
                    "values": "CheckboxPassThroughAttributes | (options: CheckboxPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "CheckboxEmits": {
                    "values": "EmitFn<CheckboxEmitsOptions>"
                }
            }
        }
    },
    "checkboxstyle": {
        "description": "Checkbox is an extension to standard checkbox element with theming.\n\n[Live Demo](https://www.primevue.org/checkbox/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CheckboxStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "CheckboxClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-checkbox\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "box",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-checkbox-box\"",
                            "description": "Class name of the box element"
                        },
                        {
                            "name": "input",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-checkbox-input\"",
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-checkbox-icon\"",
                            "description": "Class name of the icon element"
                        }
                    ]
                }
            }
        }
    },
    "checkboxgroup": {
        "description": "CheckboxGroup is a component that groups multiple checkboxes, allowing users to select one or more options.\n\n[Live Demo](https://www.primevue.org/checkbox/)",
        "components": {
            "default": {
                "description": "CheckboxGroup is a component that groups multiple checkboxes, allowing users to select one or more options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CheckboxGroupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "CheckboxGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "undefined.FloatLabelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "CheckboxGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CheckboxGroupProps": {
                    "description": "Defines valid properties in CheckboxGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value binding of the checkboxes."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Default values of the checkboxes in uncontrolled mode."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input elements."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to set form control options."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<CheckboxGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "CheckboxGroupSlots": {
                    "description": "Defines valid slots in CheckboxGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "CheckboxGroupEmitsOptions": {
                    "description": "Defines valid emits in CheckboxGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CheckboxGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "CheckboxGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "CheckboxGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "CheckboxGroupProps": {
                    "description": "Defines valid properties in CheckboxGroup component.",
                    "props": []
                },
                "CheckboxGroupSlots": {
                    "description": "Defines valid slots in CheckboxGroup component.",
                    "props": []
                },
                "CheckboxGroupEmitsOptions": {
                    "description": "Defines valid emits in CheckboxGroup component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CheckboxGroupPassThroughOptionType": {
                    "values": "CheckboxGroupPassThroughAttributes | (options: CheckboxGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "CheckboxGroupEmits": {
                    "values": "EmitFn<CheckboxGroupEmitsOptions>"
                }
            }
        }
    },
    "checkboxgroupstyle": {
        "description": "CheckboxGroup is a component that groups multiple checkboxes, allowing users to select one or more options.\n\n[Live Demo](https://www.primevue.org/checkbox/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxGroupStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "CheckboxGroupStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "CheckboxGroupClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-checkbox-group\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "chip": {
        "description": "Chip represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/chip)",
        "components": {
            "default": {
                "description": "Chip represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ChipPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ChipProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the image's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the label' DOM element."
                        },
                        {
                            "name": "removeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the removeIcon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ChipPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ChipState": {
                    "description": "Defines current inline state in Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ChipProps": {
                    "description": "Defines valid properties in Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the text to display."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the icon to display."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the image to display."
                        },
                        {
                            "name": "removable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display a remove icon."
                        },
                        {
                            "name": "removeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the remove element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ChipPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ChipSlots": {
                    "description": "Defines valid slots in Chip component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Content can easily be customized with the default slot instead of using the built-in modes."
                        },
                        {
                            "name": "icon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "removeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Remove icon click event</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">keydownCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Remove icon keydown event</span>\n}",
                                    "description": "remove icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom remove icon template of chip component."
                        }
                    ]
                },
                "ChipEmitsOptions": {
                    "description": "Defines valid properties in Chip component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is removed."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ChipPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ChipPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ChipPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ChipState": {
                    "description": "Defines current inline state in Chip component.",
                    "props": []
                },
                "ChipProps": {
                    "description": "Defines valid properties in Chip component.",
                    "props": []
                },
                "ChipSlots": {
                    "description": "Defines valid slots in Chip component.",
                    "props": []
                },
                "ChipEmitsOptions": {
                    "description": "Defines valid properties in Chip component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ChipPassThroughOptionType": {
                    "values": "ChipPassThroughAttributes | (options: ChipPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ChipEmits": {
                    "values": "EmitFn<ChipEmitsOptions>"
                }
            }
        }
    },
    "chipstyle": {
        "description": "Chip represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/chip)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ChipStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ChipClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-chip\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "image",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-chip-image\"",
                            "description": "Class name of the image element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-chip-icon\"",
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-chip-label\"",
                            "description": "Class name of the label element"
                        },
                        {
                            "name": "removeIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-chip-remove-icon\"",
                            "description": "Class name of the remove icon element"
                        }
                    ]
                }
            }
        }
    },
    "chips": {
        "description": "Chips groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/inputchips/)",
        "components": {
            "default": {
                "description": "",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "ChipsSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "ChipsAddEvent": {
                    "description": "Custom add event.",
                    "relatedProp": "undefined.ChipsEmitsOptions.add",
                    "props": [],
                    "methods": [],
                    "extendedBy": "ChipsRemoveEvent",
                    "extendedTypes": "default"
                },
                "ChipsRemoveEvent": {
                    "description": "Custom remove event.",
                    "relatedProp": "undefined.ChipsEmitsOptions.remove",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "ChipsAddEvent"
                },
                "ChipsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "undefined.ChipsProps.pt",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "ChipsPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "ChipsState": {
                    "description": "Defines current inline state in Chips component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "ChipsProps": {
                    "description": "Defines valid properties in Chips component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "ChipsSlots": {
                    "description": "Defines valid slots in Chips slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "ChipsEmitsOptions": {
                    "description": "Defines valid emits in Chips component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ChipsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ChipsSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "ChipsAddEvent": {
                    "description": "Custom add event.",
                    "props": []
                },
                "ChipsRemoveEvent": {
                    "description": "Custom remove event.",
                    "props": []
                },
                "ChipsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ChipsPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ChipsState": {
                    "description": "Defines current inline state in Chips component.",
                    "props": []
                },
                "ChipsProps": {
                    "description": "Defines valid properties in Chips component.",
                    "props": []
                },
                "ChipsSlots": {
                    "description": "Defines valid slots in Chips slots.",
                    "props": []
                },
                "ChipsEmitsOptions": {
                    "description": "Defines valid emits in Chips component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ChipsEmits": {
                    "values": "EmitFn<ChipsEmitsOptions> & InputChips.InputChipsEmits"
                }
            }
        }
    },
    "chipsstyle": {
        "description": "Chips groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/inputchips/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipsStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ChipsStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ChipsClasses": {
                    "members": []
                }
            }
        }
    },
    "colorpicker": {
        "description": "ColorPicker groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/colorpicker/)",
        "components": {
            "default": {
                "description": "ColorPicker groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColorPickerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ColorPickerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ColorPickerState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "ColorPickerEmitsOptions.change",
                    "props": [
                        {
                            "name": "event",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected color value."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ColorPickerProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "preview",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the preview's DOM element."
                        },
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "colorSelector",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the color selector's DOM element."
                        },
                        {
                            "name": "colorBackground",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the color background's DOM element."
                        },
                        {
                            "name": "colorHandle",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the color handler's DOM element."
                        },
                        {
                            "name": "hue",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hue's DOM element."
                        },
                        {
                            "name": "hueHandle",
                            "optional": false,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hue handler's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ColorPickerState": {
                    "description": "Defines current inline state in ColorPicker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerProps": {
                    "description": "Defines valid properties in ColorPicker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultColor",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "ff0000",
                            "description": "Initial color to display when value is not defined."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display as an overlay or not."
                        },
                        {
                            "name": "format",
                            "optional": true,
                            "readonly": false,
                            "type": "\"hex\" | \"rgb\" | \"hsb\"",
                            "default": "hex",
                            "description": "Format to use in value binding, supported formats are 'hex', 'rgb' and 'hsb'."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focus input to match a label defined for the dropdown."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the overlay panel.",
                            "deprecated": "since v4.0. Use 'overlayClass' prop instead."
                        },
                        {
                            "name": "overlayClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ColorPickerPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ColorPickerEmitsOptions": {
                    "description": "Defines valid emits in ColorPicker component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColorPickerChangeEvent",
                                    "description": "Custom add event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a color is selected."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when input is cleared by the user."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when input is cleared by the user."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ColorPickerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ColorPickerChangeEvent": {
                    "description": "Custom change event.",
                    "props": []
                },
                "ColorPickerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ColorPickerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ColorPickerState": {
                    "description": "Defines current inline state in ColorPicker component.",
                    "props": []
                },
                "ColorPickerProps": {
                    "description": "Defines valid properties in ColorPicker component.",
                    "props": []
                },
                "ColorPickerSlots": {
                    "props": []
                },
                "ColorPickerEmitsOptions": {
                    "description": "Defines valid emits in ColorPicker component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ColorPickerPassThroughOptionType": {
                    "values": "ColorPickerPassThroughAttributes | (options: ColorPickerPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ColorPickerPassThroughTransitionType": {
                    "values": "TransitionProps | (options: ColorPickerPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "ColorPickerEmits": {
                    "values": "EmitFn<ColorPickerEmitsOptions>"
                }
            }
        }
    },
    "colorpickerstyle": {
        "description": "ColorPicker groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/colorpicker/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColorPickerStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ColorPickerStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ColorPickerClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-colorpicker\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "preview",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-colorpicker-preview\"",
                            "description": "Class name of the preview element"
                        },
                        {
                            "name": "panel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-colorpicker-panel\"",
                            "description": "Class name of the panel element"
                        },
                        {
                            "name": "colorSelector",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-colorpicker-color-selector\"",
                            "description": "Class name of the color selector element"
                        },
                        {
                            "name": "colorBackground",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-colorpicker-color-background\"",
                            "description": "Class name of the color background element"
                        },
                        {
                            "name": "colorHandle",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-colorpicker-color-handle\"",
                            "description": "Class name of the color handle element"
                        },
                        {
                            "name": "hue",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-colorpicker-hue\"",
                            "description": "Class name of the hue element"
                        },
                        {
                            "name": "hueHandle",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-colorpicker-hue-handle\"",
                            "description": "Class name of the hue handle element"
                        }
                    ]
                }
            }
        }
    },
    "column": {
        "description": "Column component defines various options to specify corresponding features.\nIt is a helper component for DataTable and TreeTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "Column is a helper component for Column and TreeTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColumnPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ColumnSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTablePassThroughOptions",
                            "default": "",
                            "description": "Defines parent instance."
                        }
                    ],
                    "methods": []
                },
                "ColumnFilterModelType": {
                    "description": "Filter model metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of filterModel."
                        },
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Match mode of filterModel."
                        }
                    ],
                    "methods": []
                },
                "ColumnFilterMatchModeOptions": {
                    "description": "Filter match modes for specific columns.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "ColumnLoadingOptions": {
                    "description": "Custom column loading metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "cellIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Cell index"
                        },
                        {
                            "name": "cellFirst",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the cell is first."
                        },
                        {
                            "name": "cellLast",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the cell is last."
                        },
                        {
                            "name": "cellEven",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the cell is even."
                        },
                        {
                            "name": "cellOdd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is odd."
                        },
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnNode",
                            "default": "",
                            "description": "Column instance"
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Column field"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "ColumnPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ColumnProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "headerCell",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header cell's DOM element."
                        },
                        {
                            "name": "columnResizer",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column resizer's DOM element."
                        },
                        {
                            "name": "columnHeaderContent",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column header content's DOM element."
                        },
                        {
                            "name": "columnTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header title's DOM element."
                        },
                        {
                            "name": "sort",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the sort's DOM element."
                        },
                        {
                            "name": "sortIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the sort icon's DOM element."
                        },
                        {
                            "name": "pcSortBadge",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Badge component."
                        },
                        {
                            "name": "pcHeaderCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Checkbox component."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column filter's DOM element."
                        },
                        {
                            "name": "filterElementContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter element container's DOM element."
                        },
                        {
                            "name": "pcColumnFilterButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column filter button's DOM element."
                        },
                        {
                            "name": "filterMenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter menu icon's DOM element."
                        },
                        {
                            "name": "pcColumnFilterClearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column filter clear button's DOM element."
                        },
                        {
                            "name": "filterClearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter clear icon's DOM element."
                        },
                        {
                            "name": "filterOverlay",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter overlay's DOM element."
                        },
                        {
                            "name": "filterConstraintList",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter constraint list's DOM element."
                        },
                        {
                            "name": "filterConstraint",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter constraint's DOM element."
                        },
                        {
                            "name": "filterConstraintSeparator",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter constraint separator's DOM element."
                        },
                        {
                            "name": "filterOperator",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter operator's DOM element."
                        },
                        {
                            "name": "pcFilterOperatorDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Select component."
                        },
                        {
                            "name": "filterRuleList",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter rule list' DOM element."
                        },
                        {
                            "name": "filterRule",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter rule's DOM element."
                        },
                        {
                            "name": "pcFilterConstraintDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Select component."
                        },
                        {
                            "name": "filterRemove",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter remove button container's DOM element."
                        },
                        {
                            "name": "pcFilterRemoveRuleButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "filterAddButtonContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter add button container's DOM element."
                        },
                        {
                            "name": "pcFilterAddRuleButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "filterButtonbar",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter buttonbar's DOM element."
                        },
                        {
                            "name": "pcFilterClearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcFilterApplyButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "rowToggleButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row toggler button's DOM element."
                        },
                        {
                            "name": "rowToggleIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row toggler icon's DOM element."
                        },
                        {
                            "name": "bodyCell",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the body cell's DOM element."
                        },
                        {
                            "name": "reorderableRowHandle",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the reorderable row handle's DOM element."
                        },
                        {
                            "name": "pcRowRadiobutton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the radiobutton's DOM element."
                        },
                        {
                            "name": "pcRowCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the checkbox's DOM element."
                        },
                        {
                            "name": "pcRowEditorInit",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row editor init button's DOM element."
                        },
                        {
                            "name": "pcRowEditorSave",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row editor save button's DOM element."
                        },
                        {
                            "name": "pcRowEditorCancel",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row editor cancel button's DOM element."
                        },
                        {
                            "name": "footerCell",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer cell's DOM element."
                        },
                        {
                            "name": "columnFooter",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer content DOM element."
                        },
                        {
                            "name": "bodyCellContent",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the body cell content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ColumnPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ColumnState": {
                    "description": "Defines current inline state in Column component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_editing",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "styleObject",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Current style of the body cell."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current filter overlay visible as a boolean."
                        },
                        {
                            "name": "defaultMatchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter match mode."
                        },
                        {
                            "name": "defaultOperator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter operator."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "rowGroupHeaderStyleObject",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Current style of the rowgroup header."
                        }
                    ],
                    "methods": []
                },
                "ColumnProps": {
                    "description": "Defines valid properties in Column component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "columnKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of a column if field property is not defined."
                        },
                        {
                            "name": "field",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property represented by the column."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name to use in sorting, defaults to field."
                        },
                        {
                            "name": "filterField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name to use in filtering, defaults to field."
                        },
                        {
                            "name": "dataType",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of data. It's value is related to PrimeVue.filterMatchModeOptions config."
                        },
                        {
                            "name": "sortable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if a column is sortable."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header content of the column."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Footer content of the column."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of header, body and footer cells."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of header, body and footer cells."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column header."
                        },
                        {
                            "name": "headerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column header."
                        },
                        {
                            "name": "bodyStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column body."
                        },
                        {
                            "name": "bodyClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column body."
                        },
                        {
                            "name": "footerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column footer."
                        },
                        {
                            "name": "footerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column footer."
                        },
                        {
                            "name": "showFilterMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display the filter overlay."
                        },
                        {
                            "name": "showFilterOperator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, match all and match any operator selector is displayed."
                        },
                        {
                            "name": "showClearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a button to clear the column filtering."
                        },
                        {
                            "name": "showApplyButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Displays a button to apply the column filtering."
                        },
                        {
                            "name": "showFilterMatchModes",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the match modes selector."
                        },
                        {
                            "name": "showAddButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, a button is displayed to add more rules."
                        },
                        {
                            "name": "filterMatchModeOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnFilterMatchModeOptions[]",
                            "default": "",
                            "description": "An array of label-value pairs to override the global match mode options."
                        },
                        {
                            "name": "maxConstraints",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "2",
                            "description": "Maximum number of constraints for a column filter."
                        },
                        {
                            "name": "excludeGlobalFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to exclude from global filtering or not."
                        },
                        {
                            "name": "filterHeaderStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column filter header in row filter display."
                        },
                        {
                            "name": "filterHeaderClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column filter header in row filter display."
                        },
                        {
                            "name": "filterMenuStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column filter overlay."
                        },
                        {
                            "name": "filterMenuClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column filter overlay."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"single\" | \"multiple\"",
                            "default": "",
                            "description": "Defines column based selection mode."
                        },
                        {
                            "name": "expander",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays an icon to toggle row expansion."
                        },
                        {
                            "name": "colspan",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of columns to span for grouping."
                        },
                        {
                            "name": "rowspan",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to span for grouping."
                        },
                        {
                            "name": "rowReorder",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether this column displays an icon to reorder the rows."
                        },
                        {
                            "name": "rowReorderIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the drag handle to reorder rows."
                        },
                        {
                            "name": "reorderableColumn",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if the column itself can be reordered with dragging."
                        },
                        {
                            "name": "rowEditor",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, column displays row editor controls."
                        },
                        {
                            "name": "frozen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the column is fixed in horizontal scrolling."
                        },
                        {
                            "name": "alignFrozen",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "left",
                            "description": "Position of a frozen column, valid values are left and right."
                        },
                        {
                            "name": "exportable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the column is included in data export."
                        },
                        {
                            "name": "exportHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Custom export header of the column to be exported as CSV."
                        },
                        {
                            "name": "exportFooter",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Custom export footer of the column to be exported as CSV."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the column is rendered."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ColumnPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ColumnContext": {
                    "description": "Defines current options in Column component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the column."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current checked state of row as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of row as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of row as a boolean."
                        },
                        {
                            "name": "sorted",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current sort state of the column as a boolean."
                        },
                        {
                            "name": "frozen",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current frozen state of the column as a boolean."
                        },
                        {
                            "name": "resizable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current resizable state of the column as a boolean."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current size state of the table."
                        },
                        {
                            "name": "showGridlines",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current gridlines state of the table as a boolean."
                        },
                        {
                            "name": "highlighted",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current highlighted state of the filter row item as a boolean."
                        },
                        {
                            "name": "hidden",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current hidden state of the filter clear button of a column as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state of the filter menu of a column as a boolean."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the filter menu of a column as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ColumnSlots": {
                    "description": "Defines valid slots in Column component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "body",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row node data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">column</span>: <span class=\"doc-option-parameter-type\">ColumnNode</span>, <span class=\"doc-option-parameter-type\">// Column node.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">frozenRow</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the row is frozen.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">editorInitCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Editor init callback function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">rowTogglerCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Row toggler callback unction</span>\n}",
                                    "description": "body slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom body template for DataTable."
                        },
                        {
                            "name": "node",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row node data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">column</span>: <span class=\"doc-option-parameter-type\">ColumnNode</span>, <span class=\"doc-option-parameter-type\">// Column node.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">frozenRow</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the row is frozen.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">editorInitCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Editor init callback function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">rowTogglerCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Row toggler callback unction</span>\n}",
                                    "description": "body slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom body template for TreeTable."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">column</span>: <span class=\"doc-option-parameter-type\">ColumnNode</span>, <span class=\"doc-option-parameter-type\">// Column node.</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">column</span>: <span class=\"doc-option-parameter-type\">ColumnNode</span>, <span class=\"doc-option-parameter-type\">// Column node.</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "editor",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">column</span>: <span class=\"doc-option-parameter-type\">ColumnNode</span>, <span class=\"doc-option-parameter-type\">// Column node.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">frozenRow</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the row is frozen.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">editorSaveCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">editorCancelCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n}",
                                    "description": "editor slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom editor template."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">filterModel</span>: <span class=\"doc-option-parameter-type\">ColumnFilterModelType</span>, <span class=\"doc-option-parameter-type\">// Filter metadata</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">filterCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">applyFilter</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function (closes the overlay)</span>\n}",
                                    "description": "filter slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter template."
                        },
                        {
                            "name": "filterheader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">filterModel</span>: <span class=\"doc-option-parameter-type\">ColumnFilterModelType</span>, <span class=\"doc-option-parameter-type\">// Filter metadata</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">filterCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n}",
                                    "description": "filter header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter header template."
                        },
                        {
                            "name": "filterfooter",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">filterModel</span>: <span class=\"doc-option-parameter-type\">ColumnFilterModelType</span>, <span class=\"doc-option-parameter-type\">// Filter metadata</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">filterCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n}",
                                    "description": "filter footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter footer template."
                        },
                        {
                            "name": "filterclear",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">filterModel</span>: <span class=\"doc-option-parameter-type\">ColumnFilterModelType</span>, <span class=\"doc-option-parameter-type\">// Filter metadata</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">filterCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n}",
                                    "description": "filter clear slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter clear template."
                        },
                        {
                            "name": "filterapply",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">filterModel</span>: <span class=\"doc-option-parameter-type\">ColumnFilterModelType</span>, <span class=\"doc-option-parameter-type\">// Filter metadata</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">filterCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n}",
                                    "description": "filter apply slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter apply template."
                        },
                        {
                            "name": "loading",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">column</span>: <span class=\"doc-option-parameter-type\">ColumnNode</span>, <span class=\"doc-option-parameter-type\">// Column node.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">frozenRow</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the row is frozen.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">loadingOptions</span>: <span class=\"doc-option-parameter-type\">ColumnLoadingOptions</span>, <span class=\"doc-option-parameter-type\">// Loading options.</span>\n }",
                                    "description": "loading slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading template."
                        },
                        {
                            "name": "rowtogglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the row toggler icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">rowExpanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current row expanded state.</span>\n }",
                                    "description": "row toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'rowtoggleicon' slot instead.\nCustom row toggler icon template."
                        },
                        {
                            "name": "rowtoggleicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the row toggler icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">rowExpanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current row expanded state.</span>\n }",
                                    "description": "row toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row toggler icon template."
                        },
                        {
                            "name": "rowcheckboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current check state.</span>\n }",
                                    "description": "header row icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row checkbox icon template."
                        },
                        {
                            "name": "roweditoriniticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row editor init icon template."
                        },
                        {
                            "name": "roweditorsaveicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row editor save icon template."
                        },
                        {
                            "name": "roweditorcancelicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row editor cancel icon template."
                        },
                        {
                            "name": "filtericon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter icon template."
                        },
                        {
                            "name": "filterclearicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter clear icon template."
                        },
                        {
                            "name": "filterremoveicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter remove icon template."
                        },
                        {
                            "name": "filteraddicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter add icon template."
                        },
                        {
                            "name": "sorticon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the sort icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">sorted</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current sort state.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">sortOrder</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Current sort order state.</span>\n }",
                                    "description": "sort icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom sort icon template."
                        },
                        {
                            "name": "headercheckboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current check state.</span>\n }",
                                    "description": "header checkbox icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header checkbox icon template."
                        },
                        {
                            "name": "rowreordericon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row reorder icon template."
                        },
                        {
                            "name": "nodetogglericon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'nodetoggleicon' slot instead.\nCustom node toggler icon template."
                        },
                        {
                            "name": "nodetoggleicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom node toggler icon template."
                        }
                    ]
                },
                "ColumnEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ColumnPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ColumnSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "ColumnFilterModelType": {
                    "description": "Filter model metadata.",
                    "props": []
                },
                "ColumnFilterMatchModeOptions": {
                    "description": "Filter match modes for specific columns.",
                    "props": []
                },
                "ColumnLoadingOptions": {
                    "description": "Custom column loading metadata.",
                    "props": []
                },
                "ColumnPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ColumnPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ColumnState": {
                    "description": "Defines current inline state in Column component.",
                    "props": []
                },
                "ColumnProps": {
                    "description": "Defines valid properties in Column component.",
                    "props": []
                },
                "ColumnContext": {
                    "description": "Defines current options in Column component.",
                    "props": []
                },
                "ColumnSlots": {
                    "description": "Defines valid slots in Column component.",
                    "props": []
                },
                "ColumnEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ColumnPassThroughOptionType": {
                    "values": "ColumnPassThroughAttributes | (options: ColumnPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ColumnEmits": {
                    "values": "EmitFn<ColumnEmitsOptions>"
                },
                "ColumnNode": {
                    "values": "{\n    \"props\": \"ColumnProps, \"\n}"
                }
            }
        }
    },
    "columnstyle": {
        "description": "Column component defines various options to specify corresponding features.\nIt is a helper component for DataTable and TreeTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColumnStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ColumnStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ColumnClasses": {
                    "members": []
                }
            }
        }
    },
    "columngroup": {
        "description": "Columns can be grouped at header and footer sections by defining a ColumnGroup component.\nIt is a helper component for DataTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "It is a helper component for DataTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColumnGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnGroupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnGroupContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ColumnGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ColumnGroupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ColumnGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ColumnGroupProps": {
                    "description": "Defines valid properties in ColumnGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"header\" | \"footer\"",
                            "default": "",
                            "description": "Type of column group"
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ColumnGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ColumnGroupContext": {
                    "description": "Defines current options in ColumnGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current type of the column group."
                        },
                        {
                            "name": "scrollable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current scrollable state of column group as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ColumnGroupSlots": {
                    "description": "Defines valid slots in ColumnGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ColumnGroupEmitsOptions": {
                    "description": "Defines valid emits in ColumnGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ColumnGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ColumnGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ColumnGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ColumnGroupProps": {
                    "description": "Defines valid properties in ColumnGroup component.",
                    "props": []
                },
                "ColumnGroupContext": {
                    "description": "Defines current options in ColumnGroup component.",
                    "props": []
                },
                "ColumnGroupSlots": {
                    "description": "Defines valid slots in ColumnGroup component.",
                    "props": []
                },
                "ColumnGroupEmitsOptions": {
                    "description": "Defines valid emits in ColumnGroup component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ColumnGroupPassThroughOptionType": {
                    "values": "ColumnGroupPassThroughAttributes | (options: ColumnGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ColumnGroupEmits": {
                    "values": "EmitFn<ColumnGroupEmitsOptions>"
                }
            }
        }
    },
    "columngroupstyle": {
        "description": "Columns can be grouped at header and footer sections by defining a ColumnGroup component.\nIt is a helper component for DataTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColumnGroupStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ColumnGroupStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ColumnGroupClasses": {
                    "members": []
                }
            }
        }
    },
    "primevue/src/config/Config": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PrimeVueConfiguration": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ripple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "\"outlined\" | \"filled\"",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4.0. Use 'inputVariant' instead."
                        },
                        {
                            "name": "inputVariant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"outlined\" | \"filled\"",
                            "default": ""
                        },
                        {
                            "name": "locale",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "filterMatchModeOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "zIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "theme",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PrimeVuePTOptions>",
                            "default": ""
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "csp",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "PrimeVuePTOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "accordion",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "accordionpanel",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "accordionheader",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "accordioncontent",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "accordiontab",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4. Use the new structure of Accordion instead."
                        },
                        {
                            "name": "autocomplete",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "avatar",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "avatargroup",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "blockui",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "breadcrumb",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "buttongroup",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "calendar",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4. Use the new structure of DatePicker instead."
                        },
                        {
                            "name": "card",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "carousel",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "cascadeselect",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "chart",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "checkbox",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "checkboxgroup",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "chip",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "chips",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4. Use the new structure of InputChips instead."
                        },
                        {
                            "name": "colorpicker",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "column",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "columngroup",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "confirmdialog",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "confirmpopup",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "contextmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "datatable",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "dataview",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "datepicker",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "deferredcontent",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "divider",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "dialog",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "dock",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "drawer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4. Use the new structure of Select instead."
                        },
                        {
                            "name": "dynamicdialog",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "editor",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "fieldset",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "fileupload",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "floatlabel",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "galleria",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "iconfield",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "iftalabel",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "imagecompare",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "inlinemessage",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "inplace",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "inputchips",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "inputgroup",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "inputgroupaddon",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "inputicon",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "inputmask",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "inputnumber",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "inputotp",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4. Use the new structure of ToggleSwitch instead."
                        },
                        {
                            "name": "inputswitch",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "inputtext",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "knob",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "listbox",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "megamenu",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "menubar",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "metergroup",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "multiselect",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "orderlist",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "organizationchart",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "overlaybadge",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "overlaypanel",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4. Use the new structure of Popover instead."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "panelmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "password",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "picklist",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "popover",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "progressbar",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "progressspinner",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "radiobutton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "radiobuttongroup",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "rating",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "row",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "scrollpanel",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "scrolltop",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "sidebar",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4. Use the new structure of Drawer instead."
                        },
                        {
                            "name": "skeleton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "slider",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "speeddial",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "selectbutton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "select",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "splitbutton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "splitter",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "splitterpanel",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "stepitem",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "steplist",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "steppanel",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "steppanels",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "stepper",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "steps",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "tabmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "tabs",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "tablist",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "tab",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "tabpanels",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "tabpanel",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "tabview",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4. Use tabs instead."
                        },
                        {
                            "name": "tag",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "terminal",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "textarea",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "tieredmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "timeline",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "toast",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "togglebutton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "toggleswitch",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "toolbar",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "tree",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "treeselect",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "treetable",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "virtualscroller",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "directives",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "default": ""
                        },
                        {
                            "name": "global",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PrimeVueConfiguration": {
                    "props": []
                },
                "PrimeVuePTOptions": {
                    "props": []
                }
            }
        }
    },
    "confirmationoptions": {
        "description": "[Live Demo](https://www.primevue.org/confirmdialog/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmationOptions": {
                    "description": "Confirmation Service options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "default": "",
                            "description": "Element to align the overlay."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header text of the dialog."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Message of the confirmation."
                        },
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"top\" | \"bottom\" | \"center\" | \"topleft\" | \"topright\" | \"bottomleft\" | \"bottomright\"",
                            "default": "center",
                            "description": "Position of the dialog."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display next to the message."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when dialog is visible."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the confirm dialog gets attached.\nSpecial keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if background should be blocked when confirm dialog is displayed."
                        },
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "reject",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onShow",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onHide",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "acceptLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the accept button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "rejectLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the reject button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "acceptIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the accept button."
                        },
                        {
                            "name": "rejectIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the reject button."
                        },
                        {
                            "name": "acceptClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the accept button."
                        },
                        {
                            "name": "rejectClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the reject button."
                        },
                        {
                            "name": "defaultFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Element to receive the focus when the dialog gets visible, valid values are \"accept\" and \"reject\"."
                        },
                        {
                            "name": "rejectProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the reject button inside the component."
                        },
                        {
                            "name": "acceptProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the accept button inside the component."
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ConfirmationOptions": {
                    "description": "Confirmation Service options.",
                    "props": []
                }
            }
        }
    },
    "confirmationservice-useconfirm": {
        "description": "[Live Demo](https://www.primevue.org/confirmdialog/)",
        "model": {
            "ConfirmationServiceMethods": {
                "description": "Confirmation Service methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "require",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": false,
                                    "type": "ConfirmationOptions",
                                    "description": "Confirmation Object"
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the dialog using the confirmation object options."
                        },
                        {
                            "name": "close",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the dialog without invoking accept or reject callbacks."
                        }
                    ]
                }
            }
        }
    },
    "confirmdialog": {
        "description": "ConfirmDialog uses a Dialog UI with confirmDialog method or <ConfirmDialog> tag.\n\n[Live Demo](https://www.primevue.org/confirmdialog)",
        "components": {
            "default": {
                "description": "ConfirmDialog uses a Dialog UI with confirmDialog method or <ConfirmDialog> tag.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmDialogPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmDialogProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmDialogState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmDialogProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmDialogState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ConfirmDialogProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header title's DOM element."
                        },
                        {
                            "name": "headerActions",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header actions' DOM element."
                        },
                        {
                            "name": "pcCloseButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close button's component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the message's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "pcRejectButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcAcceptButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogState": {
                    "description": "Defines current inline state in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "confirmation",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current confirmation message."
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogBreakpoints": {
                    "description": "Breakpoint metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogProps": {
                    "description": "Defines valid properties in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables dragging to change the position using header."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ConfirmDialogPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogSlots": {
                    "description": "Defines valid slots in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "message",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">ConfirmationOptions</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n }",
                                    "description": "message slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message template."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon template</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "accepticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "rejecticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close dialog function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">acceptCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Accept function of the component</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">rejectCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Reject function of the component</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "ConfirmDialogEmitsOptions": {
                    "description": "Defines valid emits in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ConfirmDialogPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ConfirmDialogSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "ConfirmDialogPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ConfirmDialogPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ConfirmDialogState": {
                    "description": "Defines current inline state in ConfirmDialog component.",
                    "props": []
                },
                "ConfirmDialogBreakpoints": {
                    "description": "Breakpoint metadata.",
                    "props": []
                },
                "ConfirmDialogProps": {
                    "description": "Defines valid properties in ConfirmDialog component.",
                    "props": []
                },
                "ConfirmDialogSlots": {
                    "description": "Defines valid slots in ConfirmDialog component.",
                    "props": []
                },
                "ConfirmDialogEmitsOptions": {
                    "description": "Defines valid emits in ConfirmDialog component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ConfirmDialogPassThroughOptionType": {
                    "values": "ConfirmDialogPassThroughAttributes | (options: ConfirmDialogPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ConfirmDialogEmits": {
                    "values": "EmitFn<ConfirmDialogEmitsOptions>"
                }
            }
        }
    },
    "confirmdialogstyle": {
        "description": "ConfirmDialog uses a Dialog UI with confirmDialog method or <ConfirmDialog> tag.\n\n[Live Demo](https://www.primevue.org/confirmdialog)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmDialogStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ConfirmDialogStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ConfirmDialogClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmdialog\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmdialog-icon\"",
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "message",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmdialog-message\"",
                            "description": "Class name of the message element"
                        },
                        {
                            "name": "pcRejectButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmdialog-reject-button\"",
                            "description": "Class name of the reject button element"
                        },
                        {
                            "name": "pcAcceptButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmdialog-accept-button\"",
                            "description": "Class name of the accept button element"
                        }
                    ]
                }
            }
        }
    },
    "confirmpopup": {
        "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.\n\n[Live Demo](https://www.primevue.org/confirmpopup)",
        "components": {
            "default": {
                "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmPopupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmPopupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmPopupState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmPopupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmPopupState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ConfirmPopupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the message's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "pcRejectButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcAcceptButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupState": {
                    "description": "Defines current inline state in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "confirmation",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmationOptions",
                            "default": "",
                            "description": "Current confirmation message."
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupProps": {
                    "description": "Defines valid properties in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ConfirmPopupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupSlots": {
                    "description": "Defines valid slots in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "message",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">ConfirmationOptions</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n }",
                                    "description": "message slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message template."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon template</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "accepticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "rejecticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">acceptCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Accept function of the component</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">rejectCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Reject function of the component</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "ConfirmPopupEmitsOptions": {
                    "description": "Defines valid emits in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ConfirmPopupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ConfirmPopupSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "ConfirmPopupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ConfirmPopupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ConfirmPopupState": {
                    "description": "Defines current inline state in ConfirmPopup component.",
                    "props": []
                },
                "ConfirmPopupProps": {
                    "description": "Defines valid properties in ConfirmPopup component.",
                    "props": []
                },
                "ConfirmPopupSlots": {
                    "description": "Defines valid slots in ConfirmPopup component.",
                    "props": []
                },
                "ConfirmPopupEmitsOptions": {
                    "description": "Defines valid emits in ConfirmPopup component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ConfirmPopupPassThroughOptionType": {
                    "values": "ConfirmPopupPassThroughAttributes | (options: ConfirmPopupPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ConfirmPopupPassThroughTransitionType": {
                    "values": "TransitionProps | (options: ConfirmPopupPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "ConfirmPopupEmits": {
                    "values": "EmitFn<ConfirmPopupEmitsOptions>"
                }
            }
        }
    },
    "confirmpopupstyle": {
        "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.\n\n[Live Demo](https://www.primevue.org/confirmpopup)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmPopupStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ConfirmPopupStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ConfirmPopupClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmpopup\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmpopup-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmpopup-icon\"",
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "message",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmpopup-message\"",
                            "description": "Class name of the message element"
                        },
                        {
                            "name": "footer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmpopup-footer\"",
                            "description": "Class name of the footer element"
                        },
                        {
                            "name": "pcRejectButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmpopup-reject-button\"",
                            "description": "Class name of the reject button element"
                        },
                        {
                            "name": "pcAcceptButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-confirmpopup-accept-button\"",
                            "description": "Class name of the accept button element"
                        }
                    ]
                }
            }
        }
    },
    "contextmenu": {
        "description": "ContextMenu displays an overlay menu on right click of its target. Note that components like DataTable has special integration with ContextMenu.\nRefer to documentation of the individual documentation of the with context menu support.\n\n[Live Demo](https://www.primevue.org/contextmenu/)",
        "components": {
            "default": {
                "description": "ContextMenu displays an overlay menu on right click of its target. Note that components like DataTable has special integration with ContextMenu.\nRefer to documentation of the individual documentation of the with context menu support.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ContextMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ContextMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ContextMenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "rootList",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "itemContent",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item content's DOM element."
                        },
                        {
                            "name": "itemLink",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item link's DOM element."
                        },
                        {
                            "name": "itemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item icon's DOM element."
                        },
                        {
                            "name": "itemLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "submenu",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ContextMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ContextMenuFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item index"
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item level"
                        },
                        {
                            "name": "parentKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Parent key info"
                        }
                    ],
                    "methods": []
                },
                "ContextMenuState": {
                    "description": "Defines current inline state in ContextMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedItemInfo",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuFocusedItemInfo",
                            "default": "",
                            "description": "Current focused item info."
                        },
                        {
                            "name": "activeItemPath",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuFocusedItemInfo[]",
                            "default": "",
                            "description": "Active item path."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "submenuVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current submenu visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ContextMenuContext": {
                    "description": "Defines current options in ContextMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem"
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ContextMenuRouterBindProps": {
                    "description": "Defines valid router binding props in ContextMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        },
                        {
                            "name": "submenuicon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Submenuicon elemnt binding"
                        }
                    ],
                    "methods": []
                },
                "ContextMenuProps": {
                    "description": "Defines valid properties in ContextMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary."
                        },
                        {
                            "name": "global",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Attaches the menu to document instead of a particular item."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ContextMenuPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ContextMenuSlots": {
                    "description": "Defines valid slots in ContextMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">ContextMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        },
                        {
                            "name": "submenuicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is active</span>\n }",
                                    "description": "submenuicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom submenu icon template."
                        }
                    ]
                },
                "ContextMenuEmitsOptions": {
                    "description": "Defines valid emits in ContextMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is hidden."
                        }
                    ]
                },
                "ContextMenuMethods": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the menu."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the menu."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the menu."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ContextMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ContextMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ContextMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ContextMenuFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "props": []
                },
                "ContextMenuState": {
                    "description": "Defines current inline state in ContextMenu component.",
                    "props": []
                },
                "ContextMenuContext": {
                    "description": "Defines current options in ContextMenu component.",
                    "props": []
                },
                "ContextMenuRouterBindProps": {
                    "description": "Defines valid router binding props in ContextMenu component.",
                    "props": []
                },
                "ContextMenuProps": {
                    "description": "Defines valid properties in ContextMenu component.",
                    "props": []
                },
                "ContextMenuSlots": {
                    "description": "Defines valid slots in ContextMenu component.",
                    "props": []
                },
                "ContextMenuEmitsOptions": {
                    "description": "Defines valid emits in ContextMenu component.",
                    "props": []
                },
                "ContextMenuMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ContextMenuPassThroughOptionType": {
                    "values": "ContextMenuPassThroughAttributes | (options: ContextMenuPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ContextMenuPassThroughTransitionType": {
                    "values": "TransitionProps | (options: ContextMenuPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "ContextMenuEmits": {
                    "values": "EmitFn<ContextMenuEmitsOptions>"
                }
            }
        }
    },
    "contextmenustyle": {
        "description": "ContextMenu displays an overlay menu on right click of its target. Note that components like DataTable has special integration with ContextMenu.\nRefer to documentation of the individual documentation of the with context menu support.\n\n[Live Demo](https://www.primevue.org/contextmenu/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ContextMenuStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ContextMenuStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ContextMenuClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-contextmenu\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "rootList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-contextmenu-root-list\"",
                            "description": "Class name of the root list element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-contextmenu-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "itemContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-contextmenu-item-content\"",
                            "description": "Class name of the item content element"
                        },
                        {
                            "name": "itemLink",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-contextmenu-item-link\"",
                            "description": "Class name of the item link element"
                        },
                        {
                            "name": "itemIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-contextmenu-item-icon\"",
                            "description": "Class name of the item icon element"
                        },
                        {
                            "name": "itemLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-contextmenu-item-label\"",
                            "description": "Class name of the item label element"
                        },
                        {
                            "name": "submenuIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-contextmenu-submenu-icon\"",
                            "description": "Class name of the submenu icon element"
                        },
                        {
                            "name": "submenu",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-contextmenu-submenu\"",
                            "description": "Class name of the submenu element"
                        },
                        {
                            "name": "separator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-contextmenu-separator\"",
                            "description": "Class name of the separator element"
                        }
                    ]
                }
            }
        }
    },
    "datatable": {
        "description": "DataTable displays data in tabular format.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "DataTable displays data in tabular format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataTablePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<any>",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DataTableSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps<any>",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "DataTableExportFunctionOptions": {
                    "description": "Custom datatable export metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Row data"
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Column Field"
                        }
                    ],
                    "methods": []
                },
                "DataTableFilterMetaData": {
                    "description": "Custom datatable filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filter value"
                        },
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"startsWith\" | \"contains\" | \"notContains\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Filter match mode"
                        }
                    ],
                    "methods": []
                },
                "DataTableOperatorFilterMetaData": {
                    "description": "Custom datatable operator filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "operator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter operator"
                        },
                        {
                            "name": "constraints",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMetaData[]",
                            "default": "",
                            "description": "Array of filter meta datas."
                        }
                    ],
                    "methods": []
                },
                "DataTableFilterMeta": {
                    "description": "Custom datatable filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string | DataTableFilterMetaData | DataTableOperatorFilterMetaData"
                        }
                    ],
                    "methods": []
                },
                "DataTableSortMeta": {
                    "description": "Custom datatable sort meta.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Column field"
                        },
                        {
                            "name": "order",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Column sort order"
                        }
                    ],
                    "methods": []
                },
                "DataTableExpandedRows": {
                    "description": "Custom datatable expanded rows.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "methods": []
                },
                "DataTableEditingRows": {
                    "description": "Custom datatable editing rows.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "methods": []
                },
                "DataTableExportCSVOptions": {
                    "description": "Custom datatable export csv metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selectionOnly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to export only selection data."
                        }
                    ],
                    "methods": []
                },
                "DataTableFilterButtonInlinePropsOptions": {
                    "description": "Custom datatable filter inline button props options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "clear",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Apply button props"
                        }
                    ],
                    "methods": []
                },
                "DataTableFilterButtonPopoverPropsOptions": {
                    "description": "Custom datatable filter popover button props options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "addRule",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Add rule button props"
                        },
                        {
                            "name": "removeRule",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Remove rule button props"
                        },
                        {
                            "name": "apply",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Apply button props"
                        },
                        {
                            "name": "clear",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Apply button props"
                        }
                    ],
                    "methods": []
                },
                "DataTableFilterButtonPropsOptions": {
                    "description": "Custom datatable filter buttons' props options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filter",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filter button props"
                        },
                        {
                            "name": "inline",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableFilterButtonInlinePropsOptions",
                            "default": "",
                            "description": "Inline filter buttons' options"
                        },
                        {
                            "name": "popover",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableFilterButtonPopoverPropsOptions",
                            "default": "",
                            "description": "Popover filter buttons' options"
                        }
                    ],
                    "methods": []
                },
                "DataTableEditButtonPropsOptions": {
                    "description": "Custom datatable edit buttons' props options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "init",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Init button props"
                        },
                        {
                            "name": "save",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Save button props"
                        },
                        {
                            "name": "cancel",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Cancel button props"
                        }
                    ],
                    "methods": []
                },
                "DataTableSortEvent": {
                    "description": "Custom sort event.",
                    "relatedProp": "DataTableEmitsOptions.sort",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"startsWith\" | \"contains\" | \"notContains\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTablePageEvent,DataTableFilterEvent"
                },
                "DataTablePageEvent": {
                    "description": "Custom pagination event.",
                    "relatedProp": "DataTableEmitsOptions.page",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"startsWith\" | \"contains\" | \"notContains\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total page count"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableSortEvent"
                },
                "DataTableFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "DataTableEmitsOptions.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"startsWith\" | \"contains\" | \"notContains\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "filteredValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filtered collection (non-lazy only)"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableSortEvent"
                },
                "DataTableRowClickEvent": {
                    "description": "Custom row click event.",
                    "relatedProp": "DataTableEmitsOptions['row-click']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Selected row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowDoubleClickEvent,DataTableRowContextMenuEvent"
                },
                "DataTableRowDoubleClickEvent": {
                    "description": "Custom row double click event.",
                    "relatedProp": "DataTableEmitsOptions['row-dblclick']]",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowClickEvent"
                },
                "DataTableRowContextMenuEvent": {
                    "description": "Custom row context menu event.",
                    "relatedProp": "DataTableEmitsOptions['row-contextmenu']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowClickEvent"
                },
                "DataTableRowSelectEvent": {
                    "description": "Custom row select event.",
                    "relatedProp": "DataTableEmitsOptions['row-select']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Selected row data"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index"
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the selection, valid values are 'row', 'radio' or 'checkbox'."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowUnselectEvent"
                },
                "DataTableRowUnselectEvent": {
                    "description": "Custom row unselect event.",
                    "relatedProp": "DataTableEmitsOptions['row-unselect']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index"
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the selection, valid values are 'row', 'radio' or 'checkbox'."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowSelectEvent"
                },
                "DataTableRowSelectAllEvent": {
                    "description": "Custom row select all event.",
                    "relatedProp": "DataTableEmitsOptions['row-select-all']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Selected dataset"
                        }
                    ],
                    "methods": []
                },
                "DataTableRowUnselectAllEvent": {
                    "description": "Custom row unselect all event.",
                    "relatedProp": "DataTableEmitsOptions['row-unselect-all']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": []
                },
                "DataTableSelectAllChangeEvent": {
                    "description": "Custom row select all change event.",
                    "relatedProp": "DataTableEmitsOptions['select-all-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether all data is selected."
                        }
                    ],
                    "methods": []
                },
                "DataTableColumnResizeEndEvent": {
                    "description": "Custom column resize end event.",
                    "relatedProp": "DataTableEmitsOptions['column-resize-end']",
                    "props": [
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLElement",
                            "default": "",
                            "description": "DOM element of the resized column."
                        },
                        {
                            "name": "delta",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Change in column width"
                        }
                    ],
                    "methods": []
                },
                "DataTableColumnReorderEvent": {
                    "description": "Custom row column reorder event.",
                    "relatedProp": "DataTableEmitsOptions['column-reorder']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "dragIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dragged column"
                        },
                        {
                            "name": "dropIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dropped column"
                        }
                    ],
                    "methods": []
                },
                "DataTableRowReorderEvent": {
                    "description": "Custom row reorder event.",
                    "relatedProp": "DataTableEmitsOptions['row-reorder']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "dragIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dragged row"
                        },
                        {
                            "name": "dropIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dropped row"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Reordered value"
                        }
                    ],
                    "methods": []
                },
                "DataTableRowExpandEvent": {
                    "description": "Custom row expand event.",
                    "relatedProp": "DataTableEmitsOptions['row-expand']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Expanded row data"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowCollapseEvent"
                },
                "DataTableRowCollapseEvent": {
                    "description": "Custom row collapse event.",
                    "relatedProp": "DataTableEmitsOptions['row-expand']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Expanded row data"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowExpandEvent"
                },
                "DataTableCellEditInitEvent": {
                    "description": "Custom cell edit init event.",
                    "relatedProp": "DataTableEmitsOptions['cell-edit-init']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableCellEditCancelEvent"
                },
                "DataTableCellEditCancelEvent": {
                    "description": "Custom cell edit cancel event.",
                    "relatedProp": "DataTableEmitsOptions['cell-edit-cancel']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableCellEditInitEvent"
                },
                "DataTableCellEditCompleteEvent": {
                    "description": "Custom cell edit complete event.",
                    "relatedProp": "DataTableEmitsOptions['cell-edit-complete']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Field value of row data to edit."
                        },
                        {
                            "name": "newValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Field value of new row data after editing."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of completion such as 'enter', 'outside' or 'tab'."
                        }
                    ],
                    "methods": []
                },
                "DataTableRowEditInitEvent": {
                    "description": "Custom row edit init event.",
                    "relatedProp": "DataTableEmitsOptions['row-edit-init']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowEditSaveEvent,DataTableRowEditCancelEvent"
                },
                "DataTableRowEditSaveEvent": {
                    "description": "Custom row edit save event.",
                    "relatedProp": "DataTableEmitsOptions['row-edit-save']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowEditInitEvent<T>"
                },
                "DataTableRowEditCancelEvent": {
                    "description": "Custom row edit cancel event.",
                    "relatedProp": "DataTableEmitsOptions['row-edit-cancel']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowEditInitEvent<T>"
                },
                "DataTableStateEvent": {
                    "description": "Custom state event.",
                    "relatedProp": "DataTableEmitsOptions['state-save']",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "columnWidths",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Comma separated list of column widths"
                        },
                        {
                            "name": "columnOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Order of the columns"
                        },
                        {
                            "name": "expandedRows",
                            "optional": false,
                            "readonly": false,
                            "type": "any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "Instances of rows in expanded state"
                        },
                        {
                            "name": "expandedRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Keys of rows in expanded state"
                        },
                        {
                            "name": "expandedRowGroups",
                            "optional": false,
                            "readonly": false,
                            "type": "any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "Instances of rows in expanded state"
                        },
                        {
                            "name": "selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected rows"
                        },
                        {
                            "name": "selectionKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Keys of selected rows"
                        }
                    ],
                    "methods": []
                },
                "DataTablePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DataTableProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "pcPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Paginator component."
                        },
                        {
                            "name": "tableContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table container's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "table",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "virtualScrollerSpacer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the virtual scroller spacer's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "thead",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thead's DOM element."
                        },
                        {
                            "name": "headerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header row's DOM element."
                        },
                        {
                            "name": "tbody",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the tbody's DOM element."
                        },
                        {
                            "name": "rowGroupHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rowg roup header's DOM element."
                        },
                        {
                            "name": "rowGroupHeaderCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row group header cell's DOM element."
                        },
                        {
                            "name": "bodyRow",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the body row's DOM element."
                        },
                        {
                            "name": "rowExpansion",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row expansion's DOM element."
                        },
                        {
                            "name": "rowExpansionCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row expansion cell's DOM element."
                        },
                        {
                            "name": "rowGroupFooter",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row group footer's DOM element."
                        },
                        {
                            "name": "rowGroupFooterCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row group footer cell's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "emptyMessageCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message cell's DOM element."
                        },
                        {
                            "name": "tfoot",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the tfoot's DOM element."
                        },
                        {
                            "name": "footerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer row's DOM element."
                        },
                        {
                            "name": "columnResizeIndicator",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column resize indicator's DOM element."
                        },
                        {
                            "name": "rowReorderIndicatorUp",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row reorder indicator up's DOM element."
                        },
                        {
                            "name": "rowReorderIndicatorDown",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row reorder indicator down's DOM element."
                        },
                        {
                            "name": "columnGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the ColumnGroup helper components."
                        },
                        {
                            "name": "row",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Row helper components."
                        },
                        {
                            "name": "column",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Column helper components."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "DataTablePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DataTableState": {
                    "description": "Defines current inline state in DataTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of first record as a number."
                        },
                        {
                            "name": "d_rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current number of rows to display in new page as a number."
                        },
                        {
                            "name": "d_sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Current sort field."
                        },
                        {
                            "name": "d_sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current order to sort the data by default."
                        },
                        {
                            "name": "d_multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableSortMeta[]",
                            "default": "",
                            "description": "Current sortmeta objects to sort the data."
                        },
                        {
                            "name": "d_groupRowsSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableSortMeta",
                            "default": "",
                            "description": "Current group sortmeta objects to sort the data."
                        },
                        {
                            "name": "d_selectionKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current keys of selected rows."
                        },
                        {
                            "name": "d_expandedRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current keys of rows in expanded state."
                        },
                        {
                            "name": "d_columnOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Current order of the columns."
                        },
                        {
                            "name": "d_editingRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current keys of editing rows."
                        },
                        {
                            "name": "d_editingMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Current editing meta data."
                        },
                        {
                            "name": "d_filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Current filters object."
                        },
                        {
                            "name": "d_editing",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current editing as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DataTableContext": {
                    "description": "Defines current options in DataTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the row."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selectable state of row as a boolean."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selected state of row as a boolean."
                        },
                        {
                            "name": "stripedRows",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current stripedRows state of row as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DataTableProps": {
                    "description": "Defines valid properties in DataTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first row to be displayed."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"top\" | \"bottom\" | \"both\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are 'top','bottom' or 'both'."
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. It can be customized using the template property using the predefined keys.\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state. Available placeholders are the following;\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The icon to show while indicating data load is in progress."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or a getter function of a row data used for sorting by default"
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "nullSortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Determines how null values are sorted."
                        },
                        {
                            "name": "defaultSortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Default sort order of an unsorted column."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableSortMeta[]",
                            "default": "",
                            "description": "An array of SortMeta objects to sort the data."
                        },
                        {
                            "name": "sortMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"single\" | \"multiple\"",
                            "default": "single",
                            "description": "Defines whether sorting works on single column or on multiple columns."
                        },
                        {
                            "name": "removableSort",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can have an un-sorted state."
                        },
                        {
                            "name": "filters",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Filters object with key-value pairs to define the filters."
                        },
                        {
                            "name": "filterDisplay",
                            "optional": true,
                            "readonly": false,
                            "type": "\"menu\" | \"row\"",
                            "default": "",
                            "description": "Layout of the filter elements."
                        },
                        {
                            "name": "globalFilterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "(string | Function)[]",
                            "default": "",
                            "description": "An array of fields as string or function to use in global filtering."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "T | T[]",
                            "default": "",
                            "description": "Selected row in single mode or an array of values in multiple mode."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"single\" | \"multiple\"",
                            "default": "",
                            "description": "Specifies the selection mode."
                        },
                        {
                            "name": "compareSelectionBy",
                            "optional": true,
                            "readonly": false,
                            "type": "\"equals\" | \"deepEquals\"",
                            "default": "deepEquals",
                            "description": "Algorithm to define if a row is selected."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines whether metaKey is requred or not for the selection. When true metaKey needs to be pressed to select or unselect an item and\nwhen set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "contextMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Enables context menu integration."
                        },
                        {
                            "name": "contextMenuSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row instance with the ContextMenu."
                        },
                        {
                            "name": "selectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<boolean>",
                            "default": "",
                            "description": "Whether all data is selected."
                        },
                        {
                            "name": "rowHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, background of the rows change on hover."
                        },
                        {
                            "name": "csvSeparator",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ",",
                            "description": "Character to use as the csv separator."
                        },
                        {
                            "name": "exportFilename",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "download",
                            "description": "Name of the exported file."
                        },
                        {
                            "name": "exportFunction",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "resizableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be resized using drag and drop."
                        },
                        {
                            "name": "columnResizeMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"fit\" | \"expand\"",
                            "default": "fit",
                            "description": "Defines whether the overall table width."
                        },
                        {
                            "name": "reorderableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be reordered using drag and drop."
                        },
                        {
                            "name": "expandedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "A collection of row data display as expanded."
                        },
                        {
                            "name": "expandedRowIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the row toggler to display the row as expanded."
                        },
                        {
                            "name": "collapsedRowIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the row toggler to display the row as collapsed."
                        },
                        {
                            "name": "rowGroupMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"subheader\" | \"rowspan\"",
                            "default": "",
                            "description": "Defines the row group mode."
                        },
                        {
                            "name": "groupRowsBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string | string[] | Function",
                            "default": "",
                            "description": "One or more field names to use in row grouping."
                        },
                        {
                            "name": "expandableRowGroups",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the row groups can be expandable."
                        },
                        {
                            "name": "expandedRowGroups",
                            "optional": true,
                            "readonly": false,
                            "type": "any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "An array of group field values whose groups would be rendered as expanded."
                        },
                        {
                            "name": "stateStorage",
                            "optional": true,
                            "readonly": false,
                            "type": "\"session\" | \"local\"",
                            "default": "session",
                            "description": "Defines where a stateful table keeps its state."
                        },
                        {
                            "name": "stateKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of a stateful table to use in state storage."
                        },
                        {
                            "name": "editMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"row\" | \"cell\"",
                            "default": "",
                            "description": "Defines the incell editing mode."
                        },
                        {
                            "name": "editingRows",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableEditingRows | T[]",
                            "default": "",
                            "description": "A collection of rows to represent the current editing data in row edit mode."
                        },
                        {
                            "name": "rowClass",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "rowStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, enables horizontal and/or vertical scrolling."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"flex\">",
                            "default": "",
                            "description": "Height of the scroll viewport in fixed pixels or the 'flex' keyword for a dynamic size."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it.\nNote: Currently only vertical orientation mode is supported."
                        },
                        {
                            "name": "frozenValue",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[]",
                            "default": "",
                            "description": "Items of the frozen part in scrollable DataTable."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary when using stack responsive layout."
                        },
                        {
                            "name": "showHeaders",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display table headers"
                        },
                        {
                            "name": "showGridlines",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show grid lines between cells."
                        },
                        {
                            "name": "stripedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "highlightOnSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Highlights automatically the first item."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the table."
                        },
                        {
                            "name": "tableStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Inline style of the table element."
                        },
                        {
                            "name": "tableClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the table element."
                        },
                        {
                            "name": "tableProps",
                            "optional": true,
                            "readonly": false,
                            "type": "TableHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the TableHTMLAttributes to table element inside the component."
                        },
                        {
                            "name": "filterInputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable filter input element inside the component."
                        },
                        {
                            "name": "filterButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "Partial<DataTableFilterButtonPropsOptions>",
                            "default": "",
                            "description": "Used to pass all filter button property object"
                        },
                        {
                            "name": "editButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableEditButtonPropsOptions",
                            "default": "",
                            "description": "Used to pass all edit button property object"
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DataTablePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DataTableSlots": {
                    "description": "Defines valid slots in DataTable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "groupheader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">T</span>, <span class=\"doc-option-parameter-type\">// Row data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index</span>\n }",
                                    "description": "group header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom group header template."
                        },
                        {
                            "name": "groupfooter",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">T</span>, <span class=\"doc-option-parameter-type\">// Row data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index</span>\n }",
                                    "description": "group footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom group footer template."
                        },
                        {
                            "name": "loading",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading template."
                        },
                        {
                            "name": "expansion",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">T</span>, <span class=\"doc-option-parameter-type\">// Row data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index</span>\n }",
                                    "description": "expansion slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom expansion template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "reorderindicatorupicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row reorder indicator up icon template.",
                            "deprecated": "since v4.0. Use 'rowreorderindicatorupicon' slot."
                        },
                        {
                            "name": "rowreorderindicatorupicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row reorder indicator up icon template."
                        },
                        {
                            "name": "reorderindicatordownicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom reorder indicator down icon template.",
                            "deprecated": "since v4.0. Use 'rowreorderindicatordownicon' slot."
                        },
                        {
                            "name": "rowreorderindicatordownicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom reorder indicator down icon template."
                        },
                        {
                            "name": "rowgrouptogglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current rowgroup's expanded state.</span>\n }",
                                    "description": "rowgroup toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom rowgroup toggler icon template."
                        },
                        {
                            "name": "paginatorcontainer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">first</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of first record</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">last</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of last record</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">rows</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Number of rows to display in new page</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">page</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// New page number</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">pageCount</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total number of pages</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">totalRecords</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total records</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">firstPageCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// First page function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">lastPageCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Last page function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">prevPageCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Previous page function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">nextPageCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Next page function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">rowChangeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">value</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Row change function.</span>\n}",
                                    "description": "paginatorcontainer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator container template."
                        },
                        {
                            "name": "paginatorstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator start template."
                        },
                        {
                            "name": "paginatorend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator end template."
                        },
                        {
                            "name": "paginatorfirstpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator first page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator first page link icon template."
                        },
                        {
                            "name": "paginatorprevpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator prev page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator previous page link icon template."
                        },
                        {
                            "name": "paginatornextpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator next page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator next page link icon template."
                        },
                        {
                            "name": "paginatorlastpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator last page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator last page link icon template."
                        },
                        {
                            "name": "paginatorrowsperpagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator rows per page dropdown icon.</span>\n }",
                                    "description": "paginatorrowsperpagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginatorrowsperpagedropdownicon template."
                        },
                        {
                            "name": "paginatorjumptopagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator jump to page dropdown icon.</span>\n }",
                                    "description": "paginatorjumptopagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginatorjumptopagedropdownicon template."
                        }
                    ]
                },
                "DataTableEmitsOptions": {
                    "description": "Defines valid emits in Datatable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        },
                        {
                            "name": "update:sortField",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortField changes."
                        },
                        {
                            "name": "update:sortOrder",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortOrder changes."
                        },
                        {
                            "name": "update:multiSortMeta",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | null | DataTableSortMeta[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the multiSortMeta changes."
                        },
                        {
                            "name": "update:selection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | T | T[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection changes."
                        },
                        {
                            "name": "update:contextMenuSelection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the contextMenuSelection changes."
                        },
                        {
                            "name": "update:expandedRows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "DataTableExpandedRows | T[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expandedRows changes."
                        },
                        {
                            "name": "update:expandedRowGroups",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "DataTableExpandedRows | T[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expandedRowGroups changes."
                        },
                        {
                            "name": "update:filters",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "DataTableFilterMeta",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the filters changes."
                        },
                        {
                            "name": "update:editingRows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "DataTableEditingRows | T[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the editingRows changes."
                        },
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTablePageEvent",
                                    "description": "Custom page event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on pagination. Sort and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "sort",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableSortEvent",
                                    "description": "Custom sort event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on sort. Page and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Event to emit after filtering, not triggered in lazy mode."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "T[]",
                                    "description": "Value displayed by the table."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke after filtering, sorting, pagination and cell editing to pass the rendered value."
                        },
                        {
                            "name": "row-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowClickEvent<any>",
                                    "description": "Custom row click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is clicked."
                        },
                        {
                            "name": "row-dblclick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowDoubleClickEvent",
                                    "description": "Custom row double click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is double clicked."
                        },
                        {
                            "name": "row-contextmenu",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowContextMenuEvent",
                                    "description": "Custom row context menu event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is selected with a ContextMenu."
                        },
                        {
                            "name": "row-select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowSelectEvent<any>",
                                    "description": "Custom row select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is selected."
                        },
                        {
                            "name": "row-select-all",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowSelectAllEvent<any>",
                                    "description": "Custom row select all event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when header checkbox is checked."
                        },
                        {
                            "name": "row-unselect-all",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowUnselectAllEvent",
                                    "description": "Custom row unselect all event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when header checkbox is unchecked."
                        },
                        {
                            "name": "row-unselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowUnselectEvent",
                                    "description": "Custom row unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is unselected."
                        },
                        {
                            "name": "select-all-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableSelectAllChangeEvent",
                                    "description": "Custom select all change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all data is selected."
                        },
                        {
                            "name": "column-resize-end",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableColumnResizeEndEvent"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is resized."
                        },
                        {
                            "name": "column-reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableColumnReorderEvent",
                                    "description": "Custom column reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is reordered."
                        },
                        {
                            "name": "row-reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowReorderEvent",
                                    "description": "Custom row reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is reordered."
                        },
                        {
                            "name": "row-expand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowExpandEvent<any>",
                                    "description": "Custom row expand event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is expanded."
                        },
                        {
                            "name": "row-collapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowCollapseEvent",
                                    "description": "Custom row collapse event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is collapsed."
                        },
                        {
                            "name": "rowgroup-expand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowExpandEvent<any>",
                                    "description": "Custom row expand event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row group is expanded."
                        },
                        {
                            "name": "rowgroup-collapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowCollapseEvent",
                                    "description": "Custom row collapse event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row group is collapsed."
                        },
                        {
                            "name": "cell-edit-init",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellEditInitEvent<any>",
                                    "description": "Custom cell edit init."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when cell edit is initiated."
                        },
                        {
                            "name": "cell-edit-complete",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellEditCompleteEvent<any>",
                                    "description": "Custom cell edit complete event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when cell edit is completed."
                        },
                        {
                            "name": "cell-edit-cancel",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellEditCancelEvent",
                                    "description": "Custom cell edit cancel event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when cell edit is cancelled with escape key."
                        },
                        {
                            "name": "row-edit-init",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditInitEvent<any>",
                                    "description": "Custom row edit init event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when row edit is initiated."
                        },
                        {
                            "name": "row-edit-save",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditSaveEvent<any>",
                                    "description": "Custom row edit save event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when row edit is saved."
                        },
                        {
                            "name": "row-edit-cancel",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditCancelEvent<any>",
                                    "description": "Custom row edit cancel event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when row edit is cancelled."
                        },
                        {
                            "name": "state-restore",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableStateEvent",
                                    "description": "Custom state event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Invoked when a stateful table saves the state."
                        },
                        {
                            "name": "state-save",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableStateEvent",
                                    "description": "Custom state event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Invoked when a stateful table restores the state."
                        }
                    ]
                },
                "DataTableMethods": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "exportCSV",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": "DataTableExportCSVOptions",
                                    "description": "Export options."
                                },
                                {
                                    "name": "data",
                                    "optional": true,
                                    "type": "any[]",
                                    "description": "Custom exportable data. This param can be used on lazy dataTable."
                                }
                            ],
                            "returnType": "void",
                            "description": "Exports the data to CSV format."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DataTablePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "DataTableSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "DataTableExportFunctionOptions": {
                    "description": "Custom datatable export metadata.",
                    "props": []
                },
                "DataTableFilterMetaData": {
                    "description": "Custom datatable filter metadata.",
                    "props": []
                },
                "DataTableOperatorFilterMetaData": {
                    "description": "Custom datatable operator filter metadata.",
                    "props": []
                },
                "DataTableFilterMeta": {
                    "description": "Custom datatable filter metadata.",
                    "props": []
                },
                "DataTableSortMeta": {
                    "description": "Custom datatable sort meta.",
                    "props": []
                },
                "DataTableExpandedRows": {
                    "description": "Custom datatable expanded rows.",
                    "props": []
                },
                "DataTableEditingRows": {
                    "description": "Custom datatable editing rows.",
                    "props": []
                },
                "DataTableExportCSVOptions": {
                    "description": "Custom datatable export csv metadata.",
                    "props": []
                },
                "DataTableFilterButtonInlinePropsOptions": {
                    "description": "Custom datatable filter inline button props options.",
                    "props": []
                },
                "DataTableFilterButtonPopoverPropsOptions": {
                    "description": "Custom datatable filter popover button props options.",
                    "props": []
                },
                "DataTableFilterButtonPropsOptions": {
                    "description": "Custom datatable filter buttons' props options.",
                    "props": []
                },
                "DataTableEditButtonPropsOptions": {
                    "description": "Custom datatable edit buttons' props options.",
                    "props": []
                },
                "DataTableSortEvent": {
                    "description": "Custom sort event.",
                    "props": []
                },
                "DataTablePageEvent": {
                    "description": "Custom pagination event.",
                    "props": []
                },
                "DataTableFilterEvent": {
                    "description": "Custom filter event.",
                    "props": []
                },
                "DataTableRowClickEvent": {
                    "description": "Custom row click event.",
                    "props": []
                },
                "DataTableRowDoubleClickEvent": {
                    "description": "Custom row double click event.",
                    "props": []
                },
                "DataTableRowContextMenuEvent": {
                    "description": "Custom row context menu event.",
                    "props": []
                },
                "DataTableRowSelectEvent": {
                    "description": "Custom row select event.",
                    "props": []
                },
                "DataTableRowUnselectEvent": {
                    "description": "Custom row unselect event.",
                    "props": []
                },
                "DataTableRowSelectAllEvent": {
                    "description": "Custom row select all event.",
                    "props": []
                },
                "DataTableRowUnselectAllEvent": {
                    "description": "Custom row unselect all event.",
                    "props": []
                },
                "DataTableSelectAllChangeEvent": {
                    "description": "Custom row select all change event.",
                    "props": []
                },
                "DataTableColumnResizeEndEvent": {
                    "description": "Custom column resize end event.",
                    "props": []
                },
                "DataTableColumnReorderEvent": {
                    "description": "Custom row column reorder event.",
                    "props": []
                },
                "DataTableRowReorderEvent": {
                    "description": "Custom row reorder event.",
                    "props": []
                },
                "DataTableRowExpandEvent": {
                    "description": "Custom row expand event.",
                    "props": []
                },
                "DataTableRowCollapseEvent": {
                    "description": "Custom row collapse event.",
                    "props": []
                },
                "DataTableCellEditInitEvent": {
                    "description": "Custom cell edit init event.",
                    "props": []
                },
                "DataTableCellEditCancelEvent": {
                    "description": "Custom cell edit cancel event.",
                    "props": []
                },
                "DataTableCellEditCompleteEvent": {
                    "description": "Custom cell edit complete event.",
                    "props": []
                },
                "DataTableRowEditInitEvent": {
                    "description": "Custom row edit init event.",
                    "props": []
                },
                "DataTableRowEditSaveEvent": {
                    "description": "Custom row edit save event.",
                    "props": []
                },
                "DataTableRowEditCancelEvent": {
                    "description": "Custom row edit cancel event.",
                    "props": []
                },
                "DataTableStateEvent": {
                    "description": "Custom state event.",
                    "props": []
                },
                "DataTablePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "DataTablePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "DataTableState": {
                    "description": "Defines current inline state in DataTable component.",
                    "props": []
                },
                "DataTableContext": {
                    "description": "Defines current options in DataTable component.",
                    "props": []
                },
                "DataTableProps": {
                    "description": "Defines valid properties in DataTable component.",
                    "props": []
                },
                "DataTableSlots": {
                    "description": "Defines valid slots in DataTable component.",
                    "props": []
                },
                "DataTableEmitsOptions": {
                    "description": "Defines valid emits in Datatable component.",
                    "props": []
                },
                "DataTableMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DataTablePassThroughOptionType": {
                    "values": "DataTablePassThroughAttributes | (options: DataTablePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "DataTablePassThroughTransitionType": {
                    "values": "TransitionProps | (options: DataTablePassThroughMethodOptions) => TransitionProps | undefined"
                },
                "DataTableEmits": {
                    "values": "EmitFn<DataTableEmitsOptions>"
                }
            }
        }
    },
    "datatablestyle": {
        "description": "DataTable displays data in tabular format.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataTableStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DataTableStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "DataTableClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "mask",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-mask\"",
                            "description": "Class name of the mask element"
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-loading-icon\"",
                            "description": "Class name of the loading icon element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "pcPaginator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-paginator-[position]\"",
                            "description": "Class name of the paginator element"
                        },
                        {
                            "name": "tableContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-table-container\"",
                            "description": "Class name of the table container element"
                        },
                        {
                            "name": "table",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-table\"",
                            "description": "Class name of the table element"
                        },
                        {
                            "name": "thead",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-thead\"",
                            "description": "Class name of the thead element"
                        },
                        {
                            "name": "columnResizer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-column-resizer\"",
                            "description": "Class name of the column resizer element"
                        },
                        {
                            "name": "columnHeaderContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-column-header-content\"",
                            "description": "Class name of the column header content element"
                        },
                        {
                            "name": "columnTitle",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-column-title\"",
                            "description": "Class name of the column title element"
                        },
                        {
                            "name": "sortIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-sort-icon\"",
                            "description": "Class name of the sort icon element"
                        },
                        {
                            "name": "pcSortBadge",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-sort-badge\"",
                            "description": "Class name of the sort badge element"
                        },
                        {
                            "name": "filter",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter\"",
                            "description": "Class name of the filter element"
                        },
                        {
                            "name": "filterElementContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-element-container\"",
                            "description": "Class name of the filter element container element"
                        },
                        {
                            "name": "pcColumnFilterButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-column-filter-button\"",
                            "description": "Class name of the column filter button element"
                        },
                        {
                            "name": "pcColumnFilterClearButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-column-filter-clear-button\"",
                            "description": "Class name of the column filter clear button element"
                        },
                        {
                            "name": "filterOverlay",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-overlay\"",
                            "description": "Class name of the filter overlay element"
                        },
                        {
                            "name": "filterConstraintList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-constraint-list\"",
                            "description": "Class name of the filter constraint list element"
                        },
                        {
                            "name": "filterConstraint",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-constraint\"",
                            "description": "Class name of the filter constraint element"
                        },
                        {
                            "name": "filterConstraintSeparator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-constraint-separator\"",
                            "description": "Class name of the filter constraint separator element"
                        },
                        {
                            "name": "filterOperator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-operator\"",
                            "description": "Class name of the filter operator element"
                        },
                        {
                            "name": "pcFilterOperatorDropdown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-operator-dropdown\"",
                            "description": "Class name of the filter operator dropdown element"
                        },
                        {
                            "name": "filterRuleList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-rule-list\"",
                            "description": "Class name of the filter rule list element"
                        },
                        {
                            "name": "filterRule",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-rule\"",
                            "description": "Class name of the filter rule element"
                        },
                        {
                            "name": "pcFilterConstraintDropdown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-constraint-dropdown\"",
                            "description": "Class name of the filter constraint dropdown element"
                        },
                        {
                            "name": "pcFilterRemoveRuleButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-remove-rule-button\"",
                            "description": "Class name of the filter remove rule button element"
                        },
                        {
                            "name": "pcFilterAddRuleButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-add-rule-button\"",
                            "description": "Class name of the filter add rule button element"
                        },
                        {
                            "name": "filterButtonbar",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-buttonbar\"",
                            "description": "Class name of the filter buttonbar element"
                        },
                        {
                            "name": "pcFilterClearButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-clear-button\"",
                            "description": "Class name of the filter clear button element"
                        },
                        {
                            "name": "pcFilterApplyButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-filter-apply-button\"",
                            "description": "Class name of the filter apply button element"
                        },
                        {
                            "name": "tbody",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-tbody\"",
                            "description": "Class name of the tbody element"
                        },
                        {
                            "name": "rowGroupHeader",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-row-group-header\"",
                            "description": "Class name of the row group header element"
                        },
                        {
                            "name": "rowToggleButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-row-toggle-button\"",
                            "description": "Class name of the row toggle button element"
                        },
                        {
                            "name": "rowToggleIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-row-toggle-icon\"",
                            "description": "Class name of the row toggle icon element"
                        },
                        {
                            "name": "rowExpansion",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-row-expansion\"",
                            "description": "Class name of the row expansion element"
                        },
                        {
                            "name": "rowGroupFooter",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-row-group-footer\"",
                            "description": "Class name of the row group footer element"
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-empty-message\"",
                            "description": "Class name of the empty message element"
                        },
                        {
                            "name": "reorderableRowHandle",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-reorderable-row-handle\"",
                            "description": "Class name of the reorderable row handle element"
                        },
                        {
                            "name": "pcRowEditorInit",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-row-editor-init\"",
                            "description": "Class name of the row editor init element"
                        },
                        {
                            "name": "pcRowEditorSave",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-row-editor-save\"",
                            "description": "Class name of the row editor save element"
                        },
                        {
                            "name": "pcRowEditorCancel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-row-editor-cancel\"",
                            "description": "Class name of the row editor cancel element"
                        },
                        {
                            "name": "tfoot",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-tfoot\"",
                            "description": "Class name of the tfoot element"
                        },
                        {
                            "name": "virtualScrollerSpacer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-virtualscroller-spacer\"",
                            "description": "Class name of the virtual scroller spacer element"
                        },
                        {
                            "name": "footer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-footer\"",
                            "description": "Class name of the footer element"
                        },
                        {
                            "name": "columnResizeIndicator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-column-resize-indicator\"",
                            "description": "Class name of the column resize indicator element"
                        },
                        {
                            "name": "rowReorderIndicatorUp",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-row-reorder-indicator-up\"",
                            "description": "Class name of the row reorder indicator up element"
                        },
                        {
                            "name": "rowReorderIndicatorDown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datatable-row-reorder-indicator-down\"",
                            "description": "Class name of the row reorder indicator down element"
                        }
                    ]
                }
            }
        }
    },
    "dataview": {
        "description": "DataView displays data in grid or list layout with pagination and sorting features.\n\n[Live Demo](https://www.primevue.org/dataview/)",
        "components": {
            "default": {
                "description": "DataView displays data in grid or list layout with pagination and sorting features.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataViewPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DataViewSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "DataViewPageEvent": {
                    "description": "Custom page event.",
                    "relatedProp": "DataViewEmitsOptions.page",
                    "props": [
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total number of pages"
                        }
                    ],
                    "methods": []
                },
                "DataViewPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DataViewProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "pcPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Paginator component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "DataViewPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DataViewState": {
                    "description": "Defines current inline state in DataView component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of first record as a number."
                        },
                        {
                            "name": "d_rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current number of rows to display in new page as a number."
                        }
                    ],
                    "methods": []
                },
                "DataViewProps": {
                    "description": "Defines valid properties in DataView component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"list\" | \"grid\"",
                            "default": "list",
                            "description": "Layout of the items, valid values are 'list' and 'grid'."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first record to render."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"top\" | \"bottom\" | \"both\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are 'top','bottom' or 'both'."
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. It can be customized using the template property using the predefined keys,\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state.\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or a getter function of data to use in sorting by default."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "dataKey",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string",
                            "default": "",
                            "description": "Name of the data that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DataViewPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DataViewSlots": {
                    "description": "Defines valid slots in DataView component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "empty",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">layout</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Layout of the items.</span>\n }",
                                    "description": "empty slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "paginatorcontainer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator container template."
                        },
                        {
                            "name": "paginatorstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator start template."
                        },
                        {
                            "name": "paginatorend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator end template."
                        },
                        {
                            "name": "list",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n }",
                                    "description": "list slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom list template."
                        },
                        {
                            "name": "grid",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n }",
                                    "description": "list slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom list template."
                        }
                    ]
                },
                "DataViewEmitsOptions": {
                    "description": "Defines valid slots in DataView component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        },
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataViewPageEvent",
                                    "description": "Custom page event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when page changes, the event object contains information about the new state."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DataViewPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "DataViewSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "DataViewPageEvent": {
                    "description": "Custom page event.",
                    "props": []
                },
                "DataViewPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "DataViewPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "DataViewState": {
                    "description": "Defines current inline state in DataView component.",
                    "props": []
                },
                "DataViewProps": {
                    "description": "Defines valid properties in DataView component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "props": []
                },
                "DataViewSlots": {
                    "description": "Defines valid slots in DataView component.",
                    "props": []
                },
                "DataViewEmitsOptions": {
                    "description": "Defines valid slots in DataView component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DataViewPassThroughOptionType": {
                    "values": "DataViewPassThroughAttributes | (options: DataViewPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "DataViewEmits": {
                    "values": "EmitFn<DataViewEmitsOptions>"
                }
            }
        }
    },
    "dataviewstyle": {
        "description": "DataView displays data in grid or list layout with pagination and sorting features.\n\n[Live Demo](https://www.primevue.org/dataview/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataViewStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DataViewStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "DataViewClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dataview\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dataview-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "pcPaginator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dataview-paginator-[position]\"",
                            "description": "Class name of the paginator element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dataview-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dataview-empty-message\"",
                            "description": "Class name of the empty message element"
                        },
                        {
                            "name": "footer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dataview-footer\"",
                            "description": "Class name of the footer element"
                        }
                    ]
                }
            }
        }
    },
    "datepicker": {
        "description": "DatePicker is a form component to work with dates.\n\n[Live Demo](https://www.primevue.org/datepicker/)",
        "components": {
            "default": {
                "description": "DatePicker  is a form component to work with dates.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DatePickerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DatePickerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DatePickerState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "DatePickerContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DatePickerSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DatePickerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DatePickerState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "DatePickerResponsiveOptions": {
                    "description": "Custom DatePicker responsive options metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Breakpoint for responsive mode. Exp; @media screen and (max-width: ${breakpoint}) {...}"
                        },
                        {
                            "name": "numMonths",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of visible months on breakpoint."
                        }
                    ],
                    "methods": []
                },
                "DatePickerMonthChangeEvent": {
                    "description": "Custom DatePicker month change event.",
                    "relatedProp": "DatePickerEmitsOptions['month-change']]",
                    "props": [
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New month."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New year."
                        }
                    ],
                    "methods": []
                },
                "DatePickerYearChangeEvent": {
                    "description": "Custom DatePicker year change event.",
                    "relatedProp": "DatePickerEmitsOptions['year-change']]",
                    "props": [
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New month."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New year."
                        }
                    ],
                    "methods": []
                },
                "DatePickerBlurEvent": {
                    "description": "Custom DatePicker blur event.",
                    "relatedProp": "DatePickerEmitsOptions.blur",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Input value"
                        }
                    ],
                    "methods": []
                },
                "DatePickerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DatePickerProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "pcInputText",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown's DOM element."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown icon's DOM element."
                        },
                        {
                            "name": "inputIconContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input icon container's DOM element."
                        },
                        {
                            "name": "inputIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "calendarContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the calendar container's DOM element."
                        },
                        {
                            "name": "calendar",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the calendar's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "pcPrevButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the previous button's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "selectMonth",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the view month's DOM element."
                        },
                        {
                            "name": "selectYear",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the view year's DOM element."
                        },
                        {
                            "name": "decade",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the decade's DOM element."
                        },
                        {
                            "name": "pcNextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the next button's DOM element."
                        },
                        {
                            "name": "dayView",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "tableHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table header's DOM element."
                        },
                        {
                            "name": "tableHeaderRow",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table header row's DOM element."
                        },
                        {
                            "name": "weekHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week header's DOM element."
                        },
                        {
                            "name": "weekHeaderLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week header label's DOM element."
                        },
                        {
                            "name": "tableHeaderCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table header cell's DOM element."
                        },
                        {
                            "name": "weekDayCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week day cell's DOM element."
                        },
                        {
                            "name": "weekDay",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week day's DOM element."
                        },
                        {
                            "name": "tableBody",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table body's DOM element."
                        },
                        {
                            "name": "tableBodyRow",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table body row's DOM element."
                        },
                        {
                            "name": "weekNumber",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week number's DOM element."
                        },
                        {
                            "name": "weekLabelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week label container's DOM element."
                        },
                        {
                            "name": "dayCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the day cell's DOM element."
                        },
                        {
                            "name": "day",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the day's DOM element."
                        },
                        {
                            "name": "monthView",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the month view's DOM element."
                        },
                        {
                            "name": "month",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the month's DOM element."
                        },
                        {
                            "name": "yearView",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the year view's DOM element."
                        },
                        {
                            "name": "year",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the year's DOM element."
                        },
                        {
                            "name": "timePicker",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the time picker's DOM element."
                        },
                        {
                            "name": "hourPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hour picker's DOM element."
                        },
                        {
                            "name": "hour",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hour's DOM element."
                        },
                        {
                            "name": "separatorContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator container's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "minutePicker",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the minute picker's DOM element."
                        },
                        {
                            "name": "minute",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the minute's DOM element."
                        },
                        {
                            "name": "secondPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the second picker's DOM element."
                        },
                        {
                            "name": "second",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the second's DOM element."
                        },
                        {
                            "name": "ampmPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the ampm picker's DOM element."
                        },
                        {
                            "name": "ampm",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the ampm's DOM element."
                        },
                        {
                            "name": "buttonbar",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the buttonbar's DOM element."
                        },
                        {
                            "name": "pcIncrementButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the increment button's DOM element."
                        },
                        {
                            "name": "pcDecrementButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the decrement button's DOM element."
                        },
                        {
                            "name": "pcTodayButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the today button's DOM element."
                        },
                        {
                            "name": "pcClearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the clear button's DOM element."
                        },
                        {
                            "name": "hiddenSelectedDay",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the aria selected day's DOM element."
                        },
                        {
                            "name": "hiddenMonth",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the aria month's DOM element."
                        },
                        {
                            "name": "hiddenYear",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the aria year's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "DatePickerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DatePickerState": {
                    "description": "Defines current inline state in DatePicker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "currentMonth",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current month as a number."
                        },
                        {
                            "name": "currentYear",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current year as a number."
                        },
                        {
                            "name": "currentHour",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current hour as a number."
                        },
                        {
                            "name": "currentMinute",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current minute as a number."
                        },
                        {
                            "name": "currentSecond",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current second as a number."
                        },
                        {
                            "name": "pm",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current pm state as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "currentView",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "'date'",
                            "description": "Current view state as a string."
                        }
                    ],
                    "methods": []
                },
                "DatePickerDateContext": {
                    "description": "Defines current date options in DatePicker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "day",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current date."
                        },
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current month state."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current year state."
                        },
                        {
                            "name": "today",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current today state of the calendar's day."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Selectable state of the day."
                        }
                    ],
                    "methods": []
                },
                "DatePickerContext": {
                    "description": "Defines current options in DatePicker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "date",
                            "optional": false,
                            "readonly": false,
                            "type": "DatePickerDateContext",
                            "default": "",
                            "description": "Current date."
                        },
                        {
                            "name": "today",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current today state of the calendar's day."
                        },
                        {
                            "name": "otherMonth",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current other month state of the calendar's day."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selected state of the calendar's day or month or year."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the calendar's day or month or year."
                        },
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "DatePickerMonthOptions",
                            "default": "",
                            "description": "Current month state."
                        },
                        {
                            "name": "monthIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current month index state."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "DatePickerYearOptions",
                            "default": "",
                            "description": "Current year state."
                        }
                    ],
                    "methods": []
                },
                "DatePickerMonthOptions": {
                    "description": "Defines current month options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Month value."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Selectable state of the month."
                        }
                    ],
                    "methods": []
                },
                "DatePickerYearOptions": {
                    "description": "Defines current year options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Year value."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Selectable state of the month."
                        }
                    ],
                    "methods": []
                },
                "DatePickerProps": {
                    "description": "Defines valid properties in DatePicker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "null | Date | Date[] | (null | Date)[]",
                            "default": "null",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "null | Date | Date[] | (null | Date)[]",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"single\" | \"multiple\" | \"range\"",
                            "default": "single",
                            "description": "Defines the quantity of the selection."
                        },
                        {
                            "name": "dateFormat",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Format of the date. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays the datepicker as inline instead of an overlay."
                        },
                        {
                            "name": "showOtherMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use the selectOtherMonths option."
                        },
                        {
                            "name": "selectOtherMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether days in other months shown before or after the current month are selectable. This only applies if the showOtherMonths option is set to true."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays a button with icon next to input."
                        },
                        {
                            "name": "iconDisplay",
                            "optional": true,
                            "readonly": false,
                            "type": "\"button\" | \"input\"",
                            "default": "'button'",
                            "description": "Icon position of the component. This only applies if the showIcon option is set to true."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the datepicker button."
                        },
                        {
                            "name": "prevIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to show in the previous button."
                        },
                        {
                            "name": "nextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to show in the next button."
                        },
                        {
                            "name": "incrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to show in each of the increment buttons."
                        },
                        {
                            "name": "decrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to show in each of the decrement buttons."
                        },
                        {
                            "name": "numberOfMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of months to display."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "DatePickerResponsiveOptions[]",
                            "default": "",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "769px",
                            "description": "The breakpoint to define the maximum width boundary for datepicker panel."
                        },
                        {
                            "name": "view",
                            "optional": true,
                            "readonly": false,
                            "type": "\"date\" | \"month\" | \"year\"",
                            "default": "date",
                            "description": "Type of view to display."
                        },
                        {
                            "name": "minDate",
                            "optional": true,
                            "readonly": false,
                            "type": "Date",
                            "default": "",
                            "description": "The minimum selectable date."
                        },
                        {
                            "name": "maxDate",
                            "optional": true,
                            "readonly": false,
                            "type": "Date",
                            "default": "",
                            "description": "The maximum selectable date."
                        },
                        {
                            "name": "disabledDates",
                            "optional": true,
                            "readonly": false,
                            "type": "Date[]",
                            "default": "",
                            "description": "Array with dates to disable."
                        },
                        {
                            "name": "disabledDays",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array with disabled weekday numbers."
                        },
                        {
                            "name": "maxDateCount",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of selectable dates in multiple mode."
                        },
                        {
                            "name": "showOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When disabled, datepicker will not be visible with input focus."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "showButtonBar",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display today and clear buttons at the footer."
                        },
                        {
                            "name": "shortYearCutoff",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "+10",
                            "description": "The cutoff year for determining the century for a date."
                        },
                        {
                            "name": "showTime",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display timepicker."
                        },
                        {
                            "name": "timeOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display timepicker only."
                        },
                        {
                            "name": "hourFormat",
                            "optional": true,
                            "readonly": false,
                            "type": "\"12\" | \"24\"",
                            "default": "24",
                            "description": "Specifies hour format."
                        },
                        {
                            "name": "stepHour",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Hours to change per step."
                        },
                        {
                            "name": "stepMinute",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Minutes to change per step."
                        },
                        {
                            "name": "stepSecond",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Seconds to change per step."
                        },
                        {
                            "name": "showSeconds",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show the seconds in time picker."
                        },
                        {
                            "name": "hideOnDateTimeSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to hide the overlay on date selection when showTime is enabled."
                        },
                        {
                            "name": "hideOnRangeSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to hide the overlay on date selection is completed when selectionMode is range."
                        },
                        {
                            "name": "timeSeparator",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ":",
                            "description": "Separator of time selector."
                        },
                        {
                            "name": "showWeek",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, datepicker will show week numbers."
                        },
                        {
                            "name": "manualInput",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to allow entering the date manually via typing."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "todayButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the today button component."
                        },
                        {
                            "name": "clearButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the clear button component."
                        },
                        {
                            "name": "navigatorButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the navigator button component."
                        },
                        {
                            "name": "timepickerButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the timepicker button component."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DatePickerPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DatePickerDateSlotOptions": {
                    "description": "Defines valid options of the date slot in DatePicker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "day",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current date."
                        },
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current month state."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current year state."
                        },
                        {
                            "name": "today",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current today state of the calendar's day."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Selectable state of the day."
                        }
                    ],
                    "methods": []
                },
                "DatePickerSlots": {
                    "description": "Defines valid slots in DatePicker component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template of panel."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template of panel."
                        },
                        {
                            "name": "date",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">date</span>: <span class=\"doc-option-parameter-type\">DatePickerDateSlotOptions</span>, <span class=\"doc-option-parameter-type\">// Value of the component.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom date template."
                        },
                        {
                            "name": "decade",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">years</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// An array containing the start and and year of a decade to display at header of the year picker.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom decade template."
                        },
                        {
                            "name": "weekheaderlabel",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom week header label template."
                        },
                        {
                            "name": "weeklabel",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">weekNumber</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Number of the week</span>\n }",
                                    "description": "weeklabel slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom week label template."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the dropdown icon</span>\n }",
                                    "description": "dropdown icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom dropdown icon template."
                        },
                        {
                            "name": "inputicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the input icon</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">clickCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Click callback</span>\n}",
                                    "description": "input icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom input icon template."
                        },
                        {
                            "name": "previcon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the previous icon</span>\n }",
                                    "description": "previous icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom previous icon template."
                        },
                        {
                            "name": "nexticon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the next icon</span>\n }",
                                    "description": "next icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom next icon template."
                        },
                        {
                            "name": "incrementicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the increment icon</span>\n }",
                                    "description": "increment icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom increment icon template."
                        },
                        {
                            "name": "decrementicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the decrement icon</span>\n }",
                                    "description": "decrement icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom decrement icon template."
                        },
                        {
                            "name": "dropdownbutton",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Toggle function.</span>\n}"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom dropdown button template."
                        }
                    ]
                },
                "DatePickerEmitsOptions": {
                    "description": "Defines valid emits in DatePicker component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | null | Date | Date[] | (null | Date)[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | null | Date | Date[] | (null | Date)[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "input",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when input field is being typed."
                        },
                        {
                            "name": "date-select",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "Date",
                                    "description": "Selected value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a date is selected."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when datepicker panel is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when datepicker panel is hidden."
                        },
                        {
                            "name": "today-click",
                            "parameters": [
                                {
                                    "name": "date",
                                    "optional": false,
                                    "type": "Date",
                                    "description": "Today as a date instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when today button is clicked."
                        },
                        {
                            "name": "clear-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when clear button is clicked."
                        },
                        {
                            "name": "month-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DatePickerMonthChangeEvent",
                                    "description": "Custom month change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a month is changed using the navigators."
                        },
                        {
                            "name": "year-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DatePickerYearChangeEvent",
                                    "description": "Custom year change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a year is changed using the navigators."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Focus event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on focus of input field."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DatePickerBlurEvent",
                                    "description": "Blur event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on blur of input field."
                        },
                        {
                            "name": "keydown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a key is pressed."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DatePickerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "DatePickerSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "DatePickerResponsiveOptions": {
                    "description": "Custom DatePicker responsive options metadata.",
                    "props": []
                },
                "DatePickerMonthChangeEvent": {
                    "description": "Custom DatePicker month change event.",
                    "props": []
                },
                "DatePickerYearChangeEvent": {
                    "description": "Custom DatePicker year change event.",
                    "props": []
                },
                "DatePickerBlurEvent": {
                    "description": "Custom DatePicker blur event.",
                    "props": []
                },
                "DatePickerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "DatePickerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "DatePickerState": {
                    "description": "Defines current inline state in DatePicker component.",
                    "props": []
                },
                "DatePickerDateContext": {
                    "description": "Defines current date options in DatePicker component.",
                    "props": []
                },
                "DatePickerContext": {
                    "description": "Defines current options in DatePicker component.",
                    "props": []
                },
                "DatePickerMonthOptions": {
                    "description": "Defines current month options.",
                    "props": []
                },
                "DatePickerYearOptions": {
                    "description": "Defines current year options.",
                    "props": []
                },
                "DatePickerProps": {
                    "description": "Defines valid properties in DatePicker component.",
                    "props": []
                },
                "DatePickerDateSlotOptions": {
                    "description": "Defines valid options of the date slot in DatePicker component.",
                    "props": []
                },
                "DatePickerSlots": {
                    "description": "Defines valid slots in DatePicker component.",
                    "props": []
                },
                "DatePickerEmitsOptions": {
                    "description": "Defines valid emits in DatePicker component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DatePickerPassThroughOptionType": {
                    "values": "DatePickerPassThroughAttributes | (options: DatePickerPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "DatePickerPassThroughTransitionType": {
                    "values": "TransitionProps | (options: DatePickerPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "DatePickerEmits": {
                    "values": "EmitFn<DatePickerEmitsOptions>"
                }
            }
        }
    },
    "datepickerstyle": {
        "description": "DatePicker is a form component to work with dates.\n\n[Live Demo](https://www.primevue.org/datepicker/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DatePickerStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DatePickerStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "DatePickerClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "pcInput",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-input\"",
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "dropdown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-dropdown\"",
                            "description": "Class name of the dropdown element"
                        },
                        {
                            "name": "inputIconContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-input-icon-container\"",
                            "description": "Class name of the input icon container element"
                        },
                        {
                            "name": "inputIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-input-icon\"",
                            "description": "Class name of the input icon element"
                        },
                        {
                            "name": "panel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-panel\"",
                            "description": "Class name of the panel element"
                        },
                        {
                            "name": "calendarContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-calendar-container\"",
                            "description": "Class name of the calendar container element"
                        },
                        {
                            "name": "calendar",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-calendar\"",
                            "description": "Class name of the calendar element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "pcPrevButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-prev-button\"",
                            "description": "Class name of the previous button element"
                        },
                        {
                            "name": "title",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-title\"",
                            "description": "Class name of the title element"
                        },
                        {
                            "name": "selectMonth",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-select-month\"",
                            "description": "Class name of the select month element"
                        },
                        {
                            "name": "selectYear",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-select-year\"",
                            "description": "Class name of the select year element"
                        },
                        {
                            "name": "decade",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-decade\"",
                            "description": "Class name of the decade element"
                        },
                        {
                            "name": "pcNextButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-next-button\"",
                            "description": "Class name of the next button element"
                        },
                        {
                            "name": "dayView",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-day-view\"",
                            "description": "Class name of the day view element"
                        },
                        {
                            "name": "weekHeader",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-weekheader\"",
                            "description": "Class name of the week header element"
                        },
                        {
                            "name": "weekNumber",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-weeknumber\"",
                            "description": "Class name of the week number element"
                        },
                        {
                            "name": "weekLabelContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-weeklabel-container\"",
                            "description": "Class name of the week label container element"
                        },
                        {
                            "name": "weekDayCell",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-weekday-cell\"",
                            "description": "Class name of the week day cell element"
                        },
                        {
                            "name": "weekDay",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-weekday\"",
                            "description": "Class name of the week day element"
                        },
                        {
                            "name": "dayCell",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-day-cell\"",
                            "description": "Class name of the day cell element"
                        },
                        {
                            "name": "day",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-day\"",
                            "description": "Class name of the day element"
                        },
                        {
                            "name": "monthView",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-month-view\"",
                            "description": "Class name of the month view element"
                        },
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-month\"",
                            "description": "Class name of the month element"
                        },
                        {
                            "name": "yearView",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-year-view\"",
                            "description": "Class name of the year view element"
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-year\"",
                            "description": "Class name of the year element"
                        },
                        {
                            "name": "timePicker",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-time-picker\"",
                            "description": "Class name of the time picker element"
                        },
                        {
                            "name": "hourPicker",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-hour-picker\"",
                            "description": "Class name of the hour picker element"
                        },
                        {
                            "name": "pcIncrementButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-increment-button\"",
                            "description": "Class name of the increment button element"
                        },
                        {
                            "name": "pcDecrementButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-decrement-button\"",
                            "description": "Class name of the decrement button element"
                        },
                        {
                            "name": "separator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-separator\"",
                            "description": "Class name of the separator element"
                        },
                        {
                            "name": "minutePicker",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-minute-picker\"",
                            "description": "Class name of the minute picker element"
                        },
                        {
                            "name": "secondPicker",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-second-picker\"",
                            "description": "Class name of the second picker element"
                        },
                        {
                            "name": "ampmPicker",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-ampm-picker\"",
                            "description": "Class name of the ampm picker element"
                        },
                        {
                            "name": "buttonbar",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-buttonbar\"",
                            "description": "Class name of the buttonbar element"
                        },
                        {
                            "name": "pcTodayButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-today-button\"",
                            "description": "Class name of the today button element"
                        },
                        {
                            "name": "pcClearButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-datepicker-clear-button\"",
                            "description": "Class name of the clear button element"
                        }
                    ]
                }
            }
        }
    },
    "deferredcontent": {
        "description": "DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.\n\n[Live Demo](https://www.primevue.org/deferredcontent/)",
        "components": {
            "default": {
                "description": "DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DeferredContentPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DeferredContentProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DeferredContentState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DeferredContentPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DeferredContentProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DeferredContentPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "DeferredContentPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DeferredContentState": {
                    "description": "Defines current inline state in DeferredContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "loaded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current loaded state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DeferredContentProps": {
                    "description": "Defines valid props in DeferredContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DeferredContentPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DeferredContentSlots": {
                    "description": "Defines valid slots in DeferredContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        }
                    ]
                },
                "DeferredContentEmitsOptions": {
                    "description": "Defines valid emits in DeferredContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "load",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when deferred content is loaded."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DeferredContentPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "DeferredContentPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "DeferredContentPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "DeferredContentState": {
                    "description": "Defines current inline state in DeferredContent component.",
                    "props": []
                },
                "DeferredContentProps": {
                    "description": "Defines valid props in DeferredContent component.",
                    "props": []
                },
                "DeferredContentSlots": {
                    "description": "Defines valid slots in DeferredContent component.",
                    "props": []
                },
                "DeferredContentEmitsOptions": {
                    "description": "Defines valid emits in DeferredContent component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DeferredContentPassThroughOptionType": {
                    "values": "DeferredContentPassThroughAttributes | (options: DeferredContentPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "DeferredContentEmits": {
                    "values": "EmitFn<DeferredContentEmitsOptions>"
                }
            }
        }
    },
    "deferredcontentstyle": {
        "description": "DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.\n\n[Live Demo](https://www.primevue.org/deferredcontent/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DeferredContentStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DeferredContentStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "DeferredContentClasses": {
                    "members": []
                }
            }
        }
    },
    "dialog": {
        "description": "Dialog is a container to display content in an overlay window.\n\n[Live Demo](https://www.primevue.org/dialog)",
        "components": {
            "default": {
                "description": "Dialog is a container to display content in an overlay window.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DialogPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DialogProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DialogState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DialogSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DialogProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DialogState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "DialogPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DialogProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the header title's DOM element."
                        },
                        {
                            "name": "headerActions",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the header actions' DOM element."
                        },
                        {
                            "name": "pcMaximizeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the maximize Button component."
                        },
                        {
                            "name": "pcCloseButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the close Button component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughTransitionType<T>",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "DialogPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DialogState": {
                    "description": "Defines current inline state in Dialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "containerVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state of the container as a boolean."
                        },
                        {
                            "name": "maximized",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current maximized state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DialogBreakpoints": {
                    "description": "Custom breakpoint metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "DialogProps": {
                    "description": "Defines valid properties in Dialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Title content of the dialog."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Footer content of the dialog."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the dialog."
                        },
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if background should be blocked when dialog is displayed."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style of the content section."
                        },
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the content section."
                        },
                        {
                            "name": "contentProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the overlay Dialog inside the component."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Adds a close icon to the header to hide the dialog."
                        },
                        {
                            "name": "dismissableMask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if clicking the modal background should hide the dialog."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the dialog."
                        },
                        {
                            "name": "showHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the header or not."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when dialog is visible."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"top\" | \"bottom\" | \"center\" | \"topleft\" | \"topright\" | \"bottomleft\" | \"bottomright\"",
                            "default": "center",
                            "description": "Position of the dialog."
                        },
                        {
                            "name": "maximizable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dialog can be displayed full screen."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables dragging to change the position using header."
                        },
                        {
                            "name": "keepInViewport",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Keeps dialog in the viewport when dragging."
                        },
                        {
                            "name": "minX",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0.",
                            "description": "Minimum value for the left coordinate of dialog in dragging."
                        },
                        {
                            "name": "minY",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum value for the top coordinate of dialog in dragging."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the dialog gets attached."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style of the dynamic dialog."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dialog close button."
                        },
                        {
                            "name": "maximizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dialog maximize button when dialog is not maximized."
                        },
                        {
                            "name": "minimizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dialog maximize button when dialog is minimized."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the Button component."
                        },
                        {
                            "name": "maximizeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the Button component."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DialogPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DialogSlots": {
                    "description": "Defines valid slots in Dialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the close icon</span>\n }",
                                    "description": "close icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "maximizeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">maximized</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Maximized state as a boolean</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the maximize icon</span>\n }",
                                    "description": "maximize icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom maximize icon template of dialog."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close dialog function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">maximizeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Maximize/minimize dialog function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "DialogEmitsOptions": {
                    "description": "Defines valid emits in Dialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:visible",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the visible changes."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog is hidden."
                        },
                        {
                            "name": "after-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke after dialog is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog is shown."
                        },
                        {
                            "name": "maximize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when a dialog gets maximized."
                        },
                        {
                            "name": "unmaximize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when a dialog gets unmaximized."
                        },
                        {
                            "name": "dragstart",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when a dialog drag begins."
                        },
                        {
                            "name": "dragend",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when a dialog drag completes."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DialogPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "DialogSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "DialogPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "DialogPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "DialogState": {
                    "description": "Defines current inline state in Dialog component.",
                    "props": []
                },
                "DialogBreakpoints": {
                    "description": "Custom breakpoint metadata.",
                    "props": []
                },
                "DialogProps": {
                    "description": "Defines valid properties in Dialog component.",
                    "props": []
                },
                "DialogSlots": {
                    "description": "Defines valid slots in Dialog component.",
                    "props": []
                },
                "DialogEmitsOptions": {
                    "description": "Defines valid emits in Dialog component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DialogPassThroughOptionType": {
                    "values": "DialogPassThroughAttributes | (options: DialogPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "DialogPassThroughTransitionType": {
                    "values": "TransitionProps | (options: DialogPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "DialogEmits": {
                    "values": "EmitFn<DialogEmitsOptions>"
                }
            }
        }
    },
    "dialogstyle": {
        "description": "Dialog is a container to display content in an overlay window.\n\n[Live Demo](https://www.primevue.org/dialog)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DialogStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DialogStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "DialogClasses": {
                    "members": [
                        {
                            "name": "mask",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dialog-mask\"",
                            "description": "Class name of the mask element"
                        },
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dialog\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dialog-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "title",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dialog-title\"",
                            "description": "Class name of the title element"
                        },
                        {
                            "name": "headerActions",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dialog-header-actions\"",
                            "description": "Class name of the header actions element"
                        },
                        {
                            "name": "pcMaximizeButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dialog-maximize-button\"",
                            "description": "Class name of the maximize button element"
                        },
                        {
                            "name": "pcCloseButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dialog-close-button\"",
                            "description": "Class name of the close button element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dialog-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "footer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dialog-footer\"",
                            "description": "Class name of the footer element"
                        }
                    ]
                }
            }
        }
    },
    "dialogservice-usedialog": {
        "description": "[Live Demo](https://www.primevue.org/dynamicdialog/)",
        "model": {
            "DialogServiceMethods": {
                "description": "Dynamic Dialog components methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "open",
                            "parameters": [
                                {
                                    "name": "content",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Dynamic component for content template"
                                },
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": "any",
                                    "description": "DynamicDialog Object"
                                }
                            ],
                            "returnType": "DynamicDialogInstance",
                            "description": "Displays the dialog using the dynamic dialog object options."
                        }
                    ]
                }
            }
        }
    },
    "divider": {
        "description": "Divider is used to separate contents.\n\n[Live Demo](https://primevue.org/divider)",
        "components": {
            "default": {
                "description": "Divider is used to separate contents.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DividerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DividerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DividerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DividerProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DividerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DividerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "DividerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DividerProps": {
                    "description": "Defines valid properties in Divider component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "align",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"top\" | \"bottom\" | \"center\"",
                            "default": "",
                            "description": "Alignment of the content."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the orientation, valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"solid\" | \"dashed\" | \"dotted\"",
                            "default": "solid",
                            "description": "Border style type."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DividerPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DividerSlots": {
                    "description": "Defines valid slots in Divider slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        }
                    ]
                },
                "DividerEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DividerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "DividerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "DividerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "DividerProps": {
                    "description": "Defines valid properties in Divider component.",
                    "props": []
                },
                "DividerSlots": {
                    "description": "Defines valid slots in Divider slots.",
                    "props": []
                },
                "DividerEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DividerPassThroughOptionType": {
                    "values": "DividerPassThroughAttributes | (options: DividerPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "DividerEmits": {
                    "values": "EmitFn<DividerEmitsOptions>"
                }
            }
        }
    },
    "dividerstyle": {
        "description": "Divider is used to separate contents.\n\n[Live Demo](https://primevue.org/divider)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DividerStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DividerStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "DividerClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-divider\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-divider-content\"",
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "dock": {
        "description": "Dock is a navigation component consisting of menuitems.\n\n[Live Demo](https://www.primevue.org/dock/)",
        "components": {
            "default": {
                "description": "Dock is a navigation component consisting of menuitems.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DockPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DockProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DockState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "DockContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DockPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DockProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "listContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list container's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the  item's DOM element."
                        },
                        {
                            "name": "itemContent",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item content's DOM element."
                        },
                        {
                            "name": "itemLink",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item link's DOM element."
                        },
                        {
                            "name": "itemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "DockPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DockState": {
                    "description": "Defines current inline state in Dock component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "currentIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "-3",
                            "description": "Current index as a number."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "-1",
                            "description": "Current focused item index as a number."
                        }
                    ],
                    "methods": []
                },
                "DockContext": {
                    "description": "Defines current options in Dock component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the menuitem."
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DockTooltipOptions": {
                    "description": "Defines tooltip options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "event",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"focus\" | \"hover\"",
                            "default": "",
                            "description": "Event to show the tooltip, valid values are hover and focus."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"left\" | \"right\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of element."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DockRouterBindProps": {
                    "description": "Defines valid router binding props in Dock component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        }
                    ],
                    "methods": []
                },
                "DockProps": {
                    "description": "Defines valid properties in Dock component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the action items."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of element."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "DockTooltipOptions",
                            "default": "",
                            "description": "Whether to display the tooltip on items. The modifiers of Tooltip can be used like an object in it. Valid keys are 'event' and 'position'."
                        },
                        {
                            "name": "menuId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the menu."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DockPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DockSlots": {
                    "description": "Defines valid slots in Dock component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Custom content for item.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">DockRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item content."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Custom content for item icon.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'itemicon' slot.\nCustom icon content."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Custom content for item icon.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon content."
                        }
                    ]
                },
                "DockEmitsOptions": {
                    "description": "Defines valid emits in Dock component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DockPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "DockPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "DockPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "DockState": {
                    "description": "Defines current inline state in Dock component.",
                    "props": []
                },
                "DockContext": {
                    "description": "Defines current options in Dock component.",
                    "props": []
                },
                "DockTooltipOptions": {
                    "description": "Defines tooltip options",
                    "props": []
                },
                "DockRouterBindProps": {
                    "description": "Defines valid router binding props in Dock component.",
                    "props": []
                },
                "DockProps": {
                    "description": "Defines valid properties in Dock component.",
                    "props": []
                },
                "DockSlots": {
                    "description": "Defines valid slots in Dock component.",
                    "props": []
                },
                "DockEmitsOptions": {
                    "description": "Defines valid emits in Dock component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DockPassThroughOptionType": {
                    "values": "DockPassThroughAttributes | (options: DockPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "DockEmits": {
                    "values": "EmitFn<DockEmitsOptions>"
                }
            }
        }
    },
    "dockstyle": {
        "description": "Dock is a navigation component consisting of menuitems.\n\n[Live Demo](https://www.primevue.org/dock/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DockStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DockStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "DockClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dock\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "listContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dock-list-container\"",
                            "description": "Class name of the list container element"
                        },
                        {
                            "name": "list",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dock-list\"",
                            "description": "Class name of the list element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dock-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "itemContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dock-item-content\"",
                            "description": "Class name of the item content element"
                        },
                        {
                            "name": "itemLink",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dock-item-link\"",
                            "description": "Class name of the item link element"
                        },
                        {
                            "name": "itemIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-dock-item-icon\"",
                            "description": "Class name of the item icon element"
                        }
                    ]
                }
            }
        }
    },
    "drawer": {
        "description": "Drawer is a panel component displayed as an overlay at the edges of the screen.\n\n[Live Demo](https://primevue.org/drawer)",
        "components": {
            "default": {
                "description": "Drawer is a panel component displayed as an overlay.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DrawerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DrawerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DrawerState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DrawerSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DrawerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DrawerState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "DrawerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DrawerProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DrawerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DrawerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "DrawerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header content's DOM element."
                        },
                        {
                            "name": "pcCloseButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DrawerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DrawerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "DrawerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "DrawerPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "DrawerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DrawerState": {
                    "description": "Defines current inline state in Drawer component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "containerVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current container visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DrawerProps": {
                    "description": "Defines valid properties in Drawer component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the dialog."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"top\" | \"bottom\" | \"full\"",
                            "default": "left",
                            "description": "Specifies the position of the drawer."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Title content of the dialog."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "dismissable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether clicking outside closes the panel."
                        },
                        {
                            "name": "showCloseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display a close icon inside the panel."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass the custom value to read for the button inside the component."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the drawer close button."
                        },
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to a modal layer behind the drawer."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when drawer is visible."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DrawerPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DrawerSlots": {
                    "description": "Defines valid slots in Drawer component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the header title</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the close icon</span>\n }",
                                    "description": "close icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close drawer function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        }
                    ]
                },
                "DrawerEmitsOptions": {
                    "description": "Defines valid emits in Drawer component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:visible",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when drawer is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before drawer gets hidden."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when drawer gets hidden."
                        },
                        {
                            "name": "after-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke after drawer is hidden."
                        },
                        {
                            "name": "after-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke after drawer is shown."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DrawerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "DrawerSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "DrawerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "DrawerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "DrawerState": {
                    "description": "Defines current inline state in Drawer component.",
                    "props": []
                },
                "DrawerProps": {
                    "description": "Defines valid properties in Drawer component.",
                    "props": []
                },
                "DrawerSlots": {
                    "description": "Defines valid slots in Drawer component.",
                    "props": []
                },
                "DrawerEmitsOptions": {
                    "description": "Defines valid emits in Drawer component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DrawerPassThroughOptionType": {
                    "values": "DrawerPassThroughAttributes | (options: DrawerPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "DrawerPassThroughTransitionType": {
                    "values": "TransitionProps | (options: DrawerPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "DrawerEmits": {
                    "values": "EmitFn<DrawerEmitsOptions>"
                }
            }
        }
    },
    "drawerstyle": {
        "description": "Drawer is a panel component displayed as an overlay at the edges of the screen.\n\n[Live Demo](https://primevue.org/drawer)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DrawerStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DrawerStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "DrawerClasses": {
                    "members": [
                        {
                            "name": "mask",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-drawer-mask\"",
                            "description": "Class name of the mask element"
                        },
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-drawer\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-drawer-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "title",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-drawer-title\"",
                            "description": "Class name of the title element"
                        },
                        {
                            "name": "pcCloseButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-drawer-close-button\"",
                            "description": "Class name of the close button element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-drawer-content\"",
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "dropdown": {
        "description": "Dropdown also known as Select, is used to choose an item from a collection of options.\n\n[Live Demo](https://www.primevue.org/select/)",
        "components": {
            "default": {
                "description": "",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DropdownPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default<T>"
                },
                "DropdownChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "undefined.DropdownEmitsOptions.change",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "DropdownFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "undefined.DropdownEmitsOptions.filter",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "DropdownPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "undefined.DropdownProps.pt",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default<T>"
                },
                "DropdownPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "DropdownState": {
                    "description": "Defines current inline state in Dropdown component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "DropdownContext": {
                    "description": "Defines current options in Dropdown component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "DropdownProps": {
                    "description": "Defines valid properties in Dropdown component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "DropdownSlots": {
                    "description": "Defines valid slots in Dropdown component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "DropdownEmitsOptions": {
                    "description": "Defines valid emits in Dropdown component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "DropdownMethods": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "show",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "hide",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DropdownPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "DropdownChangeEvent": {
                    "description": "Custom change event.",
                    "props": []
                },
                "DropdownFilterEvent": {
                    "description": "Custom filter event.",
                    "props": []
                },
                "DropdownPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "DropdownPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "DropdownState": {
                    "description": "Defines current inline state in Dropdown component.",
                    "props": []
                },
                "DropdownContext": {
                    "description": "Defines current options in Dropdown component.",
                    "props": []
                },
                "DropdownProps": {
                    "description": "Defines valid properties in Dropdown component.",
                    "props": []
                },
                "DropdownSlots": {
                    "description": "Defines valid slots in Dropdown component.",
                    "props": []
                },
                "DropdownEmitsOptions": {
                    "description": "Defines valid emits in Dropdown component.",
                    "props": []
                },
                "DropdownMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DropdownEmits": {
                    "values": "EmitFn<DropdownEmitsOptions> & Select.SelectEmits"
                }
            }
        }
    },
    "dropdownstyle": {
        "description": "Dropdown also known as Select, is used to choose an item from a collection of options.\n\n[Live Demo](https://www.primevue.org/select/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DropdownStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DropdownStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "DropdownClasses": {
                    "members": []
                }
            }
        }
    },
    "dynamicdialog": {
        "description": "DynamicDialogs can be created dynamically with any component as the content using a DialogService.\n\n[Live Demo](https://primevue.org/dynamicdialog)",
        "components": {
            "default": {
                "description": "DynamicDialogs can be created dynamically with any component as the content using a DialogService.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DynamicDialogProps": {
                    "description": "Defines valid properties in DynamicDialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DynamicDialogSlots": {
                    "description": "Defines valid slots in DynamicDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "DynamicDialogEmitsOptions": {
                    "description": "Defines valid emits in DynamicDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DynamicDialogProps": {
                    "description": "Defines valid properties in DynamicDialog component.",
                    "props": []
                },
                "DynamicDialogSlots": {
                    "description": "Defines valid slots in DynamicDialog component.",
                    "props": []
                },
                "DynamicDialogEmitsOptions": {
                    "description": "Defines valid emits in DynamicDialog component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DynamicDialogEmits": {
                    "values": "EmitFn<DynamicDialogEmitsOptions>"
                }
            }
        }
    },
    "dynamicdialogstyle": {
        "description": "DynamicDialogs can be created dynamically with any component as the content using a DialogService.\n\n[Live Demo](https://primevue.org/dynamicdialog)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DynamicDialogStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DynamicDialogStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "DynamicDialogClasses": {
                    "members": []
                }
            }
        }
    },
    "dynamicdialogoptions": {
        "description": "[Live Demo](https://www.primevue.org/dynamicdialog/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DynamicDialogTemplates": {
                    "description": "Custom dialog templates.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom footer template."
                        }
                    ],
                    "methods": []
                },
                "DynamicDialogCloseOptions": {
                    "description": "Dynamic Dialog close method options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom data object"
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"config-close\" | \"dialog-close\"",
                            "default": "",
                            "description": "Close type"
                        }
                    ],
                    "methods": []
                },
                "DynamicDialogOptions": {
                    "description": "Custom Dynamic Dialog options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Dialog Props"
                        },
                        {
                            "name": "templates",
                            "optional": true,
                            "readonly": false,
                            "type": "DynamicDialogTemplates",
                            "default": "",
                            "description": "Dialog Slots"
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom data object"
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [
                        {
                            "name": "onClose",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": "DynamicDialogCloseOptions"
                                }
                            ],
                            "returnType": "void",
                            "description": "Closes the dialog."
                        }
                    ]
                },
                "DynamicDialogInstance": {
                    "description": "Custom Dynamic Dialog options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Dynamic component for content template"
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "DynamicDialogOptions",
                            "default": "",
                            "description": "Instance options"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom data object"
                        },
                        {
                            "name": "close",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "DynamicDialogTemplates": {
                    "description": "Custom dialog templates.",
                    "props": []
                },
                "DynamicDialogCloseOptions": {
                    "description": "Dynamic Dialog close method options.",
                    "props": []
                },
                "DynamicDialogOptions": {
                    "description": "Custom Dynamic Dialog options.",
                    "props": []
                },
                "DynamicDialogInstance": {
                    "description": "Custom Dynamic Dialog options.",
                    "props": []
                }
            }
        }
    },
    "editor": {
        "description": "Editor groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/editor/)",
        "components": {
            "default": {
                "description": "Editor groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "EditorPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "EditorProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "EditorTextChangeEvent": {
                    "description": "Custom text change event.",
                    "relatedProp": "EditorEmitsOptions['text-change']",
                    "props": [
                        {
                            "name": "htmlValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current value as html."
                        },
                        {
                            "name": "textValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current value as text."
                        },
                        {
                            "name": "delta",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Representation of the change."
                        },
                        {
                            "name": "source",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Source of change. Will be either 'user' or 'api'."
                        },
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Text editor instance."
                        }
                    ],
                    "methods": []
                },
                "EditorSelectionChangeEvent": {
                    "description": "Custom selection change event.",
                    "relatedProp": "EditorEmitsOptions['selection-change']",
                    "props": [
                        {
                            "name": "htmlValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current value as html."
                        },
                        {
                            "name": "textValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current value as text."
                        },
                        {
                            "name": "range",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Representation of the selection boundaries."
                        },
                        {
                            "name": "oldRange",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Representation of the previous selection boundaries."
                        },
                        {
                            "name": "source",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Source of change. Will be either 'user' or 'api'."
                        },
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Text editor instance."
                        }
                    ],
                    "methods": []
                },
                "EditorLoadEvent": {
                    "description": "Custom load event.",
                    "relatedProp": "EditorEmitsOptions.load",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Text editor instance."
                        }
                    ],
                    "methods": []
                },
                "EditorPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "EditorProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "toolbar",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toolbar's DOM element."
                        },
                        {
                            "name": "formats",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the formats' DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option's DOM element."
                        },
                        {
                            "name": "bold",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the bold's DOM element."
                        },
                        {
                            "name": "italic",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the italic's DOM element."
                        },
                        {
                            "name": "underline",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the underline's DOM element."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the color's DOM element."
                        },
                        {
                            "name": "background",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the background's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "select",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the select's DOM element."
                        },
                        {
                            "name": "link",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the link's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the image's DOM element."
                        },
                        {
                            "name": "codeBlock",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the code block's DOM element."
                        },
                        {
                            "name": "clean",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the clean's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "EditorPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "EditorProps": {
                    "description": "Defines valid properties in Editor component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the content."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when editor is empty."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to instantiate the editor to readonly mode."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "formats",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Whitelist of formats to display, see  <a target=\"_blank\" href=\"https://quilljs.com/docs/formats/\">here</a>  for available options."
                        },
                        {
                            "name": "editorStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the container."
                        },
                        {
                            "name": "modules",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Modules configuration, see  <a target=\"_blank\" href=\"https://quilljs.com/docs/modules/\">here</a>  for available options."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<EditorPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "EditorSlots": {
                    "description": "Defines valid slots in Editor slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "toolbar",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "EditorEmitsOptions": {
                    "description": "Defines valid emits in Editor component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "text-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "EditorTextChangeEvent",
                                    "description": "Custom text change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when text of editor changes."
                        },
                        {
                            "name": "selection-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "EditorSelectionChangeEvent",
                                    "description": "Custom selection change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection of the text changes."
                        },
                        {
                            "name": "load",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "EditorLoadEvent",
                                    "description": "Custom load event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the quill modules are loaded."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "EditorPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "EditorTextChangeEvent": {
                    "description": "Custom text change event.",
                    "props": []
                },
                "EditorSelectionChangeEvent": {
                    "description": "Custom selection change event.",
                    "props": []
                },
                "EditorLoadEvent": {
                    "description": "Custom load event.",
                    "props": []
                },
                "EditorPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "EditorPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "EditorProps": {
                    "description": "Defines valid properties in Editor component.",
                    "props": []
                },
                "EditorSlots": {
                    "description": "Defines valid slots in Editor slots.",
                    "props": []
                },
                "EditorEmitsOptions": {
                    "description": "Defines valid emits in Editor component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "EditorPassThroughOptionType": {
                    "values": "EditorPassThroughAttributes | (options: EditorPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "EditorEmits": {
                    "values": "EmitFn<EditorEmitsOptions>"
                }
            }
        }
    },
    "editorstyle": {
        "description": "Editor groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/editor/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "EditorStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "EditorStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "EditorClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-editor\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "toolbar",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-editor-toolbar\"",
                            "description": "Class name of the toolbar element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-editor-content\"",
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "fieldset": {
        "description": "Fieldset is a grouping component with the optional content toggle feature.\n\n[Live Demo](https://www.primevue.org/fieldset/)",
        "components": {
            "default": {
                "description": "Fieldset is a grouping component with the optional content toggle feature.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FieldsetPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FieldsetProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "FieldsetState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "FieldsetToggleEvent": {
                    "description": "Custom toggle event.",
                    "relatedProp": "FieldsetEmitsOptions.toggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Collapsed state as a boolean"
                        }
                    ],
                    "methods": []
                },
                "FieldsetPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "FieldsetProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "legend",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the legend's DOM element."
                        },
                        {
                            "name": "toggleButton",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toggle button's DOM element."
                        },
                        {
                            "name": "toggleIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toggle icon's DOM element."
                        },
                        {
                            "name": "legendLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the legend label's DOM element."
                        },
                        {
                            "name": "contentContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content container's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "FieldsetPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "FieldsetState": {
                    "description": "Defines current inline state in Fieldset component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_collapsed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current collapsed state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "FieldsetProps": {
                    "description": "Defines valid properties in Fieldset component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "legend",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header text of the fieldset."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, content can toggled by clicking the legend."
                        },
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the default visibility state of the content."
                        },
                        {
                            "name": "toggleButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "AnchorHTMLAttributes",
                            "default": "",
                            "description": "Used to pass the custom value to read for the AnchorHTMLAttributes inside the component."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<FieldsetPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "FieldsetSlots": {
                    "description": "Defines valid slots in Fieldset slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [
                        {
                            "name": "legend",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Toggle function.</span>\n}",
                                    "description": "legend slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom legend template."
                        },
                        {
                            "name": "togglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">collapsed</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Collapsed state as a boolean</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use the 'toggleicon' slot instead.\nCustom toggler icon template."
                        },
                        {
                            "name": "toggleicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">collapsed</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Collapsed state as a boolean</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom toggler icon template."
                        }
                    ]
                },
                "FieldsetEmitsOptions": {
                    "description": "Defines valid emits in Fildset component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:collapsed",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the collapsed changes."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FieldsetToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded or collapsed."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FieldsetPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "FieldsetToggleEvent": {
                    "description": "Custom toggle event.",
                    "props": []
                },
                "FieldsetPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "FieldsetPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "FieldsetState": {
                    "description": "Defines current inline state in Fieldset component.",
                    "props": []
                },
                "FieldsetProps": {
                    "description": "Defines valid properties in Fieldset component.",
                    "props": []
                },
                "FieldsetSlots": {
                    "description": "Defines valid slots in Fieldset slots.",
                    "props": []
                },
                "FieldsetEmitsOptions": {
                    "description": "Defines valid emits in Fildset component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FieldsetPassThroughOptionType": {
                    "values": "FieldsetPassThroughAttributes | (options: FieldsetPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "FieldsetPassThroughTransitionType": {
                    "values": "TransitionProps | (options: FieldsetPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "FieldsetEmits": {
                    "values": "EmitFn<FieldsetEmitsOptions>"
                }
            }
        }
    },
    "fieldsetstyle": {
        "description": "Fieldset is a grouping component with the optional content toggle feature.\n\n[Live Demo](https://www.primevue.org/fieldset/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FieldsetStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FieldsetStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "FieldsetClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fieldset\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "legend",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fieldset-legend\"",
                            "description": "Class name of the legend element"
                        },
                        {
                            "name": "legendLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fieldset-legend-label\"",
                            "description": "Class name of the legend label element"
                        },
                        {
                            "name": "toggleIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fieldset-toggle-icon\"",
                            "description": "Class name of the toggle icon element"
                        },
                        {
                            "name": "contentContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fieldset-content-container\"",
                            "description": "Class name of the content container element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fieldset-content\"",
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "fileupload": {
        "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.\n\n[Live Demo](https://www.primevue.org/fileupload/)",
        "components": {
            "default": {
                "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FileUploadPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FileUploadProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "FileUploadState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "FileUploadSelectEvent": {
                    "description": "Custom select event.",
                    "relatedProp": "FileUploadEmitsOptions.select",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "List of selected files."
                        }
                    ],
                    "methods": []
                },
                "FileUploadBeforeUploadEvent": {
                    "description": "Custom before upload event.",
                    "relatedProp": "FileUploadEmitsOptions['before-upload']",
                    "props": [
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        },
                        {
                            "name": "formData",
                            "optional": false,
                            "readonly": false,
                            "type": "FormData",
                            "default": "",
                            "description": "FormData object."
                        }
                    ],
                    "methods": []
                },
                "FileUploadProgressEvent": {
                    "description": "Custom progress event.",
                    "relatedProp": "FileUploadEmitsOptions.progress",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "progress",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Calculated progress value."
                        }
                    ],
                    "methods": []
                },
                "FileUploadUploadEvent": {
                    "description": "Custom upload event.",
                    "relatedProp": "FileUploadEmitsOptions.upload",
                    "props": [
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File | File[]",
                            "default": "",
                            "description": "Files that are not uploaded."
                        }
                    ],
                    "methods": []
                },
                "FileUploadUploaderEvent": {
                    "description": "Custom uploader event.",
                    "relatedProp": "FileUploadEmitsOptions.uploader",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File | File[]",
                            "default": "",
                            "description": "List of selected files."
                        }
                    ],
                    "methods": []
                },
                "FileUploadErrorEvent": {
                    "description": "Custom error event.",
                    "relatedProp": "FileUploadEmitsOptions.error",
                    "props": [
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File | File[]",
                            "default": "",
                            "description": "Files that are not uploaded."
                        }
                    ],
                    "methods": []
                },
                "FileUploadBeforeSendEvent": {
                    "description": "Custom before send event.",
                    "relatedProp": "FileUploadEmitsOptions['before-send']",
                    "props": [
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        },
                        {
                            "name": "formData",
                            "optional": false,
                            "readonly": false,
                            "type": "FormData",
                            "default": "",
                            "description": "FormData object."
                        }
                    ],
                    "methods": []
                },
                "FileUploadRemoveEvent": {
                    "description": "Custom remove event.",
                    "relatedProp": "FileUploadEmitsOptions.remove",
                    "props": [
                        {
                            "name": "file",
                            "optional": false,
                            "readonly": false,
                            "type": "File",
                            "default": "",
                            "description": "Removed file."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "default": "",
                            "description": "Remaining files to be uploaded."
                        }
                    ],
                    "methods": []
                },
                "FileUploadRemoveUploadedFile": {
                    "description": "Custom remove upload file event.",
                    "relatedProp": "FileUploadEmitsOptions['remove-uploaded-file']",
                    "props": [
                        {
                            "name": "file",
                            "optional": false,
                            "readonly": false,
                            "type": "File",
                            "default": "",
                            "description": "Removed file."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "default": "",
                            "description": "Remaining files to be uploaded."
                        }
                    ],
                    "methods": []
                },
                "FileUploadPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "FileUploadProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "pcChooseButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the choose Button component."
                        },
                        {
                            "name": "pcUploadButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the upload Button component."
                        },
                        {
                            "name": "pcCancelButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the cancel Button component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "pcProgressBar",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the ProgressBar component."
                        },
                        {
                            "name": "pcMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the message's DOM element."
                        },
                        {
                            "name": "file",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the file's DOM element."
                        },
                        {
                            "name": "fileThumbnail",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the file thumbnail's DOM element."
                        },
                        {
                            "name": "fileInfo",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the file info's DOM element."
                        },
                        {
                            "name": "fileName",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the fileName's DOM element."
                        },
                        {
                            "name": "fileSize",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the fileSize's DOM element."
                        },
                        {
                            "name": "pcFileBadge",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Badge component."
                        },
                        {
                            "name": "fileActions",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the file actions' DOM element."
                        },
                        {
                            "name": "pcFileRemoveButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the file remove button's DOM element."
                        },
                        {
                            "name": "empty",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "FileUploadPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "FileUploadState": {
                    "description": "Defines current inline state in FileUpload component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "uploadedFileCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Current uploaded file count state as a number."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current files."
                        },
                        {
                            "name": "messages",
                            "optional": false,
                            "readonly": false,
                            "type": "null | string[]",
                            "default": "",
                            "description": "Current messages."
                        },
                        {
                            "name": "progress",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current progress state as a number."
                        },
                        {
                            "name": "uploadedFiles",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current uploaded files."
                        }
                    ],
                    "methods": []
                },
                "FileUploadProps": {
                    "description": "Defines valid properties in FileUpload component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the request parameter to identify the files at backend."
                        },
                        {
                            "name": "url",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Remote url to upload the files."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"advanced\" | \"basic\"",
                            "default": "advanced",
                            "description": "Defines the UI of the component, possible values are 'advanced' and 'basic'."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to select multiple files at once from file dialog."
                        },
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Pattern to restrict the allowed file types such as 'image/*'."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Disables the upload functionality."
                        },
                        {
                            "name": "auto",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, upload begins automatically after selection is completed."
                        },
                        {
                            "name": "maxFileSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum file size allowed in bytes."
                        },
                        {
                            "name": "invalidFileSizeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ": Invalid file size, file size should be smaller than {1.}",
                            "description": "Message of the invalid fize size."
                        },
                        {
                            "name": "invalidFileLimitMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Maximum number of files to be uploaded is {0.}",
                            "description": "Message to display when number of files to be uploaded exceeeds the limit."
                        },
                        {
                            "name": "invalidFileTypeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0}: Invalid file type.'",
                            "description": "Message of the invalid fize type."
                        },
                        {
                            "name": "fileLimit",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of files that can be uploaded."
                        },
                        {
                            "name": "withCredentials",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates."
                        },
                        {
                            "name": "previewWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "50",
                            "description": "Width of the image thumbnail in pixels."
                        },
                        {
                            "name": "chooseLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the choose button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "uploadLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the upload button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "cancelLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Cancel",
                            "description": "Label of the cancel button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "customUpload",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to use the default upload or a manual implementation defined in uploadHandler callback. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "showUploadButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the upload button."
                        },
                        {
                            "name": "showCancelButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the cancel button."
                        },
                        {
                            "name": "chooseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the choose button."
                        },
                        {
                            "name": "uploadIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the upload button."
                        },
                        {
                            "name": "cancelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the cancel button."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "chooseButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "null",
                            "description": "Used to pass all properties of the ButtonProps to the choose button inside the component."
                        },
                        {
                            "name": "uploadButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the upload button inside the component."
                        },
                        {
                            "name": "cancelButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the cancel button inside the component."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<FileUploadPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "FileUploadSlots": {
                    "description": "Defines valid slots in FileUpload slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">files</span>: <span class=\"doc-option-parameter-type\">File</span>, <span class=\"doc-option-parameter-type\">// Files to upload.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">uploadedFiles</span>: <span class=\"doc-option-parameter-type\">File</span>, <span class=\"doc-option-parameter-type\">// Uploaded files.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">chooseCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Choose function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">uploadCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Upload function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">clearCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Clear function</span>\n}",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header content template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">files</span>: <span class=\"doc-option-parameter-type\">File</span>, <span class=\"doc-option-parameter-type\">// Files to upload.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">uploadedFiles</span>: <span class=\"doc-option-parameter-type\">File</span>, <span class=\"doc-option-parameter-type\">// Uploaded files.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">removeUploadedFileCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Function to remove an uploaded file.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">removeFileCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Function to remove a file.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">progress</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Uploaded progress as number.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">messages</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Status messages about upload process.</span>\n }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom uploaded content template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content when there is no selected file."
                        },
                        {
                            "name": "chooseicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom choose icon template."
                        },
                        {
                            "name": "uploadicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom upload icon template."
                        },
                        {
                            "name": "cancelicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom cancel icon template."
                        },
                        {
                            "name": "fileremoveicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">file</span>: <span class=\"doc-option-parameter-type\">File</span>, <span class=\"doc-option-parameter-type\">// File to upload.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// The index of file</span>\n }",
                                    "description": "fileremoveicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom remove icon template for each file."
                        },
                        {
                            "name": "filelabel",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">files</span>: <span class=\"doc-option-parameter-type\">File</span>, <span class=\"doc-option-parameter-type\">// File to upload.</span>\n }",
                                    "description": "filelabel slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom file label template."
                        }
                    ]
                },
                "FileUploadEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when files are selected."
                        },
                        {
                            "name": "before-upload",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadBeforeUploadEvent",
                                    "description": "Custom before upload event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before file upload begins to customize the request such as post parameters before the files."
                        },
                        {
                            "name": "progress",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadProgressEvent",
                                    "description": "Custom progress event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when files are being uploaded."
                        },
                        {
                            "name": "upload",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadUploadEvent",
                                    "description": "Custom upload event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when file upload is complete."
                        },
                        {
                            "name": "uploader",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadUploaderEvent",
                                    "description": "Custom uploader event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to implement a custom upload."
                        },
                        {
                            "name": "error",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadErrorEvent",
                                    "description": "Custom error event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke if file upload fails."
                        },
                        {
                            "name": "before-send",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadBeforeSendEvent",
                                    "description": "Custom before send event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before file send begins to customize the request such as adding headers."
                        },
                        {
                            "name": "clear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when files in queue are removed without uploading."
                        },
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadRemoveEvent",
                                    "description": "Custom remove event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a singe file is removed from the list."
                        },
                        {
                            "name": "removeUploadedFile",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadRemoveUploadedFile",
                                    "description": "Custom uploaded file remove event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a single uploaded file is removed from the uploaded file list."
                        }
                    ]
                },
                "FileUploadMethods": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "upload",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Upload file."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FileUploadPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "FileUploadSelectEvent": {
                    "description": "Custom select event.",
                    "props": []
                },
                "FileUploadBeforeUploadEvent": {
                    "description": "Custom before upload event.",
                    "props": []
                },
                "FileUploadProgressEvent": {
                    "description": "Custom progress event.",
                    "props": []
                },
                "FileUploadUploadEvent": {
                    "description": "Custom upload event.",
                    "props": []
                },
                "FileUploadUploaderEvent": {
                    "description": "Custom uploader event.",
                    "props": []
                },
                "FileUploadErrorEvent": {
                    "description": "Custom error event.",
                    "props": []
                },
                "FileUploadBeforeSendEvent": {
                    "description": "Custom before send event.",
                    "props": []
                },
                "FileUploadRemoveEvent": {
                    "description": "Custom remove event.",
                    "props": []
                },
                "FileUploadRemoveUploadedFile": {
                    "description": "Custom remove upload file event.",
                    "props": []
                },
                "FileUploadPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "FileUploadPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "FileUploadState": {
                    "description": "Defines current inline state in FileUpload component.",
                    "props": []
                },
                "FileUploadProps": {
                    "description": "Defines valid properties in FileUpload component.",
                    "props": []
                },
                "FileUploadSlots": {
                    "description": "Defines valid slots in FileUpload slots.",
                    "props": []
                },
                "FileUploadEmitsOptions": {
                    "props": []
                },
                "FileUploadMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FileUploadPassThroughOptionType": {
                    "values": "FileUploadPassThroughAttributes | (options: FileUploadPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "FileUploadEmits": {
                    "values": "EmitFn<FileUploadEmitsOptions>"
                }
            }
        }
    },
    "fileuploadstyle": {
        "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.\n\n[Live Demo](https://www.primevue.org/fileupload/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FileUploadStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FileUploadStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "FileUploadClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "pcChooseButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-choose-button\"",
                            "description": "Class name of the choose button element"
                        },
                        {
                            "name": "pcUploadButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-upload-button\"",
                            "description": "Class name of the upload button element"
                        },
                        {
                            "name": "pcCancelButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-cancel-button\"",
                            "description": "Class name of the cancel button element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "fileList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-file-list\"",
                            "description": "Class name of the file list element"
                        },
                        {
                            "name": "file",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-file\"",
                            "description": "Class name of the file element"
                        },
                        {
                            "name": "fileThumbnail",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-file-thumbnail\"",
                            "description": "Class name of the file thumbnail element"
                        },
                        {
                            "name": "fileInfo",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-file-info\"",
                            "description": "Class name of the file info element"
                        },
                        {
                            "name": "fileName",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-file-name\"",
                            "description": "Class name of the file name element"
                        },
                        {
                            "name": "fileSize",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-file-size\"",
                            "description": "Class name of the file size element"
                        },
                        {
                            "name": "pcFileBadge",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-file-badge\"",
                            "description": "Class name of the file badge element"
                        },
                        {
                            "name": "fileActions",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-file-actions\"",
                            "description": "Class name of the file actions element"
                        },
                        {
                            "name": "pcFileRemoveButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fileupload-file-remove-button\"",
                            "description": "Class name of the file remove button element"
                        }
                    ]
                }
            }
        }
    },
    "floatlabel": {
        "description": "FloatLabel visually integrates a label with its form element.\n\n[Live Demo](https://www.primevue.org/floatlabel/)",
        "components": {
            "default": {
                "description": "FloatLabel visually integrates a label with its form element.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FloatLabelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FloatLabelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "FloatLabelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "FloatLabelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FloatLabelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "FloatLabelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "FloatLabelProps": {
                    "description": "Defines valid properties in FloatLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<FloatLabelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"on\" | \"in\" | \"over\"",
                            "default": "false",
                            "description": "Defines the positioning of the label relative to the input."
                        }
                    ],
                    "methods": []
                },
                "FloatLabelSlots": {
                    "description": "Defines valid slots in FloatLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "FloatLabelEmitsOptions": {
                    "description": "Defines valid emits in FloatLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FloatLabelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "FloatLabelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "FloatLabelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "FloatLabelProps": {
                    "description": "Defines valid properties in FloatLabel component.",
                    "props": []
                },
                "FloatLabelSlots": {
                    "description": "Defines valid slots in FloatLabel component.",
                    "props": []
                },
                "FloatLabelEmitsOptions": {
                    "description": "Defines valid emits in FloatLabel component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FloatLabelPassThroughOptionType": {
                    "values": "FloatLabelPassThroughAttributes | (options: FloatLabelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "FloatLabelPassThroughTransitionType": {
                    "values": "TransitionProps | (options: FloatLabelPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "FloatLabelEmits": {
                    "values": "EmitFn<FloatLabelEmitsOptions>"
                }
            }
        }
    },
    "floatlabelstyle": {
        "description": "FloatLabel visually integrates a label with its form element.\n\n[Live Demo](https://www.primevue.org/floatlabel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FloatLabelStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FloatLabelStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "FloatLabelClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-floatlabel\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "fluid": {
        "description": "Fluid is a layout component to make descendant components span full width of their container.\n\n[Live Demo](https://www.primevue.org/fluid/)",
        "components": {
            "default": {
                "description": "Fluid is a layout component to make descendant components span full width of their container.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FluidPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FluidProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "FluidPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "FluidProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FluidPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "FluidPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "FluidProps": {
                    "description": "Defines valid properties in Fluid component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<FluidPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "FluidSlots": {
                    "description": "Defines valid slots in Fluid component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "FluidEmitsOptions": {
                    "description": "Defines valid emits in Fluid component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FluidPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "FluidPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "FluidPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "FluidProps": {
                    "description": "Defines valid properties in Fluid component.",
                    "props": []
                },
                "FluidSlots": {
                    "description": "Defines valid slots in Fluid component.",
                    "props": []
                },
                "FluidEmitsOptions": {
                    "description": "Defines valid emits in Fluid component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FluidPassThroughOptionType": {
                    "values": "FluidPassThroughAttributes | (options: FluidPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "FluidPassThroughTransitionType": {
                    "values": "TransitionProps | (options: FluidPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "FluidEmits": {
                    "values": "EmitFn<FluidEmitsOptions>"
                }
            }
        }
    },
    "fluidstyle": {
        "description": "Fluid is a layout component to make descendant components span full width of their container.\n\n[Live Demo](https://www.primevue.org/fluid/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FluidStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FluidStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "FluidClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-fluid\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "focustrap": {
        "description": "Focus Trap keeps focus within a certain DOM element while tabbing.\n\n[Live Demo](https://primevue.org/focustrap)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FocusTrapOptions": {
                    "description": "Defines options of FocusTrap.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the directive should be disabled."
                        },
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When disabled, focustrap will not focus by default."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<FocusTrapDirectivePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "FocusTrapDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "FocusTrapOptions.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FocusTrapDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "firstFocusableElement",
                            "optional": true,
                            "readonly": false,
                            "type": "FocusTrapDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the first focusable element's DOM element."
                        },
                        {
                            "name": "lastFocusableElement",
                            "optional": true,
                            "readonly": false,
                            "type": "FocusTrapDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the last focusable element's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "FocusTrapDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "FocusTrapDirectiveBinding": {
                    "description": "Binding of FocusTrap directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "null | ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, \"\", Object, any> | Record<string, any>",
                            "default": ""
                        },
                        {
                            "name": "oldValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "arg",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dir",
                            "optional": false,
                            "readonly": false,
                            "type": "ObjectDirective<any, any, string, string>",
                            "default": ""
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "FocusTrapOptions",
                            "default": "",
                            "description": "Value of the FocusTrap."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FocusTrapOptions": {
                    "description": "Defines options of FocusTrap.",
                    "props": []
                },
                "FocusTrapDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "FocusTrapDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "FocusTrapDirectiveBinding": {
                    "description": "Binding of FocusTrap directive.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FocusTrapDirectivePassThroughOptionType": {
                    "values": "FocusTrapDirectivePassThroughAttributes | null | undefined"
                }
            }
        }
    },
    "focustrapstyle": {
        "description": "Focus Trap keeps focus within a certain DOM element while tabbing.\n\n[Live Demo](https://primevue.org/focustrap)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FocusTrapStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "FocusTrapStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "FocusTrapClasses": {
                    "members": []
                }
            }
        }
    },
    "galleria": {
        "description": "Galleria is an advanced content gallery component.\n\n[Live Demo](https://www.primevue.org/galleria/)",
        "components": {
            "default": {
                "description": "Galleria is an advanced content gallery component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "GalleriaPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "GalleriaProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "GalleriaState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "GalleriaContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "GalleriaResponsiveOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Breakpoint for responsive mode. Exp;"
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of visible items on breakpoint."
                        }
                    ],
                    "methods": []
                },
                "GalleriaPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "GalleriaProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close icon's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "itemsContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item container's DOM element."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the items' DOM element."
                        },
                        {
                            "name": "prevButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous item button's DOM element."
                        },
                        {
                            "name": "prevIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous item icon's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "nextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next item button's DOM element."
                        },
                        {
                            "name": "nextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next item icon's DOM element."
                        },
                        {
                            "name": "caption",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the caption's DOM element."
                        },
                        {
                            "name": "indicatorList",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicator list's DOM element."
                        },
                        {
                            "name": "indicator",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicator's DOM element."
                        },
                        {
                            "name": "indicatorButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicator button's DOM element."
                        },
                        {
                            "name": "thumbnails",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnails' DOM element."
                        },
                        {
                            "name": "thumbnailContent",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnail content's DOM element."
                        },
                        {
                            "name": "thumbnailPrevButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous thumbnail button's DOM element."
                        },
                        {
                            "name": "thumbnailPrevIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous thumbnail icon's DOM element."
                        },
                        {
                            "name": "thumbnailsViewport",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnails viewport's DOM element."
                        },
                        {
                            "name": "thumbnailItems",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnail items' DOM element."
                        },
                        {
                            "name": "thumbnailItem",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnail item's DOM element."
                        },
                        {
                            "name": "thumbnail",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnail's DOM element."
                        },
                        {
                            "name": "thumbnailNextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next thumbnail button's DOM element."
                        },
                        {
                            "name": "thumbnailNextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next thumbnail icon's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "GalleriaPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "GalleriaState": {
                    "description": "Defines current inline state in Galleria component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "containerVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current container visible state as a boolean."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style id of the component."
                        },
                        {
                            "name": "activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item as a number."
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "3",
                            "description": "Number of items per page as a number."
                        },
                        {
                            "name": "slideShowActive",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current slide active state as a boolean."
                        },
                        {
                            "name": "d_numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "3",
                            "description": "Number of items per page as a number."
                        },
                        {
                            "name": "d_oldNumVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "3",
                            "description": "Old number of items per page as a number."
                        },
                        {
                            "name": "d_activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Current active item index as a number."
                        },
                        {
                            "name": "d_oldActiveItemIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "The previous active item index as a number."
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "totalShiftedItems",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Total shifted items' count as a number."
                        }
                    ],
                    "methods": []
                },
                "GalleriaContext": {
                    "description": "Defines current inline options in Galleria component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "highlighted",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current highlighted state of the indicator as a boolean."
                        }
                    ],
                    "methods": []
                },
                "GalleriaProps": {
                    "description": "Defines valid properties in Galleria component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "fullScreen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display the component on fullscreen."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the mask on fullscreen mode."
                        },
                        {
                            "name": "numVisible",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "3",
                            "description": "Number of items per page."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaResponsiveOptions[]",
                            "default": "",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "showItemNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display navigation buttons in item section."
                        },
                        {
                            "name": "showThumbnailNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in thumbnail container."
                        },
                        {
                            "name": "showItemNavigatorsOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display navigation buttons on item hover."
                        },
                        {
                            "name": "changeItemOnIndicatorHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, item is changed on indicator hover."
                        },
                        {
                            "name": "circular",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite."
                        },
                        {
                            "name": "autoPlay",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Items are displayed with a slideshow in autoPlay mode."
                        },
                        {
                            "name": "transitionInterval",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4000",
                            "description": "Time in milliseconds to scroll items."
                        },
                        {
                            "name": "showThumbnails",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display thumbnail container."
                        },
                        {
                            "name": "thumbnailsPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of thumbnails."
                        },
                        {
                            "name": "verticalThumbnailViewPortHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "300px",
                            "description": "Height of the viewport in vertical thumbnail."
                        },
                        {
                            "name": "showIndicators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display indicator container."
                        },
                        {
                            "name": "showIndicatorsOnItem",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, indicator container is displayed on item container."
                        },
                        {
                            "name": "indicatorsPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of indicators."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "maskClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the mask on fullscreen mode."
                        },
                        {
                            "name": "containerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component on fullscreen mode. Otherwise, the 'style' property can be used."
                        },
                        {
                            "name": "containerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component on fullscreen mode. Otherwise, the 'class' property can be used."
                        },
                        {
                            "name": "containerProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the container element on fullscreen mode."
                        },
                        {
                            "name": "prevButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the previous navigation button."
                        },
                        {
                            "name": "nextButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the next navigation button."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaRoledescription",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that description for the role of the component."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<GalleriaPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "GalleriaSlots": {
                    "description": "Defines valid slots in Galleria slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item instance</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "caption",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item instance</span>\n }",
                                    "description": "caption slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom caption template."
                        },
                        {
                            "name": "indicator",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the indicator item</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">activeIndex</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Current active item index as a number.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">tabindex</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the element in tabbing order.</span>\n }",
                                    "description": "indicator slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        },
                        {
                            "name": "thumbnail",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item instance</span>\n }",
                                    "description": "thumbnail slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom thumbnail template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "previousitemicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom navigator previous item icon template."
                        },
                        {
                            "name": "nextitemicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom navigator next item icon template."
                        },
                        {
                            "name": "previousthumbnailicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom thumbnail previous icon template."
                        },
                        {
                            "name": "nextthumbnailicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom thumbnail next item template."
                        }
                    ]
                },
                "GalleriaEmitsOptions": {
                    "description": "Defines valid emits in Galleria component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:activeIndex",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "Index of new active item."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the active index changes."
                        },
                        {
                            "name": "update:visible",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the visible changes."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "GalleriaPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "GalleriaResponsiveOptions": {
                    "props": []
                },
                "GalleriaPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "GalleriaPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "GalleriaState": {
                    "description": "Defines current inline state in Galleria component.",
                    "props": []
                },
                "GalleriaContext": {
                    "description": "Defines current inline options in Galleria component.",
                    "props": []
                },
                "GalleriaProps": {
                    "description": "Defines valid properties in Galleria component.",
                    "props": []
                },
                "GalleriaSlots": {
                    "description": "Defines valid slots in Galleria slots.",
                    "props": []
                },
                "GalleriaEmitsOptions": {
                    "description": "Defines valid emits in Galleria component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "GalleriaPassThroughOptionType": {
                    "values": "GalleriaPassThroughAttributes | (options: GalleriaPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "GalleriaPassThroughTransitionType": {
                    "values": "TransitionProps | (options: GalleriaPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "GalleriaEmits": {
                    "values": "EmitFn<GalleriaEmitsOptions>"
                }
            }
        }
    },
    "galleriastyle": {
        "description": "Galleria is an advanced content gallery component.\n\n[Live Demo](https://www.primevue.org/galleria/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "GalleriaStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "GalleriaStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "GalleriaClasses": {
                    "members": [
                        {
                            "name": "mask",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-mask\"",
                            "description": "Class name of the mask element"
                        },
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "closeButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-close-button\"",
                            "description": "Class name of the close button element"
                        },
                        {
                            "name": "closeIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-close-icon\"",
                            "description": "Class name of the close icon element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "footer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-footer\"",
                            "description": "Class name of the footer element"
                        },
                        {
                            "name": "itemsContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-items-container\"",
                            "description": "Class name of the items container element"
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-items\"",
                            "description": "Class name of the items element"
                        },
                        {
                            "name": "prevButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-prev-button\"",
                            "description": "Class name of the previous item button element"
                        },
                        {
                            "name": "prevIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-prev-icon\"",
                            "description": "Class name of the previous item icon element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "nextButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-next-button\"",
                            "description": "Class name of the next item button element"
                        },
                        {
                            "name": "nextIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-next-icon\"",
                            "description": "Class name of the next item icon element"
                        },
                        {
                            "name": "caption",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-caption\"",
                            "description": "Class name of the caption element"
                        },
                        {
                            "name": "indicatorList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-indicator-list\"",
                            "description": "Class name of the indicator list element"
                        },
                        {
                            "name": "indicator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-indicator\"",
                            "description": "Class name of the indicator element"
                        },
                        {
                            "name": "indicatorButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-indicator-button\"",
                            "description": "Class name of the indicator button element"
                        },
                        {
                            "name": "thumbnails",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-thumbnails\"",
                            "description": "Class name of the thumbnails element"
                        },
                        {
                            "name": "thumbnailContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-thumbnails-content\"",
                            "description": "Class name of the thumbnail content element"
                        },
                        {
                            "name": "previousThumbnailButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-thumbnail-prev-button\"",
                            "description": "Class name of the previous thumbnail button element"
                        },
                        {
                            "name": "previousThumbnailIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-thumbnail-prev-icon\"",
                            "description": "Class name of the previous thumbnail icon element"
                        },
                        {
                            "name": "thumbnailsViewport",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-thumbnails-viewport\"",
                            "description": "Class name of the thumbnails viewport element"
                        },
                        {
                            "name": "thumbnailItems",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-thumbnail-items\"",
                            "description": "Class name of the thumbnail items element"
                        },
                        {
                            "name": "thumbnailItem",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-thumbnail-item\"",
                            "description": "Class name of the thumbnail item element"
                        },
                        {
                            "name": "thumbnail",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-thumbnail\"",
                            "description": "Class name of the thumbnail element"
                        },
                        {
                            "name": "nextThumbnailButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-thumbnail-next-button\"",
                            "description": "Class name of the next thumbnail button element"
                        },
                        {
                            "name": "nextThumbnailIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-galleria-thumbnail-next-icon\"",
                            "description": "Class name of the next thumbnail icon element"
                        }
                    ]
                }
            }
        }
    },
    "iconfield": {
        "description": "IconField wraps an input and an icon.\n\n[Live Demo](https://www.primevue.org/iconfield/)",
        "components": {
            "default": {
                "description": "IconField is used to select a boolean value.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "IconFieldPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "IconFieldProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "IconFieldPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "IconFieldProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "IconFieldPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "IconFieldPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "IconFieldProps": {
                    "description": "Defines valid properties in IconField component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<IconFieldPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "IconFieldSlots": {
                    "description": "Defines valid slots in IconField component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot for content."
                        }
                    ]
                },
                "IconFieldEmitsOptions": {
                    "description": "Defines valid emits in IconField component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "IconFieldPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "IconFieldPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "IconFieldPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "IconFieldProps": {
                    "description": "Defines valid properties in IconField component.",
                    "props": []
                },
                "IconFieldSlots": {
                    "description": "Defines valid slots in IconField component.",
                    "props": []
                },
                "IconFieldEmitsOptions": {
                    "description": "Defines valid emits in IconField component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "IconFieldPassThroughOptionType": {
                    "values": "IconFieldPassThroughAttributes | (options: IconFieldPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "IconFieldEmits": {
                    "values": "EmitFn<IconFieldEmitsOptions>"
                }
            }
        }
    },
    "iconfieldstyle": {
        "description": "IconField wraps an input and an icon.\n\n[Live Demo](https://www.primevue.org/inputtext/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "IconFieldStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "IconFieldStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "IconFieldClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-iconfield\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "iftalabel": {
        "description": "IftaLabel visually integrates a label within its form element.\n\n[Live Demo](https://www.primevue.org/iftalabel/)",
        "components": {
            "default": {
                "description": "IftaLabel visually integrates a label within its form element.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "IftaLabelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "IftaLabelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "IftaLabelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "IftaLabelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "IftaLabelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "IftaLabelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "IftaLabelProps": {
                    "description": "Defines valid properties in IftaLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<IftaLabelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "IftaLabelSlots": {
                    "description": "Defines valid slots in IftaLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "IftaLabelEmitsOptions": {
                    "description": "Defines valid emits in IftaLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "IftaLabelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "IftaLabelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "IftaLabelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "IftaLabelProps": {
                    "description": "Defines valid properties in IftaLabel component.",
                    "props": []
                },
                "IftaLabelSlots": {
                    "description": "Defines valid slots in IftaLabel component.",
                    "props": []
                },
                "IftaLabelEmitsOptions": {
                    "description": "Defines valid emits in IftaLabel component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "IftaLabelPassThroughOptionType": {
                    "values": "IftaLabelPassThroughAttributes | (options: IftaLabelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "IftaLabelPassThroughTransitionType": {
                    "values": "TransitionProps | (options: IftaLabelPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "IftaLabelEmits": {
                    "values": "EmitFn<IftaLabelEmitsOptions>"
                }
            }
        }
    },
    "iftalabelstyle": {
        "description": "IftaLabel visually integrates a label within its form element.\n\n[Live Demo](https://www.primevue.org/iftalabel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "IftaLabelStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "IftaLabelStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "IftaLabelClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-iftalabel\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "image": {
        "description": "Displays an image with preview and tranformation options. For multiple image, see Galleria.\n\n[Live Demo](https://www.primevue.org/image/)",
        "components": {
            "default": {
                "description": "Displays an image with preview and tranformation options. For multiple image, see Galleria.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ImagePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ImageProps",
                            "default": "",
                            "description": "ˆ\nDefines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ImageState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ImagePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ImageProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the image's DOM element."
                        },
                        {
                            "name": "previewMask",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the preview mask's DOM element."
                        },
                        {
                            "name": "previewIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the  preview icon's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "toolbar",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toolbar's DOM element."
                        },
                        {
                            "name": "rotateRightButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rotate right button's DOM element."
                        },
                        {
                            "name": "rotateRightIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rotate right icon's DOM element."
                        },
                        {
                            "name": "rotateLeftButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rotate left button's DOM element."
                        },
                        {
                            "name": "rotateLeftIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rotate left icon's DOM element."
                        },
                        {
                            "name": "zoomOutButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the zoom out button's DOM element."
                        },
                        {
                            "name": "zoomOutIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the zoom out icon's DOM element."
                        },
                        {
                            "name": "zoomInButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the zoom in button's DOM element."
                        },
                        {
                            "name": "zoomInIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the zoom in icon's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close icon's DOM element."
                        },
                        {
                            "name": "originalContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the original container's DOM element."
                        },
                        {
                            "name": "original",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the original's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ImagePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ImageState": {
                    "description": "Defines current inline state in Image component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "maskVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Mask visible state as a boolean."
                        },
                        {
                            "name": "previewVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Preview visible state as a boolean."
                        },
                        {
                            "name": "rotate",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Rotate state as a number."
                        },
                        {
                            "name": "scale",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Scale state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ImageProps": {
                    "description": "Defines valid properties in Image component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "src",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Image url."
                        },
                        {
                            "name": "preview",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Controls the preview functionality."
                        },
                        {
                            "name": "imageStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the image element."
                        },
                        {
                            "name": "imageClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the image element."
                        },
                        {
                            "name": "indicatorIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Custom indicator icon.",
                            "deprecated": "since v4.0. Use 'previewIcon' prop instead."
                        },
                        {
                            "name": "previewIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Custom indicator icon."
                        },
                        {
                            "name": "zoomInDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Disable the zoom-in button"
                        },
                        {
                            "name": "zoomOutDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Disable the zoom-out button"
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ImagePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ImageSlots": {
                    "description": "Defines valid slots in Image slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "previewicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        },
                        {
                            "name": "indicatoricon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'previewicon' slot instead.\nCustom indicator template."
                        },
                        {
                            "name": "refresh",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom refresh template."
                        },
                        {
                            "name": "undo",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom undo template."
                        },
                        {
                            "name": "zoomout",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom zoomout template."
                        },
                        {
                            "name": "zoomin",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom zoomin template."
                        },
                        {
                            "name": "close",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close template."
                        },
                        {
                            "name": "image",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the image element.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">style</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style of the image element.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">errorCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Preview click function.</span>\n}",
                                    "description": "image slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom image template."
                        },
                        {
                            "name": "preview",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the preview image element.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">style</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style of the preview image element.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">previewCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Preview click function.</span>\n}",
                                    "description": "preview slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. use 'original' slot instead.\nCustom preview template."
                        },
                        {
                            "name": "original",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the original image element.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">style</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style of the original image element.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">previewCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Preview click function.</span>\n}",
                                    "description": "original slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom original template."
                        }
                    ]
                },
                "ImageEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ImageMethods": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when the preview overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when the preview overlay is hidden."
                        },
                        {
                            "name": "error",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when an error occurs while loading an image file."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ImagePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ImagePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ImagePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ImageState": {
                    "description": "Defines current inline state in Image component.",
                    "props": []
                },
                "ImageProps": {
                    "description": "Defines valid properties in Image component.",
                    "props": []
                },
                "ImageSlots": {
                    "description": "Defines valid slots in Image slots.",
                    "props": []
                },
                "ImageEmitsOptions": {
                    "props": []
                },
                "ImageMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ImagePassThroughOptionType": {
                    "values": "ImagePassThroughAttributes | (options: ImagePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ImagePassThroughTransitionType": {
                    "values": "TransitionProps | (options: ImagePassThroughMethodOptions) => TransitionProps | undefined"
                },
                "ImageEmits": {
                    "values": "EmitFn<ImageEmitsOptions>"
                }
            }
        }
    },
    "imagestyle": {
        "description": "Displays an image with preview and tranformation options. For multiple image, see Galleria.\n\n[Live Demo](https://www.primevue.org/image/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ImageStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ImageStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ImageClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-image\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "previewMask",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-image-preview-mask\"",
                            "description": "Class name of the preview mask element"
                        },
                        {
                            "name": "previewIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-image-preview-icon\"",
                            "description": "Class name of the preview icon element"
                        },
                        {
                            "name": "mask",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-image-mask\"",
                            "description": "Class name of the mask element"
                        },
                        {
                            "name": "toolbar",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-image-toolbar\"",
                            "description": "Class name of the toolbar element"
                        },
                        {
                            "name": "rotateRightButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-image-rotate-right-button\"",
                            "description": "Class name of the rotate right button element"
                        },
                        {
                            "name": "rotateLeftButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-image-rotate-left-button\"",
                            "description": "Class name of the rotate left button element"
                        },
                        {
                            "name": "zoomOutButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-image-zoom-out-button\"",
                            "description": "Class name of the zoom out button element"
                        },
                        {
                            "name": "zoomInButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-image-zoom-in-button\"",
                            "description": "Class name of the zoom in button element"
                        },
                        {
                            "name": "closeButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-image-close-button\"",
                            "description": "Class name of the close button element"
                        },
                        {
                            "name": "original",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-image-original\"",
                            "description": "Class name of the original element"
                        }
                    ]
                }
            }
        }
    },
    "imagecompare": {
        "description": "ImageCompare compares two images side by side with a slider.\n\n[Live Demo](https://www.primevue.org/imagecompare)",
        "components": {
            "default": {
                "description": "ImageCompare compares two images side by side with a slider.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ImageComparePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ImageCompareProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ImageComparePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ImageCompareProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ImageComparePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "slider",
                            "optional": true,
                            "readonly": false,
                            "type": "ImageComparePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the slider's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ImageComparePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ImageCompareProps": {
                    "description": "Defines valid properties in ImageCompare component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ImageComparePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ImageCompareSlots": {
                    "description": "Defines valid slots in ImageCompare component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "left",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom left template."
                        },
                        {
                            "name": "right",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom right template."
                        }
                    ]
                },
                "ImageCompareEmitsOptions": {
                    "description": "Defines valid emits in ImageCompare component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ImageComparePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ImageComparePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ImageComparePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ImageCompareProps": {
                    "description": "Defines valid properties in ImageCompare component.",
                    "props": []
                },
                "ImageCompareSlots": {
                    "description": "Defines valid slots in ImageCompare component.",
                    "props": []
                },
                "ImageCompareEmitsOptions": {
                    "description": "Defines valid emits in ImageCompare component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ImageComparePassThroughOptionType": {
                    "values": "ImageComparePassThroughAttributes | (options: ImageComparePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ImageCompareEmits": {
                    "values": "EmitFn<ImageCompareEmitsOptions>"
                }
            }
        }
    },
    "imagecomparestyle": {
        "description": "ImageCompare compares two images side by side with a slider.\n\n[Live Demo](https://www.primevue.org/imagecompare/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ImageCompareStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ImageCompareStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ImageCompareClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-imagecompare\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "slider",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-imagecompare-slider\"",
                            "description": "Class name of the slider element"
                        }
                    ]
                }
            }
        }
    },
    "primevue/src": {},
    "inlinemessage": {
        "description": "InlineMessage component is useful in cases where a single message needs to be displayed related to an element such as forms. It has one property, severity of the message.\n\n[Live Demo](https://www.primevue.org/inlinemessage/)",
        "components": {
            "default": {
                "description": "",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InlineMessagePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InlineMessageProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InlineMessageState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InlineMessagePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InlineMessageProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InlineMessagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "InlineMessagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "InlineMessagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the text's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InlineMessagePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InlineMessageState": {
                    "description": "Defines current inline state in InlineMessage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "InlineMessageProps": {
                    "description": "Defines valid properties in InlineMessage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"error\" | \"secondary\" | \"info\" | \"success\" | \"warn\" | \"contrast\">",
                            "default": "info",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Display a custom icon for the message."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InlineMessagePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InlineMessageSlots": {
                    "description": "Defines valid slots in InlineMessage slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default custom slot."
                        },
                        {
                            "name": "icon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message icon template."
                        }
                    ]
                },
                "InlineMessageEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InlineMessagePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "InlineMessagePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "InlineMessagePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "InlineMessageState": {
                    "description": "Defines current inline state in InlineMessage component.",
                    "props": []
                },
                "InlineMessageProps": {
                    "description": "Defines valid properties in InlineMessage component.",
                    "props": []
                },
                "InlineMessageSlots": {
                    "description": "Defines valid slots in InlineMessage slots.",
                    "props": []
                },
                "InlineMessageEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InlineMessagePassThroughOptionType": {
                    "values": "InlineMessagePassThroughAttributes | (options: InlineMessagePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "InlineMessageEmits": {
                    "values": "EmitFn<InlineMessageEmitsOptions>"
                }
            }
        }
    },
    "inlinemessagestyle": {
        "description": "InlineMessage component is useful in cases where a single message needs to be displayed related to an element such as forms. It has one property, severity of the message.\n\n[Live Demo](https://www.primevue.org/inlinemessage/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InlineMessageStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InlineMessageStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "InlineMessageClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inlinemessage\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inlinemessage-icon\"",
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "text",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inlinemessage-text\"",
                            "description": "Class name of the text element"
                        }
                    ]
                }
            }
        }
    },
    "inplace": {
        "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.\n\n[Live Demo](https://www.primevue.org/inplace)",
        "components": {
            "default": {
                "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplacePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InplaceSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "InplacePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InplaceProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the display's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InplacePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InplaceState": {
                    "description": "Defines current inline state in Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "InplaceProps": {
                    "description": "Defines valid properties in Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the content is displayed or not."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "displayProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to display container."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InplacePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InplaceSlots": {
                    "description": "Defines valid slots in Inplace component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "display",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom display template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close message function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        }
                    ]
                },
                "InplaceEmitsOptions": {
                    "description": "Defines valid emits in Inplace component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:active",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the active changes."
                        },
                        {
                            "name": "open",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when inplace is opened."
                        },
                        {
                            "name": "close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when inplace is closed."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InplacePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "InplaceSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "InplacePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "InplacePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "InplaceState": {
                    "description": "Defines current inline state in Inplace component.",
                    "props": []
                },
                "InplaceProps": {
                    "description": "Defines valid properties in Inplace component.",
                    "props": []
                },
                "InplaceSlots": {
                    "description": "Defines valid slots in Inplace component.",
                    "props": []
                },
                "InplaceEmitsOptions": {
                    "description": "Defines valid emits in Inplace component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InplacePassThroughOptionType": {
                    "values": "InplacePassThroughAttributes | (options: InplacePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "InplaceEmits": {
                    "values": "EmitFn<InplaceEmitsOptions>"
                }
            }
        }
    },
    "inplacestyle": {
        "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.\n\n[Live Demo](https://www.primevue.org/inplace)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InplaceStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "InplaceClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inplace\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "display",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inplace-display\"",
                            "description": "Class name of the display element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inplace-content\"",
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "inputchips": {
        "description": "InputChips groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/inputchips/)",
        "components": {
            "default": {
                "description": "InputChips is used to enter multiple values on an input field.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputChipsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputChipsProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputChipsState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputChipsSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputChipsProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputChipsState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "InputChipsAddEvent": {
                    "description": "Custom add event.",
                    "relatedProp": "InputChipsEmitsOptions.add",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Added/Removed item value."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "InputChipsRemoveEvent"
                },
                "InputChipsRemoveEvent": {
                    "description": "Custom remove event.",
                    "relatedProp": "InputChipsEmitsOptions.remove",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Added/Removed item value."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "InputChipsAddEvent"
                },
                "InputChipsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputChipsProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "InputChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "chipItem",
                            "optional": true,
                            "readonly": false,
                            "type": "InputChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the chip's DOM element."
                        },
                        {
                            "name": "pcChip",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Chip component."
                        },
                        {
                            "name": "chipIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "InputChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the chip icon's DOM element."
                        },
                        {
                            "name": "inputItem",
                            "optional": true,
                            "readonly": false,
                            "type": "InputChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input item's DOM element."
                        },
                        {
                            "name": "inputItemField",
                            "optional": true,
                            "readonly": false,
                            "type": "InputChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input item field's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputChipsPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputChipsState": {
                    "description": "Defines current inline state in InputChips component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "inputValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current input value as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current focused item index state as a number."
                        }
                    ],
                    "methods": []
                },
                "InputChipsProps": {
                    "description": "Defines valid properties in InputChips component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of entries allowed."
                        },
                        {
                            "name": "addOnBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to add an item when the input loses focus."
                        },
                        {
                            "name": "allowDuplicate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to allow duplicate values or not."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Separator char to add an item when pressed in addition to the enter key."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focus input to match a label defined for the inputchips."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in chip remove action."
                        },
                        {
                            "name": "chipIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in chip remove action."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"outlined\" | \"filled\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputChipsPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputChipsSlots": {
                    "description": "Defines valid slots in InputChips slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "chip",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n }",
                                    "description": "chip slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip template."
                        },
                        {
                            "name": "removetokenicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the token.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// chip icon function.</span>\n}",
                                    "description": "chip icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'chipicon' slot.\nCustom chip icon template."
                        },
                        {
                            "name": "chipicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the token.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// chip icon function.</span>\n}",
                                    "description": "chip icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip icon template."
                        }
                    ]
                },
                "InputChipsEmitsOptions": {
                    "description": "Defines valid emits in InputChips component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "add",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputChipsAddEvent",
                                    "description": "Custom add event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is added."
                        },
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputChipsRemoveEvent",
                                    "description": "Custom remove event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is removed."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputChipsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "InputChipsSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "InputChipsAddEvent": {
                    "description": "Custom add event.",
                    "props": []
                },
                "InputChipsRemoveEvent": {
                    "description": "Custom remove event.",
                    "props": []
                },
                "InputChipsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "InputChipsPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "InputChipsState": {
                    "description": "Defines current inline state in InputChips component.",
                    "props": []
                },
                "InputChipsProps": {
                    "description": "Defines valid properties in InputChips component.",
                    "props": []
                },
                "InputChipsSlots": {
                    "description": "Defines valid slots in InputChips slots.",
                    "props": []
                },
                "InputChipsEmitsOptions": {
                    "description": "Defines valid emits in InputChips component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputChipsPassThroughOptionType": {
                    "values": "InputChipsPassThroughAttributes | (options: InputChipsPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "InputChipsEmits": {
                    "values": "EmitFn<InputChipsEmitsOptions>"
                }
            }
        }
    },
    "inputchipsstyle": {
        "description": "InputChips groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/inputchips/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputChipsStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputChipsStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "InputChipsClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputchips\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "input",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputchips-input\"",
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "chipItem",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputchips-chip-item\"",
                            "description": "Class name of the chip item element"
                        },
                        {
                            "name": "pcChip",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputchips-chip-label\"",
                            "description": "Class name of the chip element"
                        },
                        {
                            "name": "chipIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputchips-chip-icon\"",
                            "description": "Class name of the chip icon element"
                        },
                        {
                            "name": "inputItem",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputchips-input-item\"",
                            "description": "Class name of the input item element"
                        }
                    ]
                }
            }
        }
    },
    "inputgroup": {
        "description": "InputGroup displays text, icon, buttons and other content can be grouped next to an input.\n\n[Live Demo](https://www.primevue.org/inputgroup/)",
        "components": {
            "default": {
                "description": "InputGroup displays text, icon, buttons and other content can be grouped next to an input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputGroupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputGroupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputGroupProps": {
                    "description": "Defines valid properties in InputGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputGroupSlots": {
                    "description": "Defines valid slots in InputGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom default template."
                        }
                    ]
                },
                "InputGroupEmitsOptions": {
                    "description": "Defines valid emits in InputGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "InputGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "InputGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "InputGroupProps": {
                    "description": "Defines valid properties in InputGroup component.",
                    "props": []
                },
                "InputGroupSlots": {
                    "description": "Defines valid slots in InputGroup component.",
                    "props": []
                },
                "InputGroupEmitsOptions": {
                    "description": "Defines valid emits in InputGroup component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputGroupPassThroughOptionType": {
                    "values": "InputGroupPassThroughAttributes | (options: InputGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "InputGroupEmits": {
                    "values": "EmitFn<InputGroupEmitsOptions>"
                }
            }
        }
    },
    "inputgroupstyle": {
        "description": "InputGroup displays text, icon, buttons and other content can be grouped next to an input.\n\n[Live Demo](https://www.primevue.org/inputgroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputGroupStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputGroupStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "InputGroupClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputgroup\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "inputgroupaddon": {
        "description": "InputGroupAddon displays text, icon, buttons and other content can be grouped next to an input.\n\n[Live Demo](https://www.primevue.org/inputgroup/)",
        "components": {
            "default": {
                "description": "InputGroupAddon displays text, icon, buttons and other content can be grouped next to an input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputGroupAddonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputGroupAddonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputGroupAddonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputGroupAddonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputGroupAddonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputGroupAddonProps": {
                    "description": "Defines valid properties in InputGroupAddon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputGroupAddonPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputGroupAddonSlots": {
                    "description": "Defines valid slots in InputGroupAddon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom default template."
                        }
                    ]
                },
                "InputGroupAddonEmitsOptions": {
                    "description": "Defines valid emits in InputGroupAddon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputGroupAddonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "InputGroupAddonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "InputGroupAddonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "InputGroupAddonProps": {
                    "description": "Defines valid properties in InputGroupAddon component.",
                    "props": []
                },
                "InputGroupAddonSlots": {
                    "description": "Defines valid slots in InputGroupAddon component.",
                    "props": []
                },
                "InputGroupAddonEmitsOptions": {
                    "description": "Defines valid emits in InputGroupAddon component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputGroupAddonPassThroughOptionType": {
                    "values": "InputGroupAddonPassThroughAttributes | (options: InputGroupAddonPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "InputGroupAddonEmits": {
                    "values": "EmitFn<InputGroupAddonEmitsOptions>"
                }
            }
        }
    },
    "inputgroupaddonstyle": {
        "description": "InputGroupAddon displays text, icon, buttons and other content can be grouped next to an input.\n\n[Live Demo](https://www.primevue.org/inputgroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputGroupAddonStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputGroupAddonStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "InputGroupAddonClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputgroupaddon\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "inputicon": {
        "description": "InputIcon displays an icon.\n\n[Live Demo](https://www.primevue.org/inputgroup/)",
        "components": {
            "default": {
                "description": "InputIcon displays text, icon, buttons and other content can be grouped next to an input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputIconPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputIconPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputIconProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputIconPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputIconPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputIconProps": {
                    "description": "Defines valid properties in InputIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputIconPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputIconSlots": {
                    "description": "Defines valid slots in InputIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom default template."
                        }
                    ]
                },
                "InputIconEmitsOptions": {
                    "description": "Defines valid emits in InputIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputIconPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "InputIconPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "InputIconPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "InputIconProps": {
                    "description": "Defines valid properties in InputIcon component.",
                    "props": []
                },
                "InputIconSlots": {
                    "description": "Defines valid slots in InputIcon component.",
                    "props": []
                },
                "InputIconEmitsOptions": {
                    "description": "Defines valid emits in InputIcon component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputIconPassThroughOptionType": {
                    "values": "InputIconPassThroughAttributes | (options: InputIconPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "InputIconEmits": {
                    "values": "EmitFn<InputIconEmitsOptions>"
                }
            }
        }
    },
    "inputiconstyle": {
        "description": "InputIcon displays an icon.\n\n[Live Demo](https://www.primevue.org/inputgroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputIconStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputIconStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "InputIconClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputicon\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "inputmask": {
        "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.\n\n[Live Demo](https://www.primevue.org/inputmask/)",
        "components": {
            "default": {
                "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputMaskPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputMaskProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "InputMaskContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputMaskSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputMaskProps",
                            "default": "",
                            "description": "Defines valid properties."
                        }
                    ],
                    "methods": []
                },
                "InputMaskPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputMaskProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "pcInputText",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputMaskPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputMaskContext": {
                    "description": "Defines current options in InputMask component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current filled state of the component as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the component as a boolean."
                        }
                    ],
                    "methods": []
                },
                "InputMaskProps": {
                    "description": "Defines valid properties in InputMask component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "slotChar",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "_",
                            "description": "Placeholder character in mask, default is underscore."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Mask pattern."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the element."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "autoClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Clears the incomplete value on blur."
                        },
                        {
                            "name": "unmask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if model sets the raw unmasked value to bound value or the formatted mask value."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the items are clickable or not."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputMaskPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputMaskSlots": {
                    "description": "Defines valid slots in InputMask component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InputMaskEmitsOptions": {
                    "description": "Defines valid emits in InputMask component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "keypress",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "paste",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "complete",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "keydown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a key is pressed."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputMaskPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "InputMaskSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "InputMaskPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "InputMaskPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "InputMaskContext": {
                    "description": "Defines current options in InputMask component.",
                    "props": []
                },
                "InputMaskProps": {
                    "description": "Defines valid properties in InputMask component.",
                    "props": []
                },
                "InputMaskSlots": {
                    "description": "Defines valid slots in InputMask component.",
                    "props": []
                },
                "InputMaskEmitsOptions": {
                    "description": "Defines valid emits in InputMask component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputMaskPassThroughOptionType": {
                    "values": "InputMaskPassThroughAttributes | (options: InputMaskPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "InputMaskEmits": {
                    "values": "EmitFn<InputMaskEmitsOptions>"
                }
            }
        }
    },
    "inputmaskstyle": {
        "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.\n\n[Live Demo](https://www.primevue.org/inputmask/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputMaskStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputMaskStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "InputMaskClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputmask\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "inputnumber": {
        "description": "InputNumber is an input component to provide numerical input.\n\n[Live Demo](https://www.primevue.org/inputnumber/)",
        "components": {
            "default": {
                "description": "InputNumber is an input component to provide numerical input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputNumberPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputNumberProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputNumberState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputNumberSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputNumberProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputNumberState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "InputNumberInputEvent": {
                    "description": "Custom input event.",
                    "relatedProp": "InputNumberEmitsOptions.input",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | number",
                            "default": "",
                            "description": "New value"
                        },
                        {
                            "name": "formattedValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "currentValue"
                        }
                    ],
                    "methods": []
                },
                "InputNumberBlurEvent": {
                    "description": "Custom blur event.",
                    "relatedProp": "InputNumberEmitsOptions.blur",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Input value"
                        }
                    ],
                    "methods": []
                },
                "InputNumberPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputNumberProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "pcInputText",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "buttonGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the button group's DOM element."
                        },
                        {
                            "name": "incrementButton",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the increment button's DOM element."
                        },
                        {
                            "name": "incrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the increment icon's DOM element."
                        },
                        {
                            "name": "decrementButton",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the decrement button's DOM element."
                        },
                        {
                            "name": "decrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the decrement icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputNumberPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputNumberState": {
                    "description": "Defines current inline state in InputNumber component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_modelValue",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value state as a number.",
                            "deprecated": "since 4.2.0. Use 'd_value' instead."
                        },
                        {
                            "name": "d_value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value state as a number."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "InputNumberButtonListeners": {
                    "description": "Defines valid listeners in InputNumber component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "onMousedown",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseup",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseleave",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeydown",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeyup",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "InputNumberProps": {
                    "description": "Defines valid properties in InputNumber component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<number>",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<number>",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "format",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to format the value."
                        },
                        {
                            "name": "showButtons",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays spinner buttons."
                        },
                        {
                            "name": "buttonLayout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\" | \"stacked\"",
                            "default": "stacked",
                            "description": "Layout of the buttons."
                        },
                        {
                            "name": "incrementButtonClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the increment button."
                        },
                        {
                            "name": "decrementButtonClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the decrement button."
                        },
                        {
                            "name": "incrementButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the increment icon.",
                            "deprecated": "since v4.0. Use 'incrementIcon'."
                        },
                        {
                            "name": "incrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the increment icon."
                        },
                        {
                            "name": "decrementButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the decrement icon.",
                            "deprecated": "since v4.0. Use 'decrementIcon'."
                        },
                        {
                            "name": "decrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the decrement icon."
                        },
                        {
                            "name": "locale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to be used in formatting."
                        },
                        {
                            "name": "localeMatcher",
                            "optional": true,
                            "readonly": false,
                            "type": "\"lookup\" | \"best fit\"",
                            "default": "best fit",
                            "description": "The locale matching algorithm to use. Possible values are 'lookup' and 'best fit'; the default is 'best fit'.\nSee [Locale Negotation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_negotiation) for details."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"decimal\" | \"currency\"",
                            "default": "decimal",
                            "description": "Defines the behavior of the component."
                        },
                        {
                            "name": "prefix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display before the value."
                        },
                        {
                            "name": "suffix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display after the value."
                        },
                        {
                            "name": "currency",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The currency to use in currency formatting. Possible values are the [ISO 4217 currency codes](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency), such as 'USD' for the US dollar, 'EUR' for the euro, or 'CNY' for the Chinese RMB.\nThere is no default value; if the style is 'currency', the currency property must be provided."
                        },
                        {
                            "name": "currencyDisplay",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "symbol",
                            "description": "How to display the currency in currency formatting. Possible values are 'symbol' to use a localized currency symbol such as €, 'code' to use the ISO currency code, 'name' to use a localized currency name such as 'dollar'."
                        },
                        {
                            "name": "useGrouping",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators."
                        },
                        {
                            "name": "minFractionDigits",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0;\nthe default for currency formatting is the number of minor unit digits provided by the [ISO 4217 currency code](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) list (2 if the list doesn't provide that information)."
                        },
                        {
                            "name": "maxFractionDigits",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3;\nthe default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the [ISO 4217 currency code](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) list (2 if the list doesn't provide that information)."
                        },
                        {
                            "name": "roundingMode",
                            "optional": true,
                            "readonly": false,
                            "type": "RoundingMode",
                            "default": "",
                            "description": "How decimals should be rounded.\nThe default value is  `\"halfExpand\"` , [further information](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode)."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Minimum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "allowEmpty",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Determines whether the input field is empty."
                        },
                        {
                            "name": "highlightOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Highlights automatically the input value."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focus input to match a label defined for the chips."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputNumberPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputNumberSlots": {
                    "description": "Defines valid slots in InputNumber component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "incrementbutton",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">listeners</span>: <span class=\"doc-option-parameter-type\">InputNumberButtonListeners</span>, <span class=\"doc-option-parameter-type\">// InputNumber listeners</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom increment button template."
                        },
                        {
                            "name": "decrementbutton",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">listeners</span>: <span class=\"doc-option-parameter-type\">InputNumberButtonListeners</span>, <span class=\"doc-option-parameter-type\">// InputNumber listeners</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom decrement button template."
                        },
                        {
                            "name": "incrementbuttonicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'incrementicon' slot.\nCustom increment icon template."
                        },
                        {
                            "name": "incrementicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom increment icon template."
                        },
                        {
                            "name": "decrementbuttonicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'decrementicon' slot.\nCustom decrement icon template."
                        },
                        {
                            "name": "decrementicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom decrement icon template."
                        }
                    ]
                },
                "InputNumberEmitsOptions": {
                    "description": "Defines valid emits in InputNumber component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "input",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputNumberInputEvent",
                                    "description": "Custom input event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the value is entered."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Focus event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on focus of input field."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputNumberBlurEvent",
                                    "description": "Blur event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on blur of input field."
                        }
                    ]
                },
                "InputNumberMethods": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "getFormatter",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputNumberPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "InputNumberSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "InputNumberInputEvent": {
                    "description": "Custom input event.",
                    "props": []
                },
                "InputNumberBlurEvent": {
                    "description": "Custom blur event.",
                    "props": []
                },
                "InputNumberPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "InputNumberPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "InputNumberState": {
                    "description": "Defines current inline state in InputNumber component.",
                    "props": []
                },
                "InputNumberButtonListeners": {
                    "description": "Defines valid listeners in InputNumber component.",
                    "props": []
                },
                "InputNumberProps": {
                    "description": "Defines valid properties in InputNumber component.",
                    "props": []
                },
                "InputNumberSlots": {
                    "description": "Defines valid slots in InputNumber component.",
                    "props": []
                },
                "InputNumberEmitsOptions": {
                    "description": "Defines valid emits in InputNumber component.",
                    "props": []
                },
                "InputNumberMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RoundingMode": {
                    "values": "\"ceil\" | \"floor\" | \"expand\" | \"trunc\" | \"halfCeil\" | \"halfFloor\" | \"halfExpand\" | \"halfTrunc\" | \"halfEven\""
                },
                "InputNumberPassThroughOptionType": {
                    "values": "InputNumberPassThroughAttributes | (options: InputNumberPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "InputNumberEmits": {
                    "values": "EmitFn<InputNumberEmitsOptions>"
                }
            }
        }
    },
    "inputnumberstyle": {
        "description": "InputNumber is an input component to provide numerical input.\n\n[Live Demo](https://www.primevue.org/inputnumber/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputNumberStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputNumberStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "InputNumberClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputnumber\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "pcInput",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputnumber-input\"",
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "buttonGroup",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputnumber-button-group\"",
                            "description": "Class name of the button group element"
                        },
                        {
                            "name": "incrementButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputnumber-increment-button\"",
                            "description": "Class name of the increment button element"
                        },
                        {
                            "name": "decrementButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputnumber-decrement-button\"",
                            "description": "Class name of the decrement button element"
                        }
                    ]
                }
            }
        }
    },
    "inputotp": {
        "description": "InputOtp is used to enter one time passwords.\n\n[Live Demo](https://www.primevue.org/inputotp/)",
        "components": {
            "default": {
                "description": "InputOtp  is used to enter one time passwords.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputOtpPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputOtpProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputOtpState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputOtpChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "InputOtpEmitsOptions.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the input"
                        }
                    ],
                    "methods": []
                },
                "InputOtpSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputOtpProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputOtpState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "InputOtpPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputOtpProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputOtpPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "pcInputText",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputOtpPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputOtpState": {
                    "description": "Defines current inline state in InputOtp component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tokens",
                            "optional": false,
                            "readonly": false,
                            "type": "string[] | number[]",
                            "default": "",
                            "description": "Array of input tokens"
                        }
                    ],
                    "methods": []
                },
                "InputOtpTemplateAttrsOptions": {
                    "description": "InputOtp attr options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Input token value"
                        }
                    ],
                    "methods": []
                },
                "InputOtpTemplateEvents": {
                    "description": "InputOtp templating events",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "input",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "keydown",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "focus",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "blur",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "paste",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "InputOtpProps": {
                    "description": "Defines valid properties in InputOtp component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | boolean",
                            "default": "null",
                            "description": "Specifies whether a inputotp should be checked or not."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "length",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4",
                            "description": "Number of characters to initiate."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Mask pattern."
                        },
                        {
                            "name": "integerOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is integer-only."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputOtpPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputOtpSlots": {
                    "description": "",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">events</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; InputOtpTemplateEvents</span>, <span class=\"doc-option-parameter-type\">// Events of the component</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">attrs</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; InputOtpTemplateAttrsOptions</span>, <span class=\"doc-option-parameter-type\">// Attributes of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the input field</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        }
                    ]
                },
                "InputOtpEmitsOptions": {
                    "description": "Defines valid emits in InputOtp component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputOtpChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputOtpPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "InputOtpChangeEvent": {
                    "description": "Custom change event.",
                    "props": []
                },
                "InputOtpSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "InputOtpPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "InputOtpPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "InputOtpState": {
                    "description": "Defines current inline state in InputOtp component.",
                    "props": []
                },
                "InputOtpTemplateAttrsOptions": {
                    "description": "InputOtp attr options",
                    "props": []
                },
                "InputOtpTemplateEvents": {
                    "description": "InputOtp templating events",
                    "props": []
                },
                "InputOtpProps": {
                    "description": "Defines valid properties in InputOtp component.",
                    "props": []
                },
                "InputOtpSlots": {
                    "description": "",
                    "props": []
                },
                "InputOtpEmitsOptions": {
                    "description": "Defines valid emits in InputOtp component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputOtpPassThroughOptionType": {
                    "values": "InputOtpPassThroughAttributes | (options: InputOtpPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "InputOtpEmits": {
                    "values": "EmitFn<InputOtpEmitsOptions>"
                }
            }
        }
    },
    "inputotpstyle": {
        "description": "InputOtp is used to enter one time passwords.\n\n[Live Demo](https://www.primevue.org/inputotp/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputOtpStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputOtpStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "InputOtpClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputotp\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "pcInput",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputotp-input\"",
                            "description": "Class name of the input element"
                        }
                    ]
                }
            }
        }
    },
    "inputswitch": {
        "description": "InputSwitch is used to select a boolean value.\n\n[Live Demo](https://www.primevue.org/toggleswitch/)",
        "components": {
            "default": {
                "description": "",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputSwitchPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "InputSwitchPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "undefined.InputSwitchProps.pt",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "InputSwitchPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "InputSwitchProps": {
                    "description": "Defines valid properties in InputSwitch component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "InputSwitchContext": {
                    "description": "Defines current options in InputSwitch component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "InputSwitchSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "InputSwitchEmitsOptions": {
                    "description": "Defines valid emits in InputSwitch component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputSwitchPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "InputSwitchPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "InputSwitchPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "InputSwitchProps": {
                    "description": "Defines valid properties in InputSwitch component.",
                    "props": []
                },
                "InputSwitchContext": {
                    "description": "Defines current options in InputSwitch component.",
                    "props": []
                },
                "InputSwitchSlots": {
                    "props": []
                },
                "InputSwitchEmitsOptions": {
                    "description": "Defines valid emits in InputSwitch component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputSwitchEmits": {
                    "values": "EmitFn<InputSwitchEmitsOptions> & ToggleSwitch.ToggleSwitchEmits"
                }
            }
        }
    },
    "inputswitchstyle": {
        "description": "InputSwitch is used to select a boolean value.\n\n[Live Demo](https://www.primevue.org/toggleswitch/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputSwitchStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputSwitchStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "InputSwitchClasses": {
                    "members": []
                }
            }
        }
    },
    "inputtext": {
        "description": "InputText renders a text field to enter data.\n\n[Live Demo](https://www.primevue.org/inputtext/)",
        "components": {
            "default": {
                "description": "InputText renders a text field to enter data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputTextPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputTextProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "InputTextContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputTextPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputTextProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputTextPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputTextContext": {
                    "description": "Defines current options in InputText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current filled state of the component as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the component as a boolean."
                        }
                    ],
                    "methods": []
                },
                "InputTextProps": {
                    "description": "Defines valid properties in InputText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-activedescendant",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
                        },
                        {
                            "name": "aria-atomic",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
                        },
                        {
                            "name": "aria-autocomplete",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"inline\" | \"list\" | \"both\"",
                            "default": "",
                            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
                        },
                        {
                            "name": "aria-busy",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
                        },
                        {
                            "name": "aria-checked",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"mixed\"",
                            "default": "",
                            "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
                        },
                        {
                            "name": "aria-colcount",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the total number of columns in a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-colindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-colspan",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-controls",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
                        },
                        {
                            "name": "aria-current",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"page\" | \"step\" | \"location\" | \"date\" | \"time\"",
                            "default": "",
                            "description": "Indicates the element that represents the current item within a container or set of related elements."
                        },
                        {
                            "name": "aria-describedby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) that describes the object."
                        },
                        {
                            "name": "aria-details",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element that provides a detailed, extended description for the object."
                        },
                        {
                            "name": "aria-disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
                        },
                        {
                            "name": "aria-dropeffect",
                            "optional": true,
                            "readonly": false,
                            "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"",
                            "default": "",
                            "description": "Indicates what functions can be performed when a dragged object is released on the drop target.",
                            "deprecated": "in ARIA 1.1"
                        },
                        {
                            "name": "aria-errormessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element that provides an error message for the object."
                        },
                        {
                            "name": "aria-expanded",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
                        },
                        {
                            "name": "aria-flowto",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
                        },
                        {
                            "name": "aria-grabbed",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
                            "deprecated": "in ARIA 1.1"
                        },
                        {
                            "name": "aria-haspopup",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"menu\" | \"listbox\" | \"tree\" | \"grid\" | \"dialog\"",
                            "default": "",
                            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
                        },
                        {
                            "name": "aria-hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether the element is exposed to an accessibility API."
                        },
                        {
                            "name": "aria-invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"grammar\" | \"spelling\"",
                            "default": "",
                            "description": "Indicates the entered value does not conform to the format expected by the application."
                        },
                        {
                            "name": "aria-keyshortcuts",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels the current element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) that labels the current element."
                        },
                        {
                            "name": "aria-level",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the hierarchical level of an element within a structure."
                        },
                        {
                            "name": "aria-live",
                            "optional": true,
                            "readonly": false,
                            "type": "\"off\" | \"assertive\" | \"polite\"",
                            "default": "",
                            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
                        },
                        {
                            "name": "aria-modal",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether an element is modal when displayed."
                        },
                        {
                            "name": "aria-multiline",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether a text box accepts multiple lines of input or only a single line."
                        },
                        {
                            "name": "aria-multiselectable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the user may select more than one item from the current selectable descendants."
                        },
                        {
                            "name": "aria-orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "",
                            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
                        },
                        {
                            "name": "aria-owns",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
                        },
                        {
                            "name": "aria-placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
                        },
                        {
                            "name": "aria-posinset",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
                        },
                        {
                            "name": "aria-pressed",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"mixed\"",
                            "default": "",
                            "description": "Indicates the current \"pressed\" state of toggle buttons."
                        },
                        {
                            "name": "aria-readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the element is not editable, but is otherwise operable."
                        },
                        {
                            "name": "aria-relevant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
                            "default": "",
                            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
                        },
                        {
                            "name": "aria-required",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that user input is required on the element before a form may be submitted."
                        },
                        {
                            "name": "aria-roledescription",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a human-readable, author-localized description for the role of an element."
                        },
                        {
                            "name": "aria-rowcount",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the total number of rows in a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-rowindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-rowspan",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-selected",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates the current \"selected\" state of various widgets."
                        },
                        {
                            "name": "aria-setsize",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
                        },
                        {
                            "name": "aria-sort",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
                            "default": "",
                            "description": "Indicates if items in a table or grid are sorted in ascending or descending order."
                        },
                        {
                            "name": "aria-valuemax",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the maximum allowed value for a range widget."
                        },
                        {
                            "name": "aria-valuemin",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the minimum allowed value for a range widget."
                        },
                        {
                            "name": "aria-valuenow",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the current value for a range widget."
                        },
                        {
                            "name": "aria-valuetext",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the human readable text alternative of aria-valuenow for a range widget."
                        },
                        {
                            "name": "innerHTML",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "StyleValue",
                            "default": ""
                        },
                        {
                            "name": "accesskey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "contenteditable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"inherit\" | \"plaintext-only\"",
                            "default": ""
                        },
                        {
                            "name": "contextmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dir",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "\"\" | Booleanish | \"hidden\" | \"until-found\"",
                            "default": ""
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "inert",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "lang",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spellcheck",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "translate",
                            "optional": true,
                            "readonly": false,
                            "type": "\"yes\" | \"no\"",
                            "default": ""
                        },
                        {
                            "name": "radiogroup",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "role",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "about",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "datatype",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "inlist",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "prefix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "property",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "resource",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "typeof",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "vocab",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autocapitalize",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autocorrect",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autosave",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemprop",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemscope",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "itemtype",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemid",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemref",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "results",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "security",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "unselectable",
                            "optional": true,
                            "readonly": false,
                            "type": "\"on\" | \"off\"",
                            "default": ""
                        },
                        {
                            "name": "inputmode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\" | \"search\"",
                            "default": "",
                            "description": "Hints at the type of data that might be entered by the user while editing the element or its contents"
                        },
                        {
                            "name": "is",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specify that a standard HTML element should behave like a defined custom built-in element"
                        },
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "alt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autocomplete",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autofocus",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "capture",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | \"user\" | \"environment\"",
                            "default": ""
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "any[] | Set<any> | Booleanish",
                            "default": ""
                        },
                        {
                            "name": "crossorigin",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "enterKeyHint",
                            "optional": true,
                            "readonly": false,
                            "type": "\"search\" | \"enter\" | \"done\" | \"go\" | \"next\" | \"previous\" | \"send\"",
                            "default": ""
                        },
                        {
                            "name": "form",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formaction",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formenctype",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formmethod",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formnovalidate",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "formtarget",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "indeterminate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "maxlength",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "minlength",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "pattern",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "src",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTypeHTMLAttribute",
                            "default": ""
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "onCopy",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCut",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPaste",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionupdate",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDrag",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragexit",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDrop",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocusin",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocusout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onChange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onBeforeinput",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onInput",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onReset",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSubmit",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onInvalid",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoad",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onError",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeydown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeypress",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeyup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAuxclick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onClick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onContextmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDblclick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMousedown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMousemove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAbort",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCanplay",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCanplaythrough",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDurationchange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEmptied",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEncrypted",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEnded",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadeddata",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadedmetadata",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPause",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPlay",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPlaying",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onProgress",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onRatechange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSeeked",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSeeking",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onStalled",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSuspend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTimeupdate",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onVolumechange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onWaiting",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onScrollend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchcancel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchmove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerdown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointermove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointercancel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onWheel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationiteration",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTransitionend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTransitionstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "null | boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "null | boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputTextPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<InputHTMLAttributes, \"size\">"
                },
                "InputTextSlots": {
                    "description": "Defines valid slots in InputText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InputTextEmitsOptions": {
                    "description": "Defines valid emits in InputText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputTextPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "InputTextPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "InputTextPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "InputTextContext": {
                    "description": "Defines current options in InputText component.",
                    "props": []
                },
                "InputTextProps": {
                    "description": "Defines valid properties in InputText component.",
                    "props": []
                },
                "InputTextSlots": {
                    "description": "Defines valid slots in InputText component.",
                    "props": []
                },
                "InputTextEmitsOptions": {
                    "description": "Defines valid emits in InputText component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputTextPassThroughOptionType": {
                    "values": "InputTextPassThroughAttributes | (options: InputTextPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "InputTextEmits": {
                    "values": "EmitFn<InputTextEmitsOptions>"
                }
            }
        }
    },
    "inputtextstyle": {
        "description": "InputText renders a text field to enter data.\n\n[Live Demo](https://www.primevue.org/inputtext/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputTextStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "InputTextStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "InputTextClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-inputtext\"",
                            "description": "The class of root element"
                        }
                    ]
                }
            }
        }
    },
    "keyfilter": {
        "description": "A keyfilter is a directive used to block individual keystrokes based on a pattern.\n\n[Live Demo](https://primevue.org/keyfilter)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "KeyFilterOptions": {
                    "description": "Defines options of KeyFilter.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pattern",
                            "optional": true,
                            "readonly": false,
                            "type": "RegExp",
                            "default": "null",
                            "description": "Sets the pattern for key filtering."
                        },
                        {
                            "name": "validateOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, instead of blocking keys, input is validated internally to test against the regular expression."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<KeyFilterDirectivePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "KeyFilterDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "KeyFilterOptions.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "KeyFilterDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "KeyFilterDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "KeyFilterModifiers": {
                    "description": "Defines modifiers of KeyFilter directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pint",
                            "optional": true,
                            "readonly": false,
                            "type": "RegExp",
                            "default": "false",
                            "description": "Positive integer pattern for KeyFilter directive."
                        },
                        {
                            "name": "int",
                            "optional": true,
                            "readonly": false,
                            "type": "RegExp",
                            "default": "false",
                            "description": "Integer pattern for KeyFilter directive."
                        },
                        {
                            "name": "pnum",
                            "optional": true,
                            "readonly": false,
                            "type": "RegExp",
                            "default": "false",
                            "description": "Positive number pattern for KeyFilter directive."
                        },
                        {
                            "name": "money",
                            "optional": true,
                            "readonly": false,
                            "type": "RegExp",
                            "default": "false",
                            "description": "Money pattern for KeyFilter directive."
                        },
                        {
                            "name": "num",
                            "optional": true,
                            "readonly": false,
                            "type": "RegExp",
                            "default": "false",
                            "description": "Number pattern for KeyFilter directive."
                        },
                        {
                            "name": "hex",
                            "optional": true,
                            "readonly": false,
                            "type": "RegExp",
                            "default": "false",
                            "description": "Hexadecimal pattern for KeyFilter directive."
                        },
                        {
                            "name": "email",
                            "optional": true,
                            "readonly": false,
                            "type": "RegExp",
                            "default": "false",
                            "description": "Email pattern for KeyFilter directive."
                        },
                        {
                            "name": "alpha",
                            "optional": true,
                            "readonly": false,
                            "type": "RegExp",
                            "default": "false",
                            "description": "Alphabetic pattern for KeyFilter directive."
                        },
                        {
                            "name": "alphanum",
                            "optional": true,
                            "readonly": false,
                            "type": "RegExp",
                            "default": "false",
                            "description": "Alphanumeric pattern for KeyFilter directive."
                        }
                    ],
                    "methods": []
                },
                "KeyFilterDirectiveBinding": {
                    "description": "Binding of KeyFilter directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "null | ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, \"\", Object, any> | Record<string, any>",
                            "default": ""
                        },
                        {
                            "name": "oldValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "arg",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dir",
                            "optional": false,
                            "readonly": false,
                            "type": "ObjectDirective<any, any, string, string>",
                            "default": ""
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | KeyFilterOptions",
                            "default": "",
                            "description": "Value of the KeyFilter."
                        },
                        {
                            "name": "modifiers",
                            "optional": true,
                            "readonly": false,
                            "type": "KeyFilterModifiers",
                            "default": "",
                            "description": "Modifiers of the KeyFilter."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "KeyFilterOptions": {
                    "description": "Defines options of KeyFilter.",
                    "props": []
                },
                "KeyFilterDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "KeyFilterDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "KeyFilterModifiers": {
                    "description": "Defines modifiers of KeyFilter directive.",
                    "props": []
                },
                "KeyFilterDirectiveBinding": {
                    "description": "Binding of KeyFilter directive.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "KeyFilterDirectivePassThroughOptionType": {
                    "values": "KeyFilterDirectivePassThroughAttributes | null | undefined"
                }
            }
        }
    },
    "keyfilterstyle": {
        "description": "A keyfilter is a directive used to block individual keystrokes based on a pattern.\n\n[Live Demo](https://primevue.org/keyfilter)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "KeyFilterStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "KeyFilterStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "KeyFilterClasses": {
                    "members": []
                }
            }
        }
    },
    "knob": {
        "description": "Knob is a form component to define number inputs with a dial.\n\n[Live Demo](https://www.primevue.org/knob/)",
        "components": {
            "default": {
                "description": "Knob groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "KnobPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "KnobProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "KnobState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "KnobPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "KnobProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "svg",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the svg's DOM element."
                        },
                        {
                            "name": "range",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the range's DOM element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the value' DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the text's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "KnobPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "KnobState": {
                    "description": "Defines current inline state in Knob component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "radius",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "40",
                            "description": "Current radius state as a number."
                        },
                        {
                            "name": "midX",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "50",
                            "description": "Current middle x axis state as a number."
                        },
                        {
                            "name": "midY",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "50",
                            "description": "Current middle y axis state as a number."
                        },
                        {
                            "name": "minRadians",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current minimum radian state as a number."
                        },
                        {
                            "name": "maxRadians",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current maximum radian state as a number."
                        }
                    ],
                    "methods": []
                },
                "KnobProps": {
                    "description": "Defines valid properties in Knob component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Size of the component in pixels."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component value cannot be edited."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "valueColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "$dt('knob.value.background')",
                            "description": "Background of the value."
                        },
                        {
                            "name": "rangeColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "$dt('knob.range.background')",
                            "description": "Background color of the range."
                        },
                        {
                            "name": "textColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "$dt('knob.text.color')",
                            "description": "Color of the value text."
                        },
                        {
                            "name": "strokeWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "14",
                            "description": "Width of the knob stroke."
                        },
                        {
                            "name": "showValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the show the value inside the knob."
                        },
                        {
                            "name": "valueTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "'{value}'",
                            "description": "Template string of the value."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Used to define a string that labels the element."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<KnobPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "KnobSlots": {
                    "description": "Defines valid slots in Knob component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "KnobEmitsOptions": {
                    "description": "Defines valid emits in Knob component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the value changes."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "KnobPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "KnobPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "KnobPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "KnobState": {
                    "description": "Defines current inline state in Knob component.",
                    "props": []
                },
                "KnobProps": {
                    "description": "Defines valid properties in Knob component.",
                    "props": []
                },
                "KnobSlots": {
                    "description": "Defines valid slots in Knob component.",
                    "props": []
                },
                "KnobEmitsOptions": {
                    "description": "Defines valid emits in Knob component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "KnobPassThroughOptionType": {
                    "values": "KnobPassThroughAttributes | (options: KnobPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "KnobEmits": {
                    "values": "EmitFn<KnobEmitsOptions>"
                }
            }
        }
    },
    "knobstyle": {
        "description": "Knob is a form component to define number inputs with a dial.\n\n[Live Demo](https://www.primevue.org/knob/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "KnobStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "KnobStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "KnobClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-knob\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "range",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-knob-range\"",
                            "description": "Class name of the range element"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-knob-value\"",
                            "description": "Class name of the value element"
                        },
                        {
                            "name": "text",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-knob-text\"",
                            "description": "Class name of the text element"
                        }
                    ]
                }
            }
        }
    },
    "listbox": {
        "description": "ListBox is used to select one or more values from a list of items.\n\n[Live Demo](https://www.primevue.org/listbox/)",
        "components": {
            "default": {
                "description": "ListBox is used to select one or more values from a list of items.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ListboxPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ListboxProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ListboxState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ListboxContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ListboxSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ListboxProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ListboxState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "ListboxChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "ListboxEmitsOptions.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "ListboxOptionDblClickEvent": {
                    "description": "Custom double click event.",
                    "relatedProp": "listboxListboxEmitsOptions.['item-dblclick']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "ListboxFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "ListboxEmitsOptions.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter value"
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Filtered options"
                        }
                    ],
                    "methods": []
                },
                "ListboxPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ListboxProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "pcFilterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the IconField component."
                        },
                        {
                            "name": "pcFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "pcFilterIconContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputIcon component."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the filter icon's DOM element."
                        },
                        {
                            "name": "listContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the list container's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "optionGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the option group's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the option's DOM element."
                        },
                        {
                            "name": "optionCheckIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the option check icon's DOM element."
                        },
                        {
                            "name": "optionBlankIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the option blank icon's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the emptyMessage's DOM element."
                        },
                        {
                            "name": "hiddenFirstFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden first focusable element's DOM element."
                        },
                        {
                            "name": "hiddenFilterResult",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden filter result's DOM element."
                        },
                        {
                            "name": "hiddenSelectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden selected message's DOM element."
                        },
                        {
                            "name": "hiddenLastFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden last focusable element's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ListboxPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ListboxState": {
                    "description": "Defines current inline state in Listbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter value state as a string."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "-1",
                            "description": "Current focused item index as a number."
                        }
                    ],
                    "methods": []
                },
                "ListboxContext": {
                    "description": "Defines current options in Listbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selection state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ListboxProps": {
                    "description": "Defines valid properties in Listbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "listStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Inline style of inner list element."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "14rem",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, disables the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays a filter input at header."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"startsWith\" | \"contains\" | \"endsWith\">",
                            "default": "contains",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "filterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "highlightOnSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the selected option will be add highlight class."
                        },
                        {
                            "name": "checkmark",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the selected option will be shown with a check mark."
                        },
                        {
                            "name": "filterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No available options",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "striped",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in filter input."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ListboxPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ListboxSlots": {
                    "description": "Defines valid slots in Listbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "optiongroup slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom optiongroup template."
                        },
                        {
                            "name": "emptyfilter",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom emptyfilter template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// An array of objects to display for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">styleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">contentRef</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">el</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Referance of the content</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">getItemOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Options of the items</span>\n}",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "filtericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the filter icon</span>\n }",
                                    "description": "filter icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter icon template."
                        }
                    ]
                },
                "ListboxEmitsOptions": {
                    "description": "Defines valid emits in Listbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ListboxChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ListboxFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filter input."
                        },
                        {
                            "name": "item-dblclick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ListboxOptionDblClickEvent",
                                    "description": "Custom option double click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on option double click."
                        },
                        {
                            "name": "option-dblclick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ListboxOptionDblClickEvent",
                                    "description": "Custom option double click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on option double click."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ListboxPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ListboxSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "ListboxChangeEvent": {
                    "description": "Custom change event.",
                    "props": []
                },
                "ListboxOptionDblClickEvent": {
                    "description": "Custom double click event.",
                    "props": []
                },
                "ListboxFilterEvent": {
                    "description": "Custom filter event.",
                    "props": []
                },
                "ListboxPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ListboxPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ListboxState": {
                    "description": "Defines current inline state in Listbox component.",
                    "props": []
                },
                "ListboxContext": {
                    "description": "Defines current options in Listbox component.",
                    "props": []
                },
                "ListboxProps": {
                    "description": "Defines valid properties in Listbox component.",
                    "props": []
                },
                "ListboxSlots": {
                    "description": "Defines valid slots in Listbox component.",
                    "props": []
                },
                "ListboxEmitsOptions": {
                    "description": "Defines valid emits in Listbox component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ListboxPassThroughOptionType": {
                    "values": "ListboxPassThroughAttributes | (options: ListboxPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ListboxEmits": {
                    "values": "EmitFn<ListboxEmitsOptions>"
                }
            }
        }
    },
    "listboxstyle": {
        "description": "ListBox is used to select one or more values from a list of items.\n\n[Live Demo](https://www.primevue.org/listbox/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ListboxStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ListboxStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ListboxClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-listbox\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-listbox-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "pcFilter",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-listbox-filter\"",
                            "description": "Class name of the filter element"
                        },
                        {
                            "name": "listContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-listbox-list-container\"",
                            "description": "Class name of the list container element"
                        },
                        {
                            "name": "list",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-listbox-list\"",
                            "description": "Class name of the list element"
                        },
                        {
                            "name": "optionGroup",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-listbox-option-group\"",
                            "description": "Class name of the option group element"
                        },
                        {
                            "name": "option",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-listbox-option\"",
                            "description": "Class name of the option element"
                        },
                        {
                            "name": "optionCheckIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-listbox-option-check-icon\"",
                            "description": "Class name of the option check icon element"
                        },
                        {
                            "name": "optionBlankIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-listbox-option-blank-icon\"",
                            "description": "Class name of the option blank icon element"
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-listbox-empty-message\"",
                            "description": "Class name of the empty message element"
                        }
                    ]
                }
            }
        }
    },
    "megamenu": {
        "description": "MegaMenu is navigation component that displays submenus together.\n\n[Live Demo](https://www.primevue.org/megamenu/)",
        "components": {
            "default": {
                "description": "MegaMenu is navigation component that displays submenus together.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MegaMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MegaMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MegaMenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "rootList",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the  item's DOM element."
                        },
                        {
                            "name": "itemContent",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item content's DOM element."
                        },
                        {
                            "name": "itemLink",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item link's DOM element."
                        },
                        {
                            "name": "itemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item icon's DOM element."
                        },
                        {
                            "name": "itemLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the overlay DOM element."
                        },
                        {
                            "name": "grid",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the grid's DOM element."
                        },
                        {
                            "name": "column",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column's DOM element."
                        },
                        {
                            "name": "submenuLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu item's DOM element."
                        },
                        {
                            "name": "submenu",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mobile popup menu button's DOM element."
                        },
                        {
                            "name": "buttonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mobile popup menu button icon's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the start of the component."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the end of the component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "MegaMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MegaMenuFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item index"
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item level"
                        },
                        {
                            "name": "parentKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Parent key info"
                        }
                    ],
                    "methods": []
                },
                "MegaMenuState": {
                    "description": "Defines current inline state in MegaMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedItemInfo",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuFocusedItemInfo",
                            "default": "",
                            "description": "Current focused item info."
                        },
                        {
                            "name": "activeItem",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem",
                            "default": "",
                            "description": "Active item path."
                        }
                    ],
                    "methods": []
                },
                "MegaMenuContext": {
                    "description": "Defines current options in MegaMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the menuitem."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "MegaMenuRouterBindProps": {
                    "description": "Defines valid router binding props in MegaMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        },
                        {
                            "name": "submenuicon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Submenuicon elemnt binding"
                        }
                    ],
                    "methods": []
                },
                "MegaMenuProps": {
                    "description": "Defines valid properties in MegaMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[][]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Defines the orientation."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "20rem",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MegaMenuPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "MegaMenuSlots": {
                    "description": "Defines valid slots in MegaMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">MegaMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "menubutton",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">id</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Current id state as a string</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Toggle event</span>\n}",
                                    "description": "menu button slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu button template on responsive mode."
                        },
                        {
                            "name": "menubuttonicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu button icon template on responsive mode."
                        },
                        {
                            "name": "submenuicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is active</span>\n }",
                                    "description": "submenuicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom submenu icon template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        }
                    ]
                },
                "MegaMenuEmitsOptions": {
                    "description": "Defines valid emits in MegaMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MegaMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "MegaMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "MegaMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "MegaMenuFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "props": []
                },
                "MegaMenuState": {
                    "description": "Defines current inline state in MegaMenu component.",
                    "props": []
                },
                "MegaMenuContext": {
                    "description": "Defines current options in MegaMenu component.",
                    "props": []
                },
                "MegaMenuRouterBindProps": {
                    "description": "Defines valid router binding props in MegaMenu component.",
                    "props": []
                },
                "MegaMenuProps": {
                    "description": "Defines valid properties in MegaMenu component.",
                    "props": []
                },
                "MegaMenuSlots": {
                    "description": "Defines valid slots in MegaMenu component.",
                    "props": []
                },
                "MegaMenuEmitsOptions": {
                    "description": "Defines valid emits in MegaMenu component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MegaMenuPassThroughOptionType": {
                    "values": "MegaMenuPassThroughAttributes | (options: MegaMenuPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "MegaMenuEmits": {
                    "values": "EmitFn<MegaMenuEmitsOptions>"
                }
            }
        }
    },
    "megamenustyle": {
        "description": "MegaMenu is navigation component that displays submenus together.\n\n[Live Demo](https://www.primevue.org/megamenu/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MegaMenuStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MegaMenuStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "MegaMenuClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "start",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-start\"",
                            "description": "Class name of the start element"
                        },
                        {
                            "name": "button",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-button\"",
                            "description": "Class name of the button element"
                        },
                        {
                            "name": "rootList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-root-list\"",
                            "description": "Class name of the root list element"
                        },
                        {
                            "name": "submenuItem",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-submenu-item\"",
                            "description": "Class name of the submenu item element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "itemContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-item-content\"",
                            "description": "Class name of the item content element"
                        },
                        {
                            "name": "itemLink",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-item-link\"",
                            "description": "Class name of the item link element"
                        },
                        {
                            "name": "itemIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-item-icon\"",
                            "description": "Class name of the item icon element"
                        },
                        {
                            "name": "itemLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-item-label\"",
                            "description": "Class name of the item label element"
                        },
                        {
                            "name": "submenuIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-submenu-icon\"",
                            "description": "Class name of the submenu icon element"
                        },
                        {
                            "name": "panel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-panel\"",
                            "description": "Class name of the panel element"
                        },
                        {
                            "name": "grid",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-grid\"",
                            "description": "Class name of the grid element"
                        },
                        {
                            "name": "submenu",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-submenu\"",
                            "description": "Class name of the submenu element"
                        },
                        {
                            "name": "submenuItemLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-submenu-item-label\"",
                            "description": "Class name of the submenu item label element"
                        },
                        {
                            "name": "separator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-separator\"",
                            "description": "Class name of the separator element"
                        },
                        {
                            "name": "end",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-megamenu-end\"",
                            "description": "Class name of the end element"
                        }
                    ]
                }
            }
        }
    },
    "menu": {
        "description": "Menu is a navigation / command component that supports dynamic and static positioning.\n\n[Live Demo](https://www.primevue.org/menu/)",
        "components": {
            "default": {
                "description": "Menu is a navigation / command component that supports dynamic and static positioning.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "submenuLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu item's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "itemContent",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item content's DOM element."
                        },
                        {
                            "name": "itemLink",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item link's DOM element."
                        },
                        {
                            "name": "itemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item icon's DOM element."
                        },
                        {
                            "name": "itemLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item label's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the start of the component."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the end of the component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "MenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MenuState": {
                    "description": "Defines current inline state in Menu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Focused option index."
                        },
                        {
                            "name": "selectedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Selected option index."
                        }
                    ],
                    "methods": []
                },
                "MenuContext": {
                    "description": "Defines current options in Menu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the menuitem."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "MenuRouterBindProps": {
                    "description": "Defines valid router binding props in Menu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        }
                    ],
                    "methods": []
                },
                "MenuProps": {
                    "description": "Defines valid properties in Menu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "popup",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MenuPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "MenuSlots": {
                    "description": "Defines valid slots in Menu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">MenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        },
                        {
                            "name": "submenuheader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n }",
                                    "description": "submenuheader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use submenuitem slot instead.\nCustom submenu header template."
                        },
                        {
                            "name": "submenuitem",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n }",
                                    "description": "submenuitem slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom submenu item template."
                        }
                    ]
                },
                "MenuEmitsOptions": {
                    "description": "Defines valid emits in Menu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the menu popup is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the menu popup is hidden."
                        }
                    ]
                },
                "MenuMethods": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the overlay."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "optional": true,
                                    "type": "any",
                                    "description": "Target element"
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "MenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "MenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "MenuState": {
                    "description": "Defines current inline state in Menu component.",
                    "props": []
                },
                "MenuContext": {
                    "description": "Defines current options in Menu component.",
                    "props": []
                },
                "MenuRouterBindProps": {
                    "description": "Defines valid router binding props in Menu component.",
                    "props": []
                },
                "MenuProps": {
                    "description": "Defines valid properties in Menu component.",
                    "props": []
                },
                "MenuSlots": {
                    "description": "Defines valid slots in Menu component.",
                    "props": []
                },
                "MenuEmitsOptions": {
                    "description": "Defines valid emits in Menu component.",
                    "props": []
                },
                "MenuMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MenuPassThroughOptionType": {
                    "values": "MenuPassThroughAttributes | (options: MenuPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "MenuPassThroughTransitionType": {
                    "values": "TransitionProps | (options: MenuPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "MenuEmits": {
                    "values": "EmitFn<MenuEmitsOptions>"
                }
            }
        }
    },
    "menustyle": {
        "description": "Menu is a navigation / command component that supports dynamic and static positioning.\n\n[Live Demo](https://www.primevue.org/menu/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenuStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MenuStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "MenuClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menu\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "start",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menu-start\"",
                            "description": "Class name of the start element"
                        },
                        {
                            "name": "list",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menu-list\"",
                            "description": "Class name of the list element"
                        },
                        {
                            "name": "submenuItem",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menu-submenu-item\"",
                            "description": "Class name of the submenu item element"
                        },
                        {
                            "name": "separator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menu-separator\"",
                            "description": "Class name of the separator element"
                        },
                        {
                            "name": "end",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menu-end\"",
                            "description": "Class name of the end element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menu-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "itemContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menu-item-content\"",
                            "description": "Class name of the item content element"
                        },
                        {
                            "name": "itemLink",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menu-item-link\"",
                            "description": "Class name of the item link element"
                        },
                        {
                            "name": "itemIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menu-item-icon\"",
                            "description": "Class name of the item icon element"
                        },
                        {
                            "name": "itemLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menu-item-label\"",
                            "description": "Class name of the item label element"
                        }
                    ]
                }
            }
        }
    },
    "menubar": {
        "description": "Menubar is a horizontal menu component.\n\n[Live Demo](https://www.primevue.org/menubar/)",
        "components": {
            "default": {
                "description": "Menubar is a horizontal menu component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenubarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MenubarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MenubarProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "rootList",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "itemContent",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item content's DOM element."
                        },
                        {
                            "name": "itemLink",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item link's DOM element."
                        },
                        {
                            "name": "itemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item icon's DOM element."
                        },
                        {
                            "name": "itemLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mobile menu button's DOM element."
                        },
                        {
                            "name": "buttonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mobile menu button icon's DOM element."
                        },
                        {
                            "name": "submenu",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the start of the component."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the end of the component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "MenubarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MenubarFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item index"
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item level"
                        },
                        {
                            "name": "parentKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Parent key info"
                        }
                    ],
                    "methods": []
                },
                "MenubarState": {
                    "description": "Defines current inline state in Menubar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "mobileActive",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current mobile menu active state as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedItemInfo",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarFocusedItemInfo",
                            "default": "",
                            "description": "Current focused item info."
                        },
                        {
                            "name": "activeItemPath",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarFocusedItemInfo[]",
                            "default": "",
                            "description": "Active item path."
                        }
                    ],
                    "methods": []
                },
                "MenubarContext": {
                    "description": "Defines current options in Menubar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the menuitem."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current level of the menuitem."
                        }
                    ],
                    "methods": []
                },
                "MenubarRouterBindProps": {
                    "description": "Defines valid router binding props in Menubar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        },
                        {
                            "name": "submenuicon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Submenuicon elemnt binding"
                        }
                    ],
                    "methods": []
                },
                "MenubarProps": {
                    "description": "Defines valid properties in Menubar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary."
                        },
                        {
                            "name": "buttonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the menu button."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MenubarPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "MenubarSlots": {
                    "description": "Defines valid slots in Menubar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">MenubarRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">root</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// State of the root</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "menubutton",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">id</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Current id state as a string</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Toggle event</span>\n}",
                                    "description": "menu button slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. use 'button' slot instead.\nCustom menu button template on responsive mode."
                        },
                        {
                            "name": "button",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">id</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Current id state as a string</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Toggle event</span>\n}",
                                    "description": "menu button slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu button template on responsive mode."
                        },
                        {
                            "name": "menubuttonicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. use 'buttonicon' slot instead.\nCustom menu button icon template on responsive mode."
                        },
                        {
                            "name": "buttonicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu button icon template on responsive mode."
                        },
                        {
                            "name": "submenuicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">root</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is root</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is active</span>\n }",
                                    "description": "submenuicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom submenu icon template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        }
                    ]
                },
                "MenubarEmitsOptions": {
                    "description": "Defines valid emits in Menubar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MenubarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "MenubarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "MenubarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "MenubarFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "props": []
                },
                "MenubarState": {
                    "description": "Defines current inline state in Menubar component.",
                    "props": []
                },
                "MenubarContext": {
                    "description": "Defines current options in Menubar component.",
                    "props": []
                },
                "MenubarRouterBindProps": {
                    "description": "Defines valid router binding props in Menubar component.",
                    "props": []
                },
                "MenubarProps": {
                    "description": "Defines valid properties in Menubar component.",
                    "props": []
                },
                "MenubarSlots": {
                    "description": "Defines valid slots in Menubar component.",
                    "props": []
                },
                "MenubarEmitsOptions": {
                    "description": "Defines valid emits in Menubar component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MenubarPassThroughOptionType": {
                    "values": "MenubarPassThroughAttributes | (options: MenubarPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "MenubarEmits": {
                    "values": "EmitFn<MenubarEmitsOptions>"
                }
            }
        }
    },
    "menubarstyle": {
        "description": "Menubar is a horizontal menu component.\n\n[Live Demo](https://www.primevue.org/menubar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenubarStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MenubarStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "MenubarClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "start",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-start\"",
                            "description": "Class name of the start element"
                        },
                        {
                            "name": "button",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-button\"",
                            "description": "Class name of the button element"
                        },
                        {
                            "name": "rootList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-root-list\"",
                            "description": "Class name of the root list element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "itemContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-item-content\"",
                            "description": "Class name of the item content element"
                        },
                        {
                            "name": "itemLink",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-item-link\"",
                            "description": "Class name of the item link element"
                        },
                        {
                            "name": "itemIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-item-icon\"",
                            "description": "Class name of the item icon element"
                        },
                        {
                            "name": "itemLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-item-label\"",
                            "description": "Class name of the item label element"
                        },
                        {
                            "name": "submenuIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-submenu-icon\"",
                            "description": "Class name of the submenu icon element"
                        },
                        {
                            "name": "submenu",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-submenu\"",
                            "description": "Class name of the submenu element"
                        },
                        {
                            "name": "separator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-separator\"",
                            "description": "Class name of the separator element"
                        },
                        {
                            "name": "end",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menubar-end\"",
                            "description": "Class name of the end element"
                        }
                    ]
                }
            }
        }
    },
    "menuitem": {
        "description": "PrimeVue menu components share a common api to specify the menuitems and submenus.",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenuItemCommandEvent": {
                    "description": "Custom command event.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem",
                            "default": "",
                            "description": "Menuitem instance."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MenuItem": {
                    "description": "Defines model of MenuItem API.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an item."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the item."
                        },
                        {
                            "name": "command",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "url",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "External link to navigate when item is clicked."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of children menuitems."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | Function",
                            "default": "false",
                            "description": "A boolean or a function to return a boolean to specify if the item is disabled."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | Function",
                            "default": "true",
                            "description": "A boolean or a function to return a boolean to specify if the item is visible."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specifies where to open the linked document."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the item as a separator."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the menuitem."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the menuitem."
                        },
                        {
                            "name": "key",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of an item."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MenuItemCommandEvent": {
                    "description": "Custom command event.",
                    "props": []
                },
                "MenuItem": {
                    "description": "Defines model of MenuItem API.",
                    "props": []
                }
            }
        }
    },
    "message": {
        "description": "Message groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/message/)",
        "components": {
            "default": {
                "description": "Messages is used to display inline messages with various severities.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MessagePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MessageProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MessageState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MessagePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MessageProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the text's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the button icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughTransitionType<T>",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "MessagePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MessageState": {
                    "description": "Defines current inline state in Message component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "MessageProps": {
                    "description": "Defines valid properties in Message component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"error\" | \"secondary\" | \"info\" | \"success\" | \"warn\" | \"contrast\">",
                            "default": "info",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the message can be closed manually using the close icon."
                        },
                        {
                            "name": "sticky",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "",
                            "deprecated": "since 4.0.\nWhen enabled, message is not removed automatically."
                        },
                        {
                            "name": "life",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "null",
                            "description": "Delay in milliseconds to close the message automatically."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Display a custom icon for the message."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the message close button."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the close button."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MessagePassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"outlined\" | \"simple\"",
                            "default": "undefined",
                            "description": "Specifies the variant of the component."
                        }
                    ],
                    "methods": []
                },
                "MessageSlots": {
                    "description": "Defines valid slots in Message slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default custom slot."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message icon template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "closeicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close message function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "MessageEmitsOptions": {
                    "description": "Defines valid emits in Message component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a message is closed."
                        },
                        {
                            "name": "life-end",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the message's timeout is over."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MessagePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "MessagePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "MessagePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "MessageState": {
                    "description": "Defines current inline state in Message component.",
                    "props": []
                },
                "MessageProps": {
                    "description": "Defines valid properties in Message component.",
                    "props": []
                },
                "MessageSlots": {
                    "description": "Defines valid slots in Message slots.",
                    "props": []
                },
                "MessageEmitsOptions": {
                    "description": "Defines valid emits in Message component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MessagePassThroughOptionType": {
                    "values": "MessagePassThroughAttributes | (options: MessagePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "MessagePassThroughTransitionType": {
                    "values": "TransitionProps | (options: MessagePassThroughMethodOptions) => TransitionProps | undefined"
                },
                "MessageEmits": {
                    "values": "EmitFn<MessageEmitsOptions>"
                }
            }
        }
    },
    "messagestyle": {
        "description": "Message groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/message/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MessageStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MessageStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "MessageClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-message\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-message-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-message-icon\"",
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "text",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-message-text\"",
                            "description": "Class name of the text element"
                        },
                        {
                            "name": "closeButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-message-close-button\"",
                            "description": "Class name of the close button element"
                        },
                        {
                            "name": "closeIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-message-close-icon\"",
                            "description": "Class name of the close icon element"
                        }
                    ]
                }
            }
        }
    },
    "metergroup": {
        "description": "MeterGroup is a group of process status indicators.\n\n[Live Demo](https://primevue.org/metergroup)",
        "components": {
            "default": {
                "description": "MeterGroup is a group of process status indicators.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupContext",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MeterGroupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "meters",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the meter container's DOM element."
                        },
                        {
                            "name": "meter",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the meter's DOM element."
                        },
                        {
                            "name": "labelList",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label list's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label list item's DOM element."
                        },
                        {
                            "name": "labelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label icon type's DOM element."
                        },
                        {
                            "name": "labelMarker",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label list type's DOM element."
                        },
                        {
                            "name": "labelText",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MeterGroupContext": {
                    "description": "Defines current options in MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterItem",
                            "default": "",
                            "description": "Current value of the meter item"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the meter item"
                        }
                    ],
                    "methods": []
                },
                "MeterItem": {
                    "description": "Defines valid properties of a meter item.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current label of the meter item."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value of the meter item."
                        },
                        {
                            "name": "color",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current color of the meter item."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current icon of the meter item."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MeterGroupProps": {
                    "description": "Defines valid properties in MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterItem[]",
                            "default": "",
                            "description": "Current value of the metergroup."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the layout of the component, valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "labelPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"start\" | \"end\"",
                            "default": "end",
                            "description": "Specifies the label position of the component, valid values are 'start' and 'end'."
                        },
                        {
                            "name": "labelOrientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the label orientation of the component, valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MeterGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupSlots": {
                    "description": "Defines valid slots in MeterGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "label",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">MeterItem</span>, <span class=\"doc-option-parameter-type\">// Current value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">totalPercent</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total percent of the metergroup items</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">percentages</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Array of sequential sum of values of metergroup items</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom label template."
                        },
                        {
                            "name": "meter",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">MeterItem</span>, <span class=\"doc-option-parameter-type\">// Current value of the meter item</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Current index of the meter item</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the meter item</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">orientation</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Current orientation of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">size</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Current width of the meter item</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">totalPercent</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total percent of the metergroup items</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom meter template."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">MeterItem</span>, <span class=\"doc-option-parameter-type\">// Current value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "start",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">MeterItem</span>, <span class=\"doc-option-parameter-type\">// Current value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">totalPercent</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total percent of the metergroup items</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">percentages</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Array of sequential sum of values of metergroup items</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">MeterItem</span>, <span class=\"doc-option-parameter-type\">// Current value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">totalPercent</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total percent of the metergroup items</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">percentages</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Array of sequential sum of values of metergroup items</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        }
                    ]
                },
                "MeterGroupEmitsOptions": {
                    "description": "Defines valid emits in MeterGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MeterGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "MeterGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "MeterGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "MeterGroupContext": {
                    "description": "Defines current options in MeterGroup component.",
                    "props": []
                },
                "MeterItem": {
                    "description": "Defines valid properties of a meter item.",
                    "props": []
                },
                "MeterGroupProps": {
                    "description": "Defines valid properties in MeterGroup component.",
                    "props": []
                },
                "MeterGroupSlots": {
                    "description": "Defines valid slots in MeterGroup component.",
                    "props": []
                },
                "MeterGroupEmitsOptions": {
                    "description": "Defines valid emits in MeterGroup component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupPassThroughOptionType": {
                    "values": "MeterGroupPassThroughAttributes | (options: MeterGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "MeterGroupEmits": {
                    "values": "EmitFn<MeterGroupEmitsOptions>"
                }
            }
        }
    },
    "metergroupstyle": {
        "description": "MeterGroup is a group of process status indicators.\n\n[Live Demo](https://primevue.org/metergroup)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MeterGroupStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "MeterGroupClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-metergroup\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "meters",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-metergroup-meters\"",
                            "description": "Class name of the meters element"
                        },
                        {
                            "name": "meter",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-metergroup-meter\"",
                            "description": "Class name of the meter element"
                        },
                        {
                            "name": "labelList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-metergroup-label-list\"",
                            "description": "Class name of the label list element"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-metergroup-label\"",
                            "description": "Class name of the label element"
                        },
                        {
                            "name": "labelIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-metergroup-label-icon\"",
                            "description": "Class name of the label icon element"
                        },
                        {
                            "name": "labelMarker",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-metergroup-label-marker\"",
                            "description": "Class name of the label marker element"
                        },
                        {
                            "name": "labelText",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-metergroup-label-text\"",
                            "description": "Class name of the label text element"
                        }
                    ]
                }
            }
        }
    },
    "multiselect": {
        "description": "MultiSelect is used to select multiple items from a collection.\n\n[Live Demo](https://www.primevue.org/multiselect/)",
        "components": {
            "default": {
                "description": "MultiSelect is used to select multiple items from a collection.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MultiSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "MultiSelectEmitsOptions.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "MultiSelectAllChangeEvent": {
                    "description": "Custom all change event.",
                    "relatedProp": "MultiSelectEmitsOptions['selectall-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether all data is selected."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectFilterEvent": {
                    "description": "Custom filter event",
                    "relatedProp": "MultiSelectEmitsOptions.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "MultiSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MultiSelectProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "labelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label container's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "chipItem",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the chip's DOM element."
                        },
                        {
                            "name": "pcChip",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Chip."
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown icon's DOM element."
                        },
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the overlay's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "pcHeaderCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header checkbox's DOM element."
                        },
                        {
                            "name": "pcFilterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the IconField component."
                        },
                        {
                            "name": "pcFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "pcFilterIconContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputIcon component."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter icon's DOM element."
                        },
                        {
                            "name": "listContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list container's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "optionGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option group's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option's DOM element."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option label's DOM element."
                        },
                        {
                            "name": "pcOptionCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option checkbox's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the emptyMessage's DOM element."
                        },
                        {
                            "name": "hiddenInputContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden input container's DOM element."
                        },
                        {
                            "name": "hiddenInput",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden input's DOM element."
                        },
                        {
                            "name": "hiddenFirstFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden first focusable element's DOM element."
                        },
                        {
                            "name": "hiddenFilterResult",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden filter result's DOM element."
                        },
                        {
                            "name": "hiddenSelectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden selected message's DOM element."
                        },
                        {
                            "name": "hiddenLastFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden last focusable element's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MultiSelectState": {
                    "description": "Defines current inline state in MultiSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "-1",
                            "description": "Current focused item index as a number."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter value state as a string."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectContext": {
                    "description": "Defines current options in MultiSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selection state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectProps": {
                    "description": "Defines valid properties in MultiSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of select items to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "14rem",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label to display when there are no selections."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4.0. Use 'overlayStyle' instead.\nInline style of the overlay."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4.0. Use 'overlayClass' instead.\nStyle class of the overlay."
                        },
                        {
                            "name": "overlayStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the overlay."
                        },
                        {
                            "name": "overlayClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the overlay."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "showClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in clear button."
                        },
                        {
                            "name": "resetFilterOnClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when clicking on the clear icon."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays a filter input at header."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"startsWith\" | \"contains\" | \"endsWith\">",
                            "default": "contains",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "filterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "\"comma\" | \"chip\"",
                            "default": "comma",
                            "description": "Defines how the selected items are displayed."
                        },
                        {
                            "name": "selectedItemsLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "null",
                            "description": "Label to display after exceeding max selected labels."
                        },
                        {
                            "name": "maxSelectedLabels",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Decides how many selected item labels to show at most."
                        },
                        {
                            "name": "selectionLimit",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of selectable items."
                        },
                        {
                            "name": "showToggleAll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the header checkbox to toggle the selection of all items at once."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the multiselect is in loading state."
                        },
                        {
                            "name": "checkboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the checkboxes."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dropdown."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in filter input."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in chip remove action."
                        },
                        {
                            "name": "chipIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in chip remove action."
                        },
                        {
                            "name": "selectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether all data is selected."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when hiding the dropdown."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "autoFilterFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the filter element when the overlay panel is shown."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "highlightOnSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Highlights automatically the first item."
                        },
                        {
                            "name": "filterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "null",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No available options'",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MultiSelectPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectSlots": {
                    "description": "Defines valid slots in MultiSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">placeholder</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Placeholder prop value</span>\n }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        },
                        {
                            "name": "chip",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// A value in the selection</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">item</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Chip icon function.</span>\n}",
                                    "description": "chip slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option group slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option group template."
                        },
                        {
                            "name": "emptyfilter",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom emptyfilter template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// An array of objects to display for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">styleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">contentRef</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">el</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Referance of the content</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">getItemOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Options of the items</span>\n}",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "removetokenicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item of the token.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">item</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Chip icon function.</span>\n}",
                                    "description": "removetokenicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'chipicon' slot instead.\nCustom chip icon template."
                        },
                        {
                            "name": "chipicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item of the token.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">item</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Chip icon function.</span>\n}",
                                    "description": "chipicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip icon template."
                        },
                        {
                            "name": "headercheckboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">allSelected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "header checkbox icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header checkbox icon template."
                        },
                        {
                            "name": "filtericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "filtericon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter icon template."
                        },
                        {
                            "name": "itemcheckboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the data is selected.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "itemcheckboxicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item checkbox icon template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "loading icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "clearicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">clearCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Clear icon click function.</span>\n}",
                                    "description": "clear icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom clear icon template."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "dropdownicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom dropdown icon template."
                        }
                    ]
                },
                "MultiSelectEmitsOptions": {
                    "description": "Defines valid emits in MultiSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filter input."
                        },
                        {
                            "name": "selectall-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectAllChangeEvent",
                                    "description": "Custom select all change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all data is selected."
                        }
                    ]
                },
                "MultiSelectMethods": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "isFocus",
                                    "optional": true,
                                    "type": "boolean",
                                    "description": "Decides whether to focus on the component. Default value is false."
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [
                                {
                                    "name": "isFocus",
                                    "optional": true,
                                    "type": "boolean",
                                    "description": "Decides whether to focus on the component. Default value is false."
                                }
                            ],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MultiSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "MultiSelectSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "MultiSelectChangeEvent": {
                    "description": "Custom change event.",
                    "props": []
                },
                "MultiSelectAllChangeEvent": {
                    "description": "Custom all change event.",
                    "props": []
                },
                "MultiSelectFilterEvent": {
                    "description": "Custom filter event",
                    "props": []
                },
                "MultiSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "MultiSelectPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "MultiSelectState": {
                    "description": "Defines current inline state in MultiSelect component.",
                    "props": []
                },
                "MultiSelectContext": {
                    "description": "Defines current options in MultiSelect component.",
                    "props": []
                },
                "MultiSelectProps": {
                    "description": "Defines valid properties in MultiSelect component.",
                    "props": []
                },
                "MultiSelectSlots": {
                    "description": "Defines valid slots in MultiSelect component.",
                    "props": []
                },
                "MultiSelectEmitsOptions": {
                    "description": "Defines valid emits in MultiSelect component.",
                    "props": []
                },
                "MultiSelectMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MultiSelectPassThroughOptionType": {
                    "values": "MultiSelectPassThroughAttributes | (options: MultiSelectPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "MultiSelectPassThroughTransitionType": {
                    "values": "TransitionProps | (options: MultiSelectPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "MultiSelectEmits": {
                    "values": "EmitFn<MultiSelectEmitsOptions>"
                }
            }
        }
    },
    "multiselectstyle": {
        "description": "MultiSelect is used to select multiple items from a collection.\n\n[Live Demo](https://www.primevue.org/multiselect/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MultiSelectStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "MultiSelectStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "MultiSelectClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "labelContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-label-container\"",
                            "description": "Class name of the label container element"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-label\"",
                            "description": "Class name of the label element"
                        },
                        {
                            "name": "clearIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-clear-icon\"",
                            "description": "Class name of the clear icon element"
                        },
                        {
                            "name": "chipItem",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-chip-item\"",
                            "description": "Class name of the chip item element"
                        },
                        {
                            "name": "pcChip",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-chip\"",
                            "description": "Class name of the chip element"
                        },
                        {
                            "name": "chipIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-chip-icon\"",
                            "description": "Class name of the chip icon element"
                        },
                        {
                            "name": "dropdown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-dropdown\"",
                            "description": "Class name of the dropdown element"
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-loading-icon\"",
                            "description": "Class name of the loading icon element"
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-dropdown-icon\"",
                            "description": "Class name of the dropdown icon element"
                        },
                        {
                            "name": "overlay",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-overlay\"",
                            "description": "Class name of the overlay element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "pcFilterContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-filter-container\"",
                            "description": "Class name of the filter container element"
                        },
                        {
                            "name": "pcFilter",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-filter\"",
                            "description": "Class name of the filter element"
                        },
                        {
                            "name": "listContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-list-container\"",
                            "description": "Class name of the list container element"
                        },
                        {
                            "name": "list",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-list\"",
                            "description": "Class name of the list element"
                        },
                        {
                            "name": "optionGroup",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-option-group\"",
                            "description": "Class name of the option group element"
                        },
                        {
                            "name": "option",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-option\"",
                            "description": "Class name of the option element"
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-multiselect-empty-message\"",
                            "description": "Class name of the empty message element"
                        }
                    ]
                }
            }
        }
    },
    "orderlist": {
        "description": "OrderList is used to managed the order of a collection.\n\n[Live Demo](https://primevue.org/orderlist)",
        "components": {
            "default": {
                "description": "OrderList is used to sort a collection.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OrderListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "OrderListSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "OrderListReorderEvent": {
                    "description": "Custom reorder event",
                    "relatedProp": "OrderListEmitsOptions.reorder",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Ordered list"
                        },
                        {
                            "name": "direction",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Direction of the change; 'up', 'down', 'bottom', 'top'"
                        }
                    ],
                    "methods": []
                },
                "OrderListSelectionChangeEvent": {
                    "description": "Custom selection change event",
                    "relatedProp": "OrderListEmitsOptions['selection-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Ordered list"
                        }
                    ],
                    "methods": []
                },
                "OrderListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "OrderListProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "controls",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the controls' DOM element."
                        },
                        {
                            "name": "pcMoveUpButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcMoveTopButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcMoveDownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcMoveBottomButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcListbox",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Listbox component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "OrderListPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrderListState": {
                    "description": "Defines current inline state in OrderList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "d_selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current id state as a string."
                        }
                    ],
                    "methods": []
                },
                "OrderListProps": {
                    "description": "Defines valid properties in OrderList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Selected items in the list."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines whether metaKey is required or not for the selection.\nWhen true metaKey needs to be pressed to select or unselect an item and\nwhen set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "listStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the the list element."
                        },
                        {
                            "name": "responsive",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the list optimizes layout based on screen size."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "striped",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "14rem",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "buttonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the button inside the component."
                        },
                        {
                            "name": "moveUpButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move up button inside the component."
                        },
                        {
                            "name": "moveTopButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move top button inside the component."
                        },
                        {
                            "name": "moveDownButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move down button inside the component."
                        },
                        {
                            "name": "moveBottomButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move bottom button inside the component."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive list element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying list element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<OrderListPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "OrderListSlots": {
                    "description": "Defines valid slots in OrderList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the item.</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use option slot instead.\nCustom item template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option.</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "controlsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom controls start template."
                        },
                        {
                            "name": "controlsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom controls end template."
                        },
                        {
                            "name": "moveupicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move up icon template."
                        },
                        {
                            "name": "movetopicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move top icon template."
                        },
                        {
                            "name": "movedownicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move down icon template."
                        },
                        {
                            "name": "movebottomicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move bottom icon template."
                        }
                    ]
                },
                "OrderListEmitsOptions": {
                    "description": "Defines valid slots in OrderList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "update:selection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection changes."
                        },
                        {
                            "name": "reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "OrderListReorderEvent",
                                    "description": "Custom reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the list is reordered."
                        },
                        {
                            "name": "selection-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "OrderListSelectionChangeEvent",
                                    "description": "Custom selection change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection changes."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "OrderListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "OrderListSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "OrderListReorderEvent": {
                    "description": "Custom reorder event",
                    "props": []
                },
                "OrderListSelectionChangeEvent": {
                    "description": "Custom selection change event",
                    "props": []
                },
                "OrderListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "OrderListPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "OrderListState": {
                    "description": "Defines current inline state in OrderList component.",
                    "props": []
                },
                "OrderListProps": {
                    "description": "Defines valid properties in OrderList component.",
                    "props": []
                },
                "OrderListSlots": {
                    "description": "Defines valid slots in OrderList component.",
                    "props": []
                },
                "OrderListEmitsOptions": {
                    "description": "Defines valid slots in OrderList component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OrderListPassThroughOptionType": {
                    "values": "OrderListPassThroughAttributes | (options: OrderListPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "OrderListPassThroughTransitionType": {
                    "values": "TransitionProps | (options: OrderListPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "OrderListEmits": {
                    "values": "EmitFn<OrderListEmitsOptions>"
                }
            }
        }
    },
    "orderliststyle": {
        "description": "OrderList is used to managed the order of a collection.\n\n[Live Demo](https://primevue.org/orderlist)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OrderListStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "OrderListStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "OrderListClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-orderlist\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "controls",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-orderlist-controls\"",
                            "description": "Class name of the controls element"
                        }
                    ]
                }
            }
        }
    },
    "organizationchart": {
        "description": "OrganizationChart visualizes hierarchical organization data.\n\n[Live Demo](https://primevue.org/organizationchart)",
        "components": {
            "default": {
                "description": "OrganizationChart visualizes hierarchical organization data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OrganizationChartPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OrganizationChartProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "OrganizationChartState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "OrganizationChartContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartNode": {
                    "description": "Defines valid properties in OrganizationChartNode.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "key",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Unique identifier of the node. (required)"
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the node to match a template."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the node content."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Data represented by the node."
                        },
                        {
                            "name": "selectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether node is selectable when selection is enabled."
                        },
                        {
                            "name": "collapsible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether node is collapsible when node expansion is enabled."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartNode[]",
                            "default": "",
                            "description": "Children nodes array."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartSelectionKeys": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartCollapsedKeys": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "OrganizationChartProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "table",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "body",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the body's DOM element."
                        },
                        {
                            "name": "row",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row' DOM element."
                        },
                        {
                            "name": "cell",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the cell's DOM element."
                        },
                        {
                            "name": "node",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the node's DOM element."
                        },
                        {
                            "name": "nodeToggleButton",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the node toggle button's DOM element."
                        },
                        {
                            "name": "nodeToggleButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the node toggle button icon's DOM element."
                        },
                        {
                            "name": "connectors",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the connectors's DOM element."
                        },
                        {
                            "name": "lineCell",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the lineCell's DOM element."
                        },
                        {
                            "name": "connectorDown",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the connector down's DOM element."
                        },
                        {
                            "name": "connectorLeft",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the connector left's DOM element."
                        },
                        {
                            "name": "connectorRight",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the connector right's DOM element."
                        },
                        {
                            "name": "nodeChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the node children's DOM element."
                        },
                        {
                            "name": "nodeCell",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the nodeCell's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartState": {
                    "description": "Defines current inline state in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_collapsedKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "OrganizationChartCollapsedKeys",
                            "default": "false",
                            "description": "Current collapsed keys' state."
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartContext": {
                    "description": "Defines current options in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "expanded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus expanded of the node as a boolean."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selectable state of the node as a boolean."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selection state of the node as a boolean."
                        },
                        {
                            "name": "toggleable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current toggleable state of the node as a boolean."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the node as a boolean."
                        },
                        {
                            "name": "lineTop",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current being top line state of the node as a boolean."
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartProps": {
                    "description": "Defines valid properties in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartNode",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "selectionKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartSelectionKeys",
                            "default": "",
                            "description": "A map instance of key-value pairs to represented the selected nodes."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"single\" | \"multiple\"",
                            "default": "",
                            "description": "Type of the selection."
                        },
                        {
                            "name": "collapsedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartCollapsedKeys",
                            "default": "",
                            "description": "A map instance of key-value pairs to represented the collapsed nodes."
                        },
                        {
                            "name": "collapsible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the nodes can be expanded or toggled."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<OrganizationChartPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartSlots": {
                    "description": "Defines valid slots in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Current node</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "togglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Curent state of the node</span>\n }",
                                    "description": "togglericon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'toggleicon' slot instead.\nCustom toggler icon template."
                        },
                        {
                            "name": "toggleicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Curent state of the node</span>\n }",
                                    "description": "togglericon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom toggler icon template."
                        }
                    ]
                },
                "OrganizationChartEmitsOptions": {
                    "description": "Defines valid emits in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:selectionKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "update:collapsedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-collapsed",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "OrganizationChartPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "OrganizationChartNode": {
                    "description": "Defines valid properties in OrganizationChartNode.",
                    "props": []
                },
                "OrganizationChartSelectionKeys": {
                    "props": []
                },
                "OrganizationChartCollapsedKeys": {
                    "props": []
                },
                "OrganizationChartPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "OrganizationChartPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "OrganizationChartState": {
                    "description": "Defines current inline state in OrganizationChart component.",
                    "props": []
                },
                "OrganizationChartContext": {
                    "description": "Defines current options in OrganizationChart component.",
                    "props": []
                },
                "OrganizationChartProps": {
                    "description": "Defines valid properties in OrganizationChart component.",
                    "props": []
                },
                "OrganizationChartSlots": {
                    "description": "Defines valid slots in OrganizationChart component.",
                    "props": []
                },
                "OrganizationChartEmitsOptions": {
                    "description": "Defines valid emits in OrganizationChart component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OrganizationChartPassThroughOptionType": {
                    "values": "OrganizationChartPassThroughAttributes | (options: OrganizationChartPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "OrganizationChartEmits": {
                    "values": "EmitFn<OrganizationChartEmitsOptions>"
                }
            }
        }
    },
    "organizationchartstyle": {
        "description": "OrganizationChart visualizes hierarchical organization data.\n\n[Live Demo](https://primevue.org/organizationchart)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OrganizationChartStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "OrganizationChartStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "OrganizationChartClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-organizationchart\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "table",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-organizationchart-table\"",
                            "description": "Class name of the table element"
                        },
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-organizationchart-node\"",
                            "description": "Class name of the node element"
                        },
                        {
                            "name": "nodeToggleButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-organizationchart-node-toggle-button\"",
                            "description": "Class name of the node toggle button element"
                        },
                        {
                            "name": "nodeToggleButtonIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-organizationchart-node-toggle-button-icon\"",
                            "description": "Class name of the node toggle button icon element"
                        },
                        {
                            "name": "connectors",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-organizationchart-connectors\"",
                            "description": "Class name of the connectors element"
                        },
                        {
                            "name": "connectorDown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-organizationchart-connector-down\"",
                            "description": "Class name of the connector down element"
                        },
                        {
                            "name": "connectorLeft",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-organizationchart-connector-left\"",
                            "description": "Class name of the connector left element"
                        },
                        {
                            "name": "connectorRight",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-organizationchart-connector-right\"",
                            "description": "Class name of the connector right element"
                        },
                        {
                            "name": "nodeChildren",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-organizationchart-node-children\"",
                            "description": "Class name of the node children element"
                        }
                    ]
                }
            }
        }
    },
    "overlaybadge": {
        "description": "OverlayBadge represents people using icon, label, image and badge.\n\n[Live Demo](https://www.primevue.org/badge)",
        "components": {
            "default": {
                "description": "OverlayBadge represents people using icon, label, image and badge.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OverlayBadgePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayBadgeProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        }
                    ],
                    "methods": []
                },
                "OverlayBadgeSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayBadgeProps",
                            "default": "",
                            "description": "Defines valid properties."
                        }
                    ],
                    "methods": []
                },
                "OverlayBadgePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OverlayBadgePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "OverlayBadgeProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayBadgePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "pcBadge",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Badge."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "OverlayBadgeProps": {
                    "description": "Defines valid properties in OverlayBadge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value to display inside the badge."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HintedString<\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\">",
                            "default": "",
                            "description": "Severity type of the badge."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"small\" | \"large\" | \"xlarge\"",
                            "default": "",
                            "description": "Size of the badge, valid options are 'small', 'large', and 'xlarge'."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<OverlayBadgePassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "OverlayBadgeSlots": {
                    "description": "Defines valid slots in OverlayBadge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Content can easily be customized with the default slot instead of using the built-in display."
                        }
                    ]
                },
                "OverlayBadgeEmitsOptions": {
                    "description": "Defines valid emits in OverlayBadge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "OverlayBadgePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "OverlayBadgeSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "OverlayBadgePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "OverlayBadgePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "OverlayBadgeProps": {
                    "description": "Defines valid properties in OverlayBadge component.",
                    "props": []
                },
                "OverlayBadgeSlots": {
                    "description": "Defines valid slots in OverlayBadge component.",
                    "props": []
                },
                "OverlayBadgeEmitsOptions": {
                    "description": "Defines valid emits in OverlayBadge component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OverlayBadgePassThroughOptionType": {
                    "values": "OverlayBadgePassThroughAttributes | (options: OverlayBadgePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "OverlayBadgeEmits": {
                    "values": "EmitFn<OverlayBadgeEmitsOptions>"
                }
            }
        }
    },
    "overlaybadgestyle": {
        "description": "OverlayBadge wraps an input and an icon.\n\n[Live Demo](https://www.primevue.org/badge/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OverlayBadgeStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "OverlayBadgeStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "OverlayBadgeClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-overlaybadge\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "overlaypanel": {
        "description": "OverlayPanel is a container component positioned as connected to its target.\n\n[Live Demo](https://primevue.org/popover)",
        "components": {
            "default": {
                "description": "",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OverlayPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "OverlayPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "undefined.OverlayPanelProps.pt",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "OverlayPanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "OverlayPanelState": {
                    "description": "Defines current inline state in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "OverlayPanelBreakpoints": {
                    "description": "OverlayPanel breakpoint metadata.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "OverlayPanelProps": {
                    "description": "Defines valid properties in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "OverlayPanelSlots": {
                    "description": "Defines valid slots in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "OverlayPanelEmitsOptions": {
                    "description": "Defines valid emits in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "OverlayPanelMethods": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "alignOverlay",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Aligns overlay panel based on the current position of the container."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "optional": true,
                                    "type": "any",
                                    "description": "Optional target if event.currentTarget should not be used."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the overlay."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "optional": true,
                                    "type": "any",
                                    "description": "Optional target if event.currentTarget should not be used."
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "OverlayPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "OverlayPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "OverlayPanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "OverlayPanelState": {
                    "description": "Defines current inline state in OverlayPanel component.",
                    "props": []
                },
                "OverlayPanelBreakpoints": {
                    "description": "OverlayPanel breakpoint metadata.",
                    "props": []
                },
                "OverlayPanelProps": {
                    "description": "Defines valid properties in OverlayPanel component.",
                    "props": []
                },
                "OverlayPanelSlots": {
                    "description": "Defines valid slots in OverlayPanel component.",
                    "props": []
                },
                "OverlayPanelEmitsOptions": {
                    "description": "Defines valid emits in OverlayPanel component.",
                    "props": []
                },
                "OverlayPanelMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OverlayPanelEmits": {
                    "values": "EmitFn<OverlayPanelEmitsOptions> & Popover.PopoverEmits"
                }
            }
        }
    },
    "overlaypanelstyle": {
        "description": "OverlayPanel is a container component positioned as connected to its target.\n\n[Live Demo](https://primevue.org/popover)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OverlayPanelStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "OverlayPanelStyle": {
                    "props": []
                }
            }
        }
    },
    "paginator": {
        "description": "Paginator is a generic component to display content in paged format.\n\n[Live Demo](https://primevue.org/paginator)",
        "components": {
            "default": {
                "description": "Paginator is a generic widget to display content in paged format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PaginatorPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "PaginatorSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "PaginatorPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PaginatorProps.pt",
                    "props": [
                        {
                            "name": "paginatorContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the paginator container's DOM element."
                        },
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the content DOM element."
                        },
                        {
                            "name": "contentStart",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the content start's DOM element."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the first page button's DOM element."
                        },
                        {
                            "name": "firstIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the first icon's DOM element."
                        },
                        {
                            "name": "prev",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the prev page button's DOM element."
                        },
                        {
                            "name": "prevIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the prev page icon's DOM element."
                        },
                        {
                            "name": "next",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the next page button's DOM element."
                        },
                        {
                            "name": "nextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the next page icon's DOM element."
                        },
                        {
                            "name": "last",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the last page button's DOM element."
                        },
                        {
                            "name": "lastIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the last page icon's DOM element."
                        },
                        {
                            "name": "pages",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the pages's DOM element."
                        },
                        {
                            "name": "page",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the page button's DOM element."
                        },
                        {
                            "name": "current",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the current's DOM element."
                        },
                        {
                            "name": "pcRowPerPageDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "pcJumpToPageDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "pcJumpToPageInputText",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "contentEnd",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the content end's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "PaginatorPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PaginatorState": {
                    "description": "Defines current inline state in Paginator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of first record as a number."
                        },
                        {
                            "name": "d_rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current number of rows to display in new page as a number."
                        }
                    ],
                    "methods": []
                },
                "PaginatorContext": {
                    "description": "Defines current options in Paginator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the button as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PageState": {
                    "description": "Paginator page state metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "pageCount",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total number of pages"
                        }
                    ],
                    "methods": []
                },
                "PaginatorProps": {
                    "description": "Defines valid properties in Paginator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of total records."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Data count to display per page."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Zero-relative number of the first row to be displayed."
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Template of the paginator, can either be a string or an object with key-value pairs to define templates per breakpoint. Available templates are the following;\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state. Available placeholders are the following;\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "alwaysShow",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the paginator even there is only one page."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PaginatorPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "PaginatorSlots": {
                    "description": "Defines valid slots in Paginator component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "start",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">state</span>: <span class=\"doc-option-parameter-type\">PageState</span>, <span class=\"doc-option-parameter-type\">// Current state</span>\n }",
                                    "description": "start slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">state</span>: <span class=\"doc-option-parameter-type\">PageState</span>, <span class=\"doc-option-parameter-type\">// Current state</span>\n }",
                                    "description": "end slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "firstpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the jumptopagedropdown icon.</span>\n }",
                                    "description": "firstpagelinkicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'firsticon' slot instead.\nCustom first page link icon template."
                        },
                        {
                            "name": "firsticon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the jumptopagedropdown icon.</span>\n }",
                                    "description": "firsticon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom first page link icon template."
                        },
                        {
                            "name": "prevpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the jumptopagedropdown icon.</span>\n }",
                                    "description": "prevpagelinkicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'previcon' slot instead.\nCustom previous page link icon template."
                        },
                        {
                            "name": "previcon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the jumptopagedropdown icon.</span>\n }",
                                    "description": "previcon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom previous page link icon template."
                        },
                        {
                            "name": "nextpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the jumptopagedropdown icon.</span>\n }",
                                    "description": "nextpagelinkicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'nexticon' slot instead.\nCustom finextrst page link icon template."
                        },
                        {
                            "name": "nexticon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the jumptopagedropdown icon.</span>\n }",
                                    "description": "nexticon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom finextrst page link icon template."
                        },
                        {
                            "name": "lastpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the jumptopagedropdown icon.</span>\n }",
                                    "description": "lastpagelinkicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'lasticon' slot instead.\nCustom last page link icon template."
                        },
                        {
                            "name": "lasticon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the jumptopagedropdown icon.</span>\n }",
                                    "description": "lasticon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom last page link icon template."
                        },
                        {
                            "name": "rowsperpagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the rowsperpagedropdown icon.</span>\n }",
                                    "description": "rowsperpagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom rowsperpagedropdownicon template."
                        },
                        {
                            "name": "jumptopagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the jumptopagedropdown icon.</span>\n }",
                                    "description": "jumptopagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom jumptopagedropdownicon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">first</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of first record</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">last</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of last record</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">rows</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Number of rows to display in new page</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">page</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// New page number</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">pageCount</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total number of pages</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">totalRecords</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total records</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">firstPageCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// First page function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">lastPageCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Last page function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">prevPageCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Previous page function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">nextPageCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Next page function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">rowChangeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">value</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Row change function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "PaginatorEmitsOptions": {
                    "description": "Defines valid emits in Paginator component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        },
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PageState",
                                    "description": "New page state."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when page changes, the event object contains information about the new state."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PaginatorPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "PaginatorSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "PaginatorPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "PaginatorPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "PaginatorState": {
                    "description": "Defines current inline state in Paginator component.",
                    "props": []
                },
                "PaginatorContext": {
                    "description": "Defines current options in Paginator component.",
                    "props": []
                },
                "PageState": {
                    "description": "Paginator page state metadata.",
                    "props": []
                },
                "PaginatorProps": {
                    "description": "Defines valid properties in Paginator component.",
                    "props": []
                },
                "PaginatorSlots": {
                    "description": "Defines valid slots in Paginator component.",
                    "props": []
                },
                "PaginatorEmitsOptions": {
                    "description": "Defines valid emits in Paginator component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PaginatorPassThroughOptionType": {
                    "values": "PaginatorPassThroughAttributes | (options: PaginatorPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "PaginatorEmits": {
                    "values": "EmitFn<PaginatorEmitsOptions>"
                }
            }
        }
    },
    "paginatorstyle": {
        "description": "Paginator is a generic component to display content in paged format.\n\n[Live Demo](https://primevue.org/paginator)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PaginatorStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PaginatorStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "PaginatorClasses": {
                    "members": [
                        {
                            "name": "paginator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator\"",
                            "description": "Class name of the paginator element"
                        },
                        {
                            "name": "contentStart",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-content-start\"",
                            "description": "Class name of the content start element"
                        },
                        {
                            "name": "contentEnd",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-content-end\"",
                            "description": "Class name of the content end element"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-first\"",
                            "description": "Class name of the first element"
                        },
                        {
                            "name": "firstIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-first-icon\"",
                            "description": "Class name of the first icon element"
                        },
                        {
                            "name": "prev",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-prev\"",
                            "description": "Class name of the prev element"
                        },
                        {
                            "name": "prevIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-prev-icon\"",
                            "description": "Class name of the prev icon element"
                        },
                        {
                            "name": "next",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-next\"",
                            "description": "Class name of the next element"
                        },
                        {
                            "name": "nextIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-next-icon\"",
                            "description": "Class name of the next icon element"
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-last\"",
                            "description": "Class name of the last element"
                        },
                        {
                            "name": "lastIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-last-icon\"",
                            "description": "Class name of the last icon element"
                        },
                        {
                            "name": "pages",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-pages\"",
                            "description": "Class name of the pages element"
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-page\"",
                            "description": "Class name of the page element"
                        },
                        {
                            "name": "current",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-current\"",
                            "description": "Class name of the current element"
                        },
                        {
                            "name": "pcRowPerPageDropdown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-rpp-dropdown\"",
                            "description": "Class name of the row per page dropdown element"
                        },
                        {
                            "name": "pcJumpToPageDropdown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-jtp-dropdown\"",
                            "description": "Class name of the jump to page dropdown element"
                        },
                        {
                            "name": "pcJumpToPageInputText",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-paginator-jtp-input\"",
                            "description": "Class name of the jump to page input element"
                        }
                    ]
                }
            }
        }
    },
    "panel": {
        "description": "Panel is a container with the optional content toggle feature.\n\n[Live Demo](https://www.primevue.org/panel/)",
        "components": {
            "default": {
                "description": "Panel is a container with the optional content toggle feature.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "PanelSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "PanelToggleEvent": {
                    "description": "Custom toggle event.",
                    "relatedProp": "PanelEmitsOptions.toggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Collapsed state as a boolean"
                        }
                    ],
                    "methods": []
                },
                "PanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "headerActions",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header actions' DOM element."
                        },
                        {
                            "name": "pcToggleButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the toggle button button's DOM element."
                        },
                        {
                            "name": "contentContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content container's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "PanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PanelState": {
                    "description": "Defines current inline state in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_collapsed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current collapsed state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PanelProps": {
                    "description": "Defines valid properties in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header text of the panel."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if content of panel can be expanded and collapsed."
                        },
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the initial state of panel content."
                        },
                        {
                            "name": "toggleButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass the custom value to read for the button inside the component."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "PanelSlots": {
                    "description": "Defines valid slots in Panel slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">id</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Current id state as a string</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "icons",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icons template."
                        },
                        {
                            "name": "togglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">collapsed</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Collapsed state as a boolean</span>\n }",
                                    "description": "toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use the 'toggleicon' slot instead.\nCustom toggler icon template of panel."
                        },
                        {
                            "name": "toggleicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">collapsed</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Collapsed state as a boolean</span>\n }",
                                    "description": "toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom toggler icon template of panel."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        }
                    ]
                },
                "PanelEmitsOptions": {
                    "description": "Defines valid emits in Panel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:collapsed",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the collapsed changes."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PanelToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab toggle."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "PanelSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "PanelToggleEvent": {
                    "description": "Custom toggle event.",
                    "props": []
                },
                "PanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "PanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "PanelState": {
                    "description": "Defines current inline state in Panel component.",
                    "props": []
                },
                "PanelProps": {
                    "description": "Defines valid properties in Panel component.",
                    "props": []
                },
                "PanelSlots": {
                    "description": "Defines valid slots in Panel slots.",
                    "props": []
                },
                "PanelEmitsOptions": {
                    "description": "Defines valid emits in Panel component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PanelPassThroughOptionType": {
                    "values": "PanelPassThroughAttributes | (options: PanelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "PanelPassThroughTransitionType": {
                    "values": "TransitionProps | (options: PanelPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "PanelEmits": {
                    "values": "EmitFn<PanelEmitsOptions>"
                }
            }
        }
    },
    "panelstyle": {
        "description": "Panel is a container with the optional content toggle feature.\n\n[Live Demo](https://www.primevue.org/panel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PanelStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "PanelClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panel\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panel-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "title",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panel-title\"",
                            "description": "Class name of the title element"
                        },
                        {
                            "name": "headerActions",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panel-header-actions\"",
                            "description": "Class name of the header actions element"
                        },
                        {
                            "name": "pcToggleButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panel-toggle-button\"",
                            "description": "Class name of the toggle button element"
                        },
                        {
                            "name": "contentContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panel-content-container\"",
                            "description": "Class name of the content container element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panel-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "footer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panel-footer\"",
                            "description": "Class name of the footer element"
                        }
                    ]
                }
            }
        }
    },
    "panelmenu": {
        "description": "PanelMenu is a hybrid of Accordion and Tree components.\n\n[Live Demo](https://www.primevue.org/panelmenu/)",
        "components": {
            "default": {
                "description": "PanelMenu is a hybrid of Accordion and Tree components.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelMenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelMenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelMenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "PanelMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PanelMenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerContent",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header content's DOM element."
                        },
                        {
                            "name": "headerLink",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header link's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenuIcon's DOM element."
                        },
                        {
                            "name": "headerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header icon's DOM element."
                        },
                        {
                            "name": "headerLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header label's DOM element."
                        },
                        {
                            "name": "contentContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content container's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "rootList",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "itemContent",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item content's DOM element."
                        },
                        {
                            "name": "itemLink",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item link's DOM element."
                        },
                        {
                            "name": "itemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item icon's DOM element."
                        },
                        {
                            "name": "itemLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item label's DOM element."
                        },
                        {
                            "name": "submenu",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "PanelMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PanelMenuState": {
                    "description": "Defines current inline state in PanelMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "activeItem",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "Active item path."
                        }
                    ],
                    "methods": []
                },
                "PanelMenuContext": {
                    "description": "Defines current options in PanelMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PanelMenuExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "relatedProp": "PanelMenuProps.expandedKeys",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PanelMenuPanelOpenEvent": {
                    "description": "Custom panel open event.",
                    "relatedProp": "PanelMenuEmitsOptions['panel-open']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current item."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "PanelMenuPanelCloseEvent"
                },
                "PanelMenuPanelCloseEvent": {
                    "description": "Custom panel close event.",
                    "relatedProp": "PanelMenuEmitsOptions['panel-close']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current item."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PanelMenuPanelOpenEvent"
                },
                "PanelMenuRouterBindProps": {
                    "description": "Defines valid router binding props in PanelMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        },
                        {
                            "name": "submenuicon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Submenuicon elemnt binding"
                        },
                        {
                            "name": "headerIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Header icon element binding"
                        },
                        {
                            "name": "headerLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Header label element binding"
                        }
                    ],
                    "methods": []
                },
                "PanelMenuProps": {
                    "description": "Defines valid properties in PanelMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuExpandedKeys",
                            "default": "",
                            "description": "A map of keys to represent the expansion state in controlled mode."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, multiple root menuitems can be activated at the same time."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PanelMenuPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "PanelMenuSlots": {
                    "description": "Defines valid slots in PanelMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">root</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether there is a root menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current active state of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">PanelMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        },
                        {
                            "name": "submenuicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is active</span>\n }",
                                    "description": "submenuicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom submenu icon template."
                        },
                        {
                            "name": "headericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "header icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header icon template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        }
                    ]
                },
                "PanelMenuEmitsOptions": {
                    "description": "Defines valid emits in PanelMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:expandedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expandedKeys changes."
                        },
                        {
                            "name": "panel-open",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PanelMenuPanelOpenEvent",
                                    "description": "Custom panel open event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a panel gets expanded."
                        },
                        {
                            "name": "panel-close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PanelMenuPanelCloseEvent",
                                    "description": "Custom panel close event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active panel is collapsed by clicking on the header."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PanelMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "PanelMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "PanelMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "PanelMenuState": {
                    "description": "Defines current inline state in PanelMenu component.",
                    "props": []
                },
                "PanelMenuContext": {
                    "description": "Defines current options in PanelMenu component.",
                    "props": []
                },
                "PanelMenuExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "props": []
                },
                "PanelMenuPanelOpenEvent": {
                    "description": "Custom panel open event.",
                    "props": []
                },
                "PanelMenuPanelCloseEvent": {
                    "description": "Custom panel close event.",
                    "props": []
                },
                "PanelMenuRouterBindProps": {
                    "description": "Defines valid router binding props in PanelMenu component.",
                    "props": []
                },
                "PanelMenuProps": {
                    "description": "Defines valid properties in PanelMenu component.",
                    "props": []
                },
                "PanelMenuSlots": {
                    "description": "Defines valid slots in PanelMenu component.",
                    "props": []
                },
                "PanelMenuEmitsOptions": {
                    "description": "Defines valid emits in PanelMenu component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PanelMenuPassThroughOptionType": {
                    "values": "PanelMenuPassThroughAttributes | (options: PanelMenuPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "PanelMenuPassThroughTransitionType": {
                    "values": "TransitionProps | (options: PanelMenuPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "PanelMenuEmits": {
                    "values": "EmitFn<PanelMenuEmitsOptions>"
                }
            }
        }
    },
    "panelmenustyle": {
        "description": "PanelMenu is a hybrid of Accordion and Tree components.\n\n[Live Demo](https://www.primevue.org/panelmenu/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelMenuStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PanelMenuStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "PanelMenuClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "panel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-panel\"",
                            "description": "Class name of the panel element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "headerContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-header-content\"",
                            "description": "Class name of the header content element"
                        },
                        {
                            "name": "headerLink",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-header-link\"",
                            "description": "Class name of the header link element"
                        },
                        {
                            "name": "headerIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-header-icon\"",
                            "description": "Class name of the header icon element"
                        },
                        {
                            "name": "headerLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-header-label\"",
                            "description": "Class name of the header label element"
                        },
                        {
                            "name": "contentContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-content-container\"",
                            "description": "Class name of the content container element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "rootList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-root-list\"",
                            "description": "Class name of the root list element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "itemContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-item-content\"",
                            "description": "Class name of the item content element"
                        },
                        {
                            "name": "itemLink",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-item-link\"",
                            "description": "Class name of the item link element"
                        },
                        {
                            "name": "itemIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-item-icon\"",
                            "description": "Class name of the item icon element"
                        },
                        {
                            "name": "itemLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-item-label\"",
                            "description": "Class name of the item label element"
                        },
                        {
                            "name": "submenuIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-submenu-icon\"",
                            "description": "Class name of the submenu icon element"
                        },
                        {
                            "name": "submenu",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-panelmenu-submenu\"",
                            "description": "Class name of the submenu element"
                        },
                        {
                            "name": "separator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-menuitem-separator\""
                        }
                    ]
                }
            }
        }
    },
    "primevue/src/passthrough": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "usePassThrough": {
                    "name": "usePassThrough",
                    "parameters": [
                        {
                            "name": "pt1",
                            "type": "object"
                        },
                        {
                            "name": "pt2",
                            "type": "object"
                        },
                        {
                            "name": "options",
                            "type": "PassThroughOptions"
                        }
                    ],
                    "returnType": "object"
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PassThroughOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "mergeSections",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "mergeProps",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughMergePropsType",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PassThroughOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PassThroughMergePropsType": {
                    "values": "(args: any) => undefined | boolean | undefined"
                }
            }
        }
    },
    "password": {
        "description": "Password displays strength indicator for password fields.\n\n[Live Demo](https://www.primevue.org/password/)",
        "components": {
            "default": {
                "description": "Password displays strength indicator for password fields.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PasswordPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "PasswordSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "PasswordPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PasswordProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "pcInputText",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "maskIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask icon's DOM element."
                        },
                        {
                            "name": "unmaskIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the unmask icon's DOM element."
                        },
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the overlay's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the overlay's content DOM element."
                        },
                        {
                            "name": "meter",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the meter's DOM element."
                        },
                        {
                            "name": "meterLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the meter label's DOM element."
                        },
                        {
                            "name": "meterText",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the meter text's DOM element."
                        },
                        {
                            "name": "hiddenAccesible",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden accessible DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "PasswordPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PasswordState": {
                    "description": "Defines current inline state in Password component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "meter",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordMeterStateOptions",
                            "default": "",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "infoText",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current info test state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "unmasked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current unmasked state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PasswordMeterStateOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "strength",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current strength of the meter state as a string."
                        },
                        {
                            "name": "width",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current width of the meter state as a string."
                        }
                    ],
                    "methods": []
                },
                "PasswordProps": {
                    "description": "Defines valid properties in Password component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-activedescendant",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
                        },
                        {
                            "name": "aria-atomic",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
                        },
                        {
                            "name": "aria-autocomplete",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"inline\" | \"list\" | \"both\"",
                            "default": "",
                            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
                        },
                        {
                            "name": "aria-busy",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
                        },
                        {
                            "name": "aria-checked",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"mixed\"",
                            "default": "",
                            "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
                        },
                        {
                            "name": "aria-colcount",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the total number of columns in a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-colindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-colspan",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-controls",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
                        },
                        {
                            "name": "aria-current",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"page\" | \"step\" | \"location\" | \"date\" | \"time\"",
                            "default": "",
                            "description": "Indicates the element that represents the current item within a container or set of related elements."
                        },
                        {
                            "name": "aria-describedby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) that describes the object."
                        },
                        {
                            "name": "aria-details",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element that provides a detailed, extended description for the object."
                        },
                        {
                            "name": "aria-disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
                        },
                        {
                            "name": "aria-dropeffect",
                            "optional": true,
                            "readonly": false,
                            "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"",
                            "default": "",
                            "description": "Indicates what functions can be performed when a dragged object is released on the drop target.",
                            "deprecated": "in ARIA 1.1"
                        },
                        {
                            "name": "aria-errormessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element that provides an error message for the object."
                        },
                        {
                            "name": "aria-expanded",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
                        },
                        {
                            "name": "aria-flowto",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
                        },
                        {
                            "name": "aria-grabbed",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
                            "deprecated": "in ARIA 1.1"
                        },
                        {
                            "name": "aria-haspopup",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"menu\" | \"listbox\" | \"tree\" | \"grid\" | \"dialog\"",
                            "default": "",
                            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
                        },
                        {
                            "name": "aria-hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether the element is exposed to an accessibility API."
                        },
                        {
                            "name": "aria-invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"grammar\" | \"spelling\"",
                            "default": "",
                            "description": "Indicates the entered value does not conform to the format expected by the application."
                        },
                        {
                            "name": "aria-keyshortcuts",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels the current element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) that labels the current element."
                        },
                        {
                            "name": "aria-level",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the hierarchical level of an element within a structure."
                        },
                        {
                            "name": "aria-live",
                            "optional": true,
                            "readonly": false,
                            "type": "\"off\" | \"assertive\" | \"polite\"",
                            "default": "",
                            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
                        },
                        {
                            "name": "aria-modal",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether an element is modal when displayed."
                        },
                        {
                            "name": "aria-multiline",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether a text box accepts multiple lines of input or only a single line."
                        },
                        {
                            "name": "aria-multiselectable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the user may select more than one item from the current selectable descendants."
                        },
                        {
                            "name": "aria-orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "",
                            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
                        },
                        {
                            "name": "aria-owns",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
                        },
                        {
                            "name": "aria-placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
                        },
                        {
                            "name": "aria-posinset",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
                        },
                        {
                            "name": "aria-pressed",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"mixed\"",
                            "default": "",
                            "description": "Indicates the current \"pressed\" state of toggle buttons."
                        },
                        {
                            "name": "aria-readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the element is not editable, but is otherwise operable."
                        },
                        {
                            "name": "aria-relevant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
                            "default": "",
                            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
                        },
                        {
                            "name": "aria-required",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that user input is required on the element before a form may be submitted."
                        },
                        {
                            "name": "aria-roledescription",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a human-readable, author-localized description for the role of an element."
                        },
                        {
                            "name": "aria-rowcount",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the total number of rows in a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-rowindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-rowspan",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-selected",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates the current \"selected\" state of various widgets."
                        },
                        {
                            "name": "aria-setsize",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
                        },
                        {
                            "name": "aria-sort",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
                            "default": "",
                            "description": "Indicates if items in a table or grid are sorted in ascending or descending order."
                        },
                        {
                            "name": "aria-valuemax",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the maximum allowed value for a range widget."
                        },
                        {
                            "name": "aria-valuemin",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the minimum allowed value for a range widget."
                        },
                        {
                            "name": "aria-valuenow",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the current value for a range widget."
                        },
                        {
                            "name": "aria-valuetext",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the human readable text alternative of aria-valuenow for a range widget."
                        },
                        {
                            "name": "innerHTML",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "StyleValue",
                            "default": ""
                        },
                        {
                            "name": "accesskey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "contenteditable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"inherit\" | \"plaintext-only\"",
                            "default": ""
                        },
                        {
                            "name": "contextmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dir",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "\"\" | Booleanish | \"hidden\" | \"until-found\"",
                            "default": ""
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "inert",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "lang",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spellcheck",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "translate",
                            "optional": true,
                            "readonly": false,
                            "type": "\"yes\" | \"no\"",
                            "default": ""
                        },
                        {
                            "name": "radiogroup",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "role",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "about",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "datatype",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "inlist",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "prefix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "property",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "resource",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "typeof",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "vocab",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autocapitalize",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autocorrect",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autosave",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemprop",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemscope",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "itemtype",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemid",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemref",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "results",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "security",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "unselectable",
                            "optional": true,
                            "readonly": false,
                            "type": "\"on\" | \"off\"",
                            "default": ""
                        },
                        {
                            "name": "inputmode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\" | \"search\"",
                            "default": "",
                            "description": "Hints at the type of data that might be entered by the user while editing the element or its contents"
                        },
                        {
                            "name": "is",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specify that a standard HTML element should behave like a defined custom built-in element"
                        },
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "alt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autocomplete",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "capture",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | \"user\" | \"environment\"",
                            "default": ""
                        },
                        {
                            "name": "checked",
                            "optional": true,
                            "readonly": false,
                            "type": "any[] | Set<any> | Booleanish",
                            "default": ""
                        },
                        {
                            "name": "crossorigin",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "enterKeyHint",
                            "optional": true,
                            "readonly": false,
                            "type": "\"search\" | \"enter\" | \"done\" | \"go\" | \"next\" | \"previous\" | \"send\"",
                            "default": ""
                        },
                        {
                            "name": "form",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formaction",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formenctype",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formmethod",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "formnovalidate",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "formtarget",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "indeterminate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "maxlength",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "minlength",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "pattern",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "src",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTypeHTMLAttribute",
                            "default": ""
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "onCopy",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCut",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPaste",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionupdate",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDrag",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragexit",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDrop",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocusin",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocusout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onChange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onBeforeinput",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onInput",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onReset",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSubmit",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onInvalid",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoad",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onError",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeydown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeypress",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeyup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAuxclick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onClick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onContextmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDblclick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMousedown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMousemove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAbort",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCanplay",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCanplaythrough",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDurationchange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEmptied",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEncrypted",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEnded",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadeddata",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadedmetadata",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPause",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPlay",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPlaying",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onProgress",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onRatechange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSeeked",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSeeking",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onStalled",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSuspend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTimeupdate",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onVolumechange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onWaiting",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onScrollend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchcancel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchmove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerdown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointermove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointercancel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onWheel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationiteration",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTransitionend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTransitionstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "promptLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to prompt password entry. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "mediumRegex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | RegExp",
                            "default": "^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})",
                            "description": "Regex for a medium level password."
                        },
                        {
                            "name": "strongRegex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | RegExp",
                            "default": "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})",
                            "description": "Regex for a strong level password."
                        },
                        {
                            "name": "weakLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text for a weak password. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "mediumLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text for a medium password. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "strongLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text for a strong password. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "feedback",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the strength indicator or not."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "toggleMask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show an icon to display the password as plain text."
                        },
                        {
                            "name": "maskIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to hide displaying the password as plain text."
                        },
                        {
                            "name": "unmaskIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to show displaying the password as plain text."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "autofocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "When present, it specifies that an input element should automatically get focus when the page loads."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "panelId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying overlay panel element."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "overlayId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying overlay element."
                        },
                        {
                            "name": "overlayClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay."
                        },
                        {
                            "name": "overlayStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay."
                        },
                        {
                            "name": "overlayProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the overlay inside the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PasswordPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<InputHTMLAttributes, \"size\">"
                },
                "PasswordSlots": {
                    "description": "Defines valid slots in Password component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "content",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "hideicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Mask icon click event</span>\n}",
                                    "description": "hideicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'maskicon' slot instead.\nCustom mask icon template."
                        },
                        {
                            "name": "maskicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Mask icon click event</span>\n}",
                                    "description": "maskicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom hide icon template."
                        },
                        {
                            "name": "showicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Unmask icon click event</span>\n}",
                                    "description": "showicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. use 'unmaskicon' slot instead.\nCustom unmask icon template."
                        },
                        {
                            "name": "unmaskicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Unmask icon click event</span>\n}",
                                    "description": "showicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom unmask icon template."
                        }
                    ]
                },
                "PasswordEmitsOptions": {
                    "description": "Defines valid emits in Password component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PasswordPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "PasswordSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "PasswordPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "PasswordPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "PasswordState": {
                    "description": "Defines current inline state in Password component.",
                    "props": []
                },
                "PasswordMeterStateOptions": {
                    "props": []
                },
                "PasswordProps": {
                    "description": "Defines valid properties in Password component.",
                    "props": []
                },
                "PasswordSlots": {
                    "description": "Defines valid slots in Password component.",
                    "props": []
                },
                "PasswordEmitsOptions": {
                    "description": "Defines valid emits in Password component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PasswordPassThroughOptionType": {
                    "values": "PasswordPassThroughAttributes | (options: PasswordPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "PasswordPassThroughTransitionType": {
                    "values": "TransitionProps | (options: PasswordPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "PasswordEmits": {
                    "values": "EmitFn<PasswordEmitsOptions>"
                }
            }
        }
    },
    "passwordstyle": {
        "description": "Password displays strength indicator for password fields.\n\n[Live Demo](https://www.primevue.org/password/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PasswordStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PasswordStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "PasswordClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-password\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "pcInput",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-password-input\"",
                            "description": "Class name of the pt input element"
                        },
                        {
                            "name": "maskIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-password-mask-icon\"",
                            "description": "Class name of the mask icon element"
                        },
                        {
                            "name": "unmaskIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-password-unmask-icon\"",
                            "description": "Class name of the unmask icon element"
                        },
                        {
                            "name": "overlay",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-password-overlay\"",
                            "description": "Class name of the overlay element"
                        },
                        {
                            "name": "meter",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-password-meter\"",
                            "description": "Class name of the meter element"
                        },
                        {
                            "name": "meterLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-password-meter-label\"",
                            "description": "Class name of the meter label element"
                        },
                        {
                            "name": "meterText",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-password-meter-text\"",
                            "description": "Class name of the meter text element"
                        }
                    ]
                }
            }
        }
    },
    "picklist": {
        "description": "PickList is used to reorder items between different lists.\n\n[Live Demo](https://primevue.org/picklist)",
        "components": {
            "default": {
                "description": "PickList is used to reorder items between different lists.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PickListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "PickListSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "PickListReorderEvent": {
                    "description": "Custom reorder event.",
                    "relatedProp": "PickListEmitsOptions.reorder",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Ordered list"
                        },
                        {
                            "name": "direction",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Direction of the change; 'up', 'down', 'bottom', 'top'"
                        },
                        {
                            "name": "listIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the list that is ordered, 0 represents the source and 1 represents the target list."
                        }
                    ],
                    "methods": []
                },
                "PickListSelectionChangeEvent": {
                    "description": "Custom selection change event.",
                    "relatedProp": "PickListEmitsOptions['selection-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Selected item"
                        }
                    ],
                    "methods": []
                },
                "PickListMoveToTargetEvent": {
                    "description": "Custom move-to-target event.",
                    "relatedProp": "PickListEmitsOptions['move-to-target']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "PickListMoveAllToTargetEvent,PickListMoveToSourceEvent,PickListMoveAllToSourceEvent"
                },
                "PickListMoveAllToTargetEvent": {
                    "description": "Custom move-all-to-target event.",
                    "relatedProp": "PickListEmitsOptions['move-all-to-target']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PickListMoveToTargetEvent"
                },
                "PickListMoveToSourceEvent": {
                    "description": "Custom move-to-source event.",
                    "relatedProp": "PickListEmitsOptions['move-all-to-target']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PickListMoveToTargetEvent"
                },
                "PickListMoveAllToSourceEvent": {
                    "description": "Custom move-all-to-source event.",
                    "relatedProp": "PickListEmitsOptions['move-all-to-target']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PickListMoveToTargetEvent"
                },
                "PickListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PickListProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "sourceControls",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the source controls' DOM element."
                        },
                        {
                            "name": "pcSourceMoveUpButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcSourceMoveTopButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcSourceMoveDownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcSourceMoveBottomButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcListbox",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Listbox component."
                        },
                        {
                            "name": "sourceListContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the source list containerr's DOM element."
                        },
                        {
                            "name": "transferControls",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the transfer controls' DOM element."
                        },
                        {
                            "name": "pcMoveToTargetButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcMoveAllToTargetButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcMoveToSourceButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcMoveAllToSourceButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "targetListContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the target list container's DOM element."
                        },
                        {
                            "name": "targetControls",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the target controls' DOM element."
                        },
                        {
                            "name": "pcTargetMoveUpButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcTargetMoveTopButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcTargetMoveDownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcTargetMoveBottomButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "PickListPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PickListFocusedState": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "sourceList",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current source list's focused state as a boolean."
                        },
                        {
                            "name": "targetList",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current target list's focused state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PickListState": {
                    "description": "Defines current inline state in PickList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "d_selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "viewChanged",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current view change state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PickListContext": {
                    "description": "Defines current options in PickList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PickListProps": {
                    "description": "Defines valid properties in PickList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any[][]",
                            "default": "",
                            "description": "Value of the component as a multidimensional array."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "any[][]",
                            "default": "",
                            "description": "Selected items in the list as a multidimensional array."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines whether metaKey is requred or not for the selection.\nWhen true metaKey needs to be pressed to select or unselect an item and\nwhen set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "listStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the the list element."
                        },
                        {
                            "name": "responsive",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the list optimizes layout based on screen size."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "14rem",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "striped",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "showSourceControls",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show buttons of source list."
                        },
                        {
                            "name": "showTargetControls",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show buttons of target list."
                        },
                        {
                            "name": "buttonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move up button inside the component."
                        },
                        {
                            "name": "moveUpButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move up button inside the component."
                        },
                        {
                            "name": "moveTopButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move top button inside the component."
                        },
                        {
                            "name": "moveDownButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move down button inside the component."
                        },
                        {
                            "name": "moveBottomButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move bottom button inside the component."
                        },
                        {
                            "name": "moveToTargetProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move to target button inside the component."
                        },
                        {
                            "name": "moveAllToTargetProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move all to target button inside the component."
                        },
                        {
                            "name": "moveToSourceProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move to source button inside the component."
                        },
                        {
                            "name": "moveAllToSourceProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the move all to source button inside the component."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the list element in tabbing order."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PickListPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "PickListSlots": {
                    "description": "Defines valid slots in PickList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the item.</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use option slot instead.\nCustom item template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option.</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "sourceheader",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom source header template."
                        },
                        {
                            "name": "targetheader",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom target header template."
                        },
                        {
                            "name": "sourcecontrolsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom source controls start template."
                        },
                        {
                            "name": "sourcecontrolsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom source controls end template."
                        },
                        {
                            "name": "movecontrolsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move controls start template."
                        },
                        {
                            "name": "movecontrolsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move controls end template."
                        },
                        {
                            "name": "targetcontrolsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom target controls start template."
                        },
                        {
                            "name": "targetcontrolsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom target controls end template."
                        },
                        {
                            "name": "moveupicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move up icon template."
                        },
                        {
                            "name": "movetopicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move top icon template."
                        },
                        {
                            "name": "movedownicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move down icon template."
                        },
                        {
                            "name": "movebottomicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move bottom icon template."
                        },
                        {
                            "name": "movetotargeticon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">viewChanged</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether view change.</span>\n }",
                                    "description": "movetotargeticon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move to target icon template."
                        },
                        {
                            "name": "movealltotargeticon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">viewChanged</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether view change.</span>\n }",
                                    "description": "movealltotargeticon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move all to target icon template."
                        },
                        {
                            "name": "movetosourceicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">viewChanged</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether view change.</span>\n }",
                                    "description": "movetosourceicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move to source icon template."
                        },
                        {
                            "name": "movealltosourceicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">viewChanged</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether view change.</span>\n }",
                                    "description": "movealltosourceicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move all to source icon template."
                        }
                    ]
                },
                "PickListEmitsOptions": {
                    "description": "Defines valid emits in PickList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[][]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "update:selection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[][]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection changes."
                        },
                        {
                            "name": "reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListReorderEvent",
                                    "description": "Custom reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the list is reordered."
                        },
                        {
                            "name": "selection-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListSelectionChangeEvent",
                                    "description": "Custom selection change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when one or more items are moved to the other list."
                        },
                        {
                            "name": "move-to-target",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveToTargetEvent",
                                    "description": "Custom move to target event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when one or more items are moved to the target list."
                        },
                        {
                            "name": "move-all-to-target",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveAllToTargetEvent",
                                    "description": "Custom move all to target event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all items are moved to the target list."
                        },
                        {
                            "name": "move-to-source",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveToSourceEvent",
                                    "description": "Custom move to source event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when one or more items are moved to the source list."
                        },
                        {
                            "name": "move-all-to-source",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveAllToSourceEvent",
                                    "description": "Custom move all to source event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all items are moved to the source list."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PickListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "PickListSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "PickListReorderEvent": {
                    "description": "Custom reorder event.",
                    "props": []
                },
                "PickListSelectionChangeEvent": {
                    "description": "Custom selection change event.",
                    "props": []
                },
                "PickListMoveToTargetEvent": {
                    "description": "Custom move-to-target event.",
                    "props": []
                },
                "PickListMoveAllToTargetEvent": {
                    "description": "Custom move-all-to-target event.",
                    "props": []
                },
                "PickListMoveToSourceEvent": {
                    "description": "Custom move-to-source event.",
                    "props": []
                },
                "PickListMoveAllToSourceEvent": {
                    "description": "Custom move-all-to-source event.",
                    "props": []
                },
                "PickListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "PickListPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "PickListFocusedState": {
                    "props": []
                },
                "PickListState": {
                    "description": "Defines current inline state in PickList component.",
                    "props": []
                },
                "PickListContext": {
                    "description": "Defines current options in PickList component.",
                    "props": []
                },
                "PickListProps": {
                    "description": "Defines valid properties in PickList component.",
                    "props": []
                },
                "PickListSlots": {
                    "description": "Defines valid slots in PickList component.",
                    "props": []
                },
                "PickListEmitsOptions": {
                    "description": "Defines valid emits in PickList component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PickListPassThroughOptionType": {
                    "values": "PickListPassThroughAttributes | (options: PickListPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "PickListPassThroughTransitionType": {
                    "values": "TransitionProps | (options: PickListPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "PickListEmits": {
                    "values": "EmitFn<PickListEmitsOptions>"
                }
            }
        }
    },
    "pickliststyle": {
        "description": "PickList is used to reorder items between different lists.\n\n[Live Demo](https://primevue.org/picklist)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PickListStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PickListStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "PickListClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-picklist\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "sourceControls",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-picklist-source-controls\"",
                            "description": "Class name of the source controls element"
                        },
                        {
                            "name": "sourceListContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-picklist-source-list-container\"",
                            "description": "Class name of the source list container element"
                        },
                        {
                            "name": "transferControls",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-picklist-transfer-controls\"",
                            "description": "Class name of the transfer controls element"
                        },
                        {
                            "name": "targetListContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-picklist-target-list-container\"",
                            "description": "Class name of the target list container element"
                        },
                        {
                            "name": "targetControls",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-picklist-target-controls\"",
                            "description": "Class name of the target controls element"
                        }
                    ]
                }
            }
        }
    },
    "popover": {
        "description": "Popover is a container component positioned as connected to its target.\n\n[Live Demo](https://primevue.org/popover)",
        "components": {
            "default": {
                "description": "Popover is a container component that can overlay other components on page.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PopoverPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PopoverProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PopoverState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "PopoverPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PopoverProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PopoverPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "PopoverPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "PopoverPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "PopoverPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PopoverState": {
                    "description": "Defines current inline state in Popover component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PopoverBreakpoints": {
                    "description": "Popover breakpoint metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "PopoverProps": {
                    "description": "Defines valid properties in Popover component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dismissable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables to hide the overlay when outside is clicked."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "PopoverBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PopoverPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the dialog."
                        }
                    ],
                    "methods": []
                },
                "PopoverSlots": {
                    "description": "Defines valid slots in Popover component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close overlay panel function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">keydownCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close button keydown function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "PopoverEmitsOptions": {
                    "description": "Defines valid emits in Popover component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        }
                    ]
                },
                "PopoverMethods": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "alignOverlay",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Aligns overlay panel based on the current position of the container."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "optional": true,
                                    "type": "any",
                                    "description": "Optional target if event.currentTarget should not be used."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the overlay."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "optional": true,
                                    "type": "any",
                                    "description": "Optional target if event.currentTarget should not be used."
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PopoverPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "PopoverPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "PopoverPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "PopoverState": {
                    "description": "Defines current inline state in Popover component.",
                    "props": []
                },
                "PopoverBreakpoints": {
                    "description": "Popover breakpoint metadata.",
                    "props": []
                },
                "PopoverProps": {
                    "description": "Defines valid properties in Popover component.",
                    "props": []
                },
                "PopoverSlots": {
                    "description": "Defines valid slots in Popover component.",
                    "props": []
                },
                "PopoverEmitsOptions": {
                    "description": "Defines valid emits in Popover component.",
                    "props": []
                },
                "PopoverMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PopoverPassThroughOptionType": {
                    "values": "PopoverPassThroughAttributes | (options: PopoverPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "PopoverPassThroughTransitionType": {
                    "values": "TransitionProps | (options: PopoverPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "PopoverEmits": {
                    "values": "EmitFn<PopoverEmitsOptions>"
                }
            }
        }
    },
    "popoverstyle": {
        "description": "Popover is a container component positioned as connected to its target.\n\n[Live Demo](https://primevue.org/popover)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PopoverStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PopoverStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "PopoverClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-popover\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-popover-content\"",
                            "description": "Class name of the content element"
                        }
                    ]
                }
            }
        }
    },
    "primevue/src/portal/Portal": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PortalProps": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "PortalAppendToType",
                            "default": "",
                            "description": "A valid query selector or an HTMLElement to specify where the dialog gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "If disabled, the Portal feature is eliminated and the content is displayed directly."
                        }
                    ],
                    "methods": []
                },
                "PortalSlots": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PortalProps": {
                    "props": []
                },
                "PortalSlots": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PortalEmits": {
                    "values": "EmitFn<PortalEmitsOptions>"
                }
            }
        }
    },
    "portalstyle": {
        "description": "[Live Demo](https://primevue.org/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PortalStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "PortalStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "PortalClasses": {
                    "members": []
                }
            }
        }
    },
    "progressbar": {
        "description": "ProgressBar is a process status indicator.\n\n[Live Demo](https://www.primevue.org/progressbar)",
        "components": {
            "default": {
                "description": "\n\n[Live Demo](https://www.primevue.org/progressbar/)\n--- ---\n![PrimeVue](https://primefaces.org/cdn/primevue/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ProgressBarProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ProgressBarProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the value's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ProgressBarProps": {
                    "description": "Defines valid properties in ProgressBar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value of the progress."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"indeterminate\" | \"determinate\"",
                            "default": "determinate",
                            "description": "Defines the mode of the progress"
                        },
                        {
                            "name": "showValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display the progress bar value."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ProgressBarPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarSlots": {
                    "description": "Defines valid slots in ProgressBar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content slot."
                        }
                    ]
                },
                "ProgressBarEmitsOptions": {
                    "description": "Defines valid emits in ProgressBar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ProgressBarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ProgressBarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ProgressBarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ProgressBarProps": {
                    "description": "Defines valid properties in ProgressBar component.",
                    "props": []
                },
                "ProgressBarSlots": {
                    "description": "Defines valid slots in ProgressBar component.",
                    "props": []
                },
                "ProgressBarEmitsOptions": {
                    "description": "Defines valid emits in ProgressBar component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarPassThroughOptionType": {
                    "values": "ProgressBarPassThroughAttributes | (options: ProgressBarPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ProgressBarEmits": {
                    "values": "EmitFn<ProgressBarEmitsOptions>"
                }
            }
        }
    },
    "progressbarstyle": {
        "description": "ProgressBar is a process status indicator.\n\n[Live Demo](https://www.primevue.org/progressbar)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ProgressBarStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ProgressBarClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-progressbar\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-progressbar-value\"",
                            "description": "Class name of the value element"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-progressbar-label\"",
                            "description": "Class name of the label element"
                        }
                    ]
                }
            }
        }
    },
    "progressspinner": {
        "description": "ProgressSpinner is a process status indicator.\n\n[Live Demo](https://www.primevue.org/progressspinner)",
        "components": {
            "default": {
                "description": "ProgressSpinner is a process status indicator.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ProgressSpinnerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ProgressSpinnerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ProgressSpinnerProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the spinner's DOM element."
                        },
                        {
                            "name": "circle",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the circle's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ProgressSpinnerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ProgressSpinnerProps": {
                    "description": "Defines valid properties in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "strokeWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "2",
                            "description": "Width of the circle stroke."
                        },
                        {
                            "name": "fill",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Color for the background of the circle."
                        },
                        {
                            "name": "animationDuration",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "2s",
                            "description": "Duration of the rotate animation."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ProgressSpinnerPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ProgressSpinnerSlots": {
                    "description": "Defines valid slots in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ProgressSpinnerEmitsOptions": {
                    "description": "Defines valid emits in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ProgressSpinnerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ProgressSpinnerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ProgressSpinnerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ProgressSpinnerProps": {
                    "description": "Defines valid properties in ProgressSpinner component.",
                    "props": []
                },
                "ProgressSpinnerSlots": {
                    "description": "Defines valid slots in ProgressSpinner component.",
                    "props": []
                },
                "ProgressSpinnerEmitsOptions": {
                    "description": "Defines valid emits in ProgressSpinner component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerPassThroughOptionType": {
                    "values": "ProgressSpinnerPassThroughAttributes | (options: ProgressSpinnerPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ProgressSpinnerEmits": {
                    "values": "EmitFn<ProgressSpinnerEmitsOptions>"
                }
            }
        }
    },
    "progressspinnerstyle": {
        "description": "ProgressSpinner is a process status indicator.\n\n[Live Demo](https://www.primevue.org/progressspinner)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ProgressSpinnerStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ProgressSpinnerClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-progressspinner\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "spin",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-progressspinner-spin\"",
                            "description": "Class name of the spin element"
                        },
                        {
                            "name": "circle",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-progressspinner-circle\"",
                            "description": "Class name of the circle element"
                        }
                    ]
                }
            }
        }
    },
    "radiobutton": {
        "description": "RadioButton is an extension to standard radio button element with theming.\n\n[Live Demo](https://www.primevue.org/radiobutton/)",
        "components": {
            "default": {
                "description": "RadioButton is an extension to standard radio button element with theming.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "RadioButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "RadioButtonState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "RadioButtonContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "RadioButtonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "box",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the box's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "RadioButtonState": {
                    "description": "Defines current inline state in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "RadioButtonProps": {
                    "description": "Defines valid properties in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value binding of the checkbox."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "binary",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Allows to select a boolean value."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<RadioButtonPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonContext": {
                    "description": "Defines current options in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current checked state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "RadioButtonEmitsOptions": {
                    "description": "Defines valid emits in RadioButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on radio button value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "RadioButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "RadioButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "RadioButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "RadioButtonState": {
                    "description": "Defines current inline state in RadioButton component.",
                    "props": []
                },
                "RadioButtonProps": {
                    "description": "Defines valid properties in RadioButton component.",
                    "props": []
                },
                "RadioButtonContext": {
                    "description": "Defines current options in RadioButton component.",
                    "props": []
                },
                "RadioButtonSlots": {
                    "props": []
                },
                "RadioButtonEmitsOptions": {
                    "description": "Defines valid emits in RadioButton component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonPassThroughOptionType": {
                    "values": "RadioButtonPassThroughAttributes | (options: RadioButtonPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "RadioButtonEmits": {
                    "values": "EmitFn<RadioButtonEmitsOptions>"
                }
            }
        }
    },
    "radiobuttonstyle": {
        "description": "RadioButton is an extension to standard radio button element with theming.\n\n[Live Demo](https://www.primevue.org/radiobutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "RadioButtonStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "RadioButtonClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-radiobutton\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "box",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-radiobutton-box\"",
                            "description": "Class name of the box element"
                        },
                        {
                            "name": "input",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-radiobutton-input\"",
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-radiobutton-icon\"",
                            "description": "Class name of the icon element"
                        }
                    ]
                }
            }
        }
    },
    "radiobuttongroup": {
        "description": "RadioButtonGroup is a component that groups multiple radio buttons, allowing users to select only one option from the group.\n\n[Live Demo](https://www.primevue.org/radiobutton/)",
        "components": {
            "default": {
                "description": "RadioButtonGroup is a component that groups multiple radio buttons, allowing users to select only one option from the group.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "RadioButtonGroupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "RadioButtonGroupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "RadioButtonGroupProps": {
                    "description": "Defines valid properties in RadioButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value binding of the radiobuttons."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Default values of the radiobuttons in uncontrolled mode."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input elements."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to set form control options."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<RadioButtonGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonGroupSlots": {
                    "description": "Defines valid slots in RadioButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "RadioButtonGroupEmitsOptions": {
                    "description": "Defines valid emits in RadioButtonGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "RadioButtonGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "RadioButtonGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "RadioButtonGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "RadioButtonGroupProps": {
                    "description": "Defines valid properties in RadioButtonGroup component.",
                    "props": []
                },
                "RadioButtonGroupSlots": {
                    "description": "Defines valid slots in RadioButtonGroup component.",
                    "props": []
                },
                "RadioButtonGroupEmitsOptions": {
                    "description": "Defines valid emits in RadioButtonGroup component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonGroupPassThroughOptionType": {
                    "values": "RadioButtonGroupPassThroughAttributes | (options: RadioButtonGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "RadioButtonGroupEmits": {
                    "values": "EmitFn<RadioButtonGroupEmitsOptions>"
                }
            }
        }
    },
    "radiobuttongroupstyle": {
        "description": "RadioButtonGroup is a component that groups multiple radio buttons, allowing users to select only one option from the group.\n\n[Live Demo](https://www.primevue.org/radiobuttongroup/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonGroupStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "RadioButtonGroupStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "RadioButtonGroupClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-radiobutton-group\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "rating": {
        "description": "Rating component is a star based selection input.\n\n[Live Demo](https://www.primevue.org/rating/)",
        "components": {
            "default": {
                "description": "Rating component is a star based selection input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RatingPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "RatingProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "RatingState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "RatingContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "RatingPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "RatingProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option's DOM element."
                        },
                        {
                            "name": "onIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the on icon's DOM element."
                        },
                        {
                            "name": "offIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the off icon's DOM element."
                        },
                        {
                            "name": "hiddenOptionInputContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden option input container's DOM element."
                        },
                        {
                            "name": "hiddenOptionInput",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden option input's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "RatingPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "RatingState": {
                    "description": "Defines current inline state in Rating component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "name state as a number."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "focusedOptionIndex state as a number."
                        }
                    ],
                    "methods": []
                },
                "RatingContext": {
                    "description": "Defines current options in Rating component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the option as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of option as a boolean."
                        }
                    ],
                    "methods": []
                },
                "RatingChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "RatingEmitsOptions.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "RatingProps": {
                    "description": "Defines valid properties in Rating component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Value of the rating."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the element."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that component is read-only."
                        },
                        {
                            "name": "stars",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of stars."
                        },
                        {
                            "name": "onIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon for the on state."
                        },
                        {
                            "name": "offIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon for the off state."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<RatingPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "RatingSlots": {
                    "description": "Defines valid slots in Rating component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "onicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Option value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "on icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom on icon template."
                        },
                        {
                            "name": "officon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Option value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "off icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom off icon template."
                        }
                    ]
                },
                "RatingEmitsOptions": {
                    "description": "Defines valid emits in Rating component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "RatingChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "RatingPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "RatingPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "RatingPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "RatingState": {
                    "description": "Defines current inline state in Rating component.",
                    "props": []
                },
                "RatingContext": {
                    "description": "Defines current options in Rating component.",
                    "props": []
                },
                "RatingChangeEvent": {
                    "description": "Custom change event.",
                    "props": []
                },
                "RatingProps": {
                    "description": "Defines valid properties in Rating component.",
                    "props": []
                },
                "RatingSlots": {
                    "description": "Defines valid slots in Rating component.",
                    "props": []
                },
                "RatingEmitsOptions": {
                    "description": "Defines valid emits in Rating component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RatingPassThroughOptionType": {
                    "values": "RatingPassThroughAttributes | (options: RatingPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "RatingEmits": {
                    "values": "EmitFn<RatingEmitsOptions>"
                }
            }
        }
    },
    "ratingstyle": {
        "description": "Rating component is a star based selection input.\n\n[Live Demo](https://www.primevue.org/rating/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RatingStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "RatingStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "RatingClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-rating\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "option",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-rating-option\"",
                            "description": "Class name of the option element"
                        },
                        {
                            "name": "onIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-rating-on-icon\"",
                            "description": "Class name of the on icon element"
                        },
                        {
                            "name": "offIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-rating-off-icon\"",
                            "description": "Class name of the off icon element"
                        }
                    ]
                }
            }
        }
    },
    "ripple": {
        "description": "Ripple directive adds ripple effect to the host element.\n\n[Live Demo](https://primevue.org/ripple)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RippleOptions": {
                    "description": "Defines options of Ripple.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<RippleDirectivePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "RippleDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "RippleOptions.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RippleDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "RippleDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "RippleDirectiveBinding": {
                    "description": "Binding of Ripple directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "null | ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, \"\", Object, any> | Record<string, any>",
                            "default": ""
                        },
                        {
                            "name": "oldValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "arg",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dir",
                            "optional": false,
                            "readonly": false,
                            "type": "ObjectDirective<any, any, string, string>",
                            "default": ""
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "RippleOptions",
                            "default": "",
                            "description": "Value of the Ripple."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "RippleOptions": {
                    "description": "Defines options of Ripple.",
                    "props": []
                },
                "RippleDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "RippleDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "RippleDirectiveBinding": {
                    "description": "Binding of Ripple directive.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RippleDirectivePassThroughOptionType": {
                    "values": "RippleDirectivePassThroughAttributes | null | undefined"
                }
            }
        }
    },
    "ripplestyle": {
        "description": "Ripple directive adds ripple effect to the host element.\n\n[Live Demo](https://primevue.org/ripple)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RippleStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "RippleStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "RippleClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-ink\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "row": {
        "description": "Row component is a helper component used to create grouping structures in DataTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "Row component is a helper component used to create grouping structures in DataTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RowPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "RowProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "RowContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "RowPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "RowProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RowPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "RowPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "RowProps": {
                    "description": "Defines valid properties in Row component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<RowPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        }
                    ],
                    "methods": []
                },
                "RowContext": {
                    "description": "Defines current options in Row component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the row."
                        }
                    ],
                    "methods": []
                },
                "RowSlots": {
                    "description": "Defines valid slots in Row component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "RowEmitsOptions": {
                    "description": "Defines valid emits in Row component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "RowPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "RowPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "RowPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "RowProps": {
                    "description": "Defines valid properties in Row component.",
                    "props": []
                },
                "RowContext": {
                    "description": "Defines current options in Row component.",
                    "props": []
                },
                "RowSlots": {
                    "description": "Defines valid slots in Row component.",
                    "props": []
                },
                "RowEmitsOptions": {
                    "description": "Defines valid emits in Row component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RowPassThroughOptionType": {
                    "values": "RowPassThroughAttributes | (options: RowPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "RowEmits": {
                    "values": "EmitFn<RowEmitsOptions>"
                }
            }
        }
    },
    "rowstyle": {
        "description": "Row component is a helper component used to create grouping structures in DataTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RowStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "RowStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "RowClasses": {
                    "members": []
                }
            }
        }
    },
    "scrollpanel": {
        "description": "ScrollPanel is a cross browser, lightweight and themable alternative to native browser scrollbar.\n\n[Live Demo](https://www.primevue.org/scrollpanel/)",
        "components": {
            "default": {
                "description": "ScrollPanel is a cross browser, lightweight and themable alternative to native browser scrollbar..",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollPanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollPanelState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ScrollPanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "contentContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content container's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "barX",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the horizontal panel's DOM element."
                        },
                        {
                            "name": "barY",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the vertical panel's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelState": {
                    "description": "Defines current inline state in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "orientation",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "vertical",
                            "description": "Current scrollpanel orientation."
                        },
                        {
                            "name": "lastScrollTop",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Latest scroll top position."
                        },
                        {
                            "name": "lastScrollLeft",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Latest scroll left position."
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelProps": {
                    "description": "Defines valid properties in ScrollPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Step factor to scroll the content while pressing the arrow keys."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ScrollPanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelSlots": {
                    "description": "Defines valid slots in Accordion slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ScrollPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ScrollPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ScrollPanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ScrollPanelState": {
                    "description": "Defines current inline state in Panel component.",
                    "props": []
                },
                "ScrollPanelProps": {
                    "description": "Defines valid properties in ScrollPanel component.",
                    "props": []
                },
                "ScrollPanelSlots": {
                    "description": "Defines valid slots in Accordion slots.",
                    "props": []
                },
                "ScrollPanelEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ScrollPanelPassThroughOptionType": {
                    "values": "ScrollPanelPassThroughAttributes | (options: ScrollPanelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ScrollPanelEmits": {
                    "values": "EmitFn<ScrollPanelEmitsOptions>"
                }
            }
        }
    },
    "scrollpanelstyle": {
        "description": "ScrollPanel is a cross browser, lightweight and themable alternative to native browser scrollbar.\n\n[Live Demo](https://www.primevue.org/scrollpanel/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollPanelStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ScrollPanelStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ScrollPanelClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-scrollpanel\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "contentContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-scrollpanel-content-container\"",
                            "description": "Class name of the content container element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-scrollpanel-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "barX",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-scrollpanel-bar-x\"",
                            "description": "Class name of the bar x element"
                        },
                        {
                            "name": "barY",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-scrollpanel-bar-y\"",
                            "description": "Class name of the bar y element"
                        }
                    ]
                }
            }
        }
    },
    "scrolltop": {
        "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.\n\n[Live Demo](https://www.primevue.org/scrolltop/)",
        "components": {
            "default": {
                "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollTopPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollTopProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollTopState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ScrollTopSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollTopProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollTopState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "ScrollTopPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ScrollTopProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollTopPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ScrollTopPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ScrollTopState": {
                    "description": "Defines current inline state in ScrollTop component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ScrollTopProps": {
                    "description": "Defines valid properties in ScrollTop component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "\"window\" | \"parent\"",
                            "default": "window",
                            "description": "Target of the ScrollTop."
                        },
                        {
                            "name": "threshold",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "400",
                            "description": "Defines the threshold value of the vertical scroll position of the target to toggle the visibility."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display."
                        },
                        {
                            "name": "behavior",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "smooth",
                            "description": "Defines the scrolling behaviour, 'smooth' adds an animation and 'auto' scrolls with a jump."
                        },
                        {
                            "name": "buttonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the Button component."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ScrollTopPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ScrollTopSlots": {
                    "description": "Defines valid slots in ScrollTop component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "icon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom scrolltop icon template."
                        }
                    ]
                },
                "ScrollTopEmitsOptions": {
                    "description": "Defines valid emits in ScrollTop component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ScrollTopPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ScrollTopSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "ScrollTopPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ScrollTopPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ScrollTopState": {
                    "description": "Defines current inline state in ScrollTop component.",
                    "props": []
                },
                "ScrollTopProps": {
                    "description": "Defines valid properties in ScrollTop component.",
                    "props": []
                },
                "ScrollTopSlots": {
                    "description": "Defines valid slots in ScrollTop component.",
                    "props": []
                },
                "ScrollTopEmitsOptions": {
                    "description": "Defines valid emits in ScrollTop component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ScrollTopPassThroughOptionType": {
                    "values": "ScrollTopPassThroughAttributes | (options: ScrollTopPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ScrollTopPassThroughTransitionType": {
                    "values": "TransitionProps | (options: ScrollTopPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "ScrollTopEmits": {
                    "values": "EmitFn<ScrollTopEmitsOptions>"
                }
            }
        }
    },
    "scrolltopstyle": {
        "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.\n\n[Live Demo](https://www.primevue.org/scrolltop/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollTopStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ScrollTopStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ScrollTopClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-scrolltop\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-scrolltop-icon\"",
                            "description": "Class name of the icon element"
                        }
                    ]
                }
            }
        }
    },
    "select": {
        "description": "Select is used to choose an item from a collection of options.\n\n[Live Demo](https://www.primevue.org/select/)",
        "components": {
            "default": {
                "description": "Select is used to choose an item from a collection of options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SelectSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "SelectChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "SelectEmitsOptions.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "SelectFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "SelectEmitsOptions.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "SelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SelectProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the clear icon's DOM element."
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown's DOM element."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown icon's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the overlay's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "pcFilterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the IconField component."
                        },
                        {
                            "name": "pcFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "pcFilterIconContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputIcon component."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the filter icon's DOM element."
                        },
                        {
                            "name": "listContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the list container's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "optionGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the option group's DOM element."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the option group label's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the option's DOM element."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the option label's DOM element."
                        },
                        {
                            "name": "optionCheckIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the option check icon's DOM element."
                        },
                        {
                            "name": "optionBlankIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the option blank icon's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "hiddenFirstFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden first focusable element's DOM element."
                        },
                        {
                            "name": "hiddenFilterResult",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden filter result's DOM element."
                        },
                        {
                            "name": "hiddenEmptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden empty message's DOM element."
                        },
                        {
                            "name": "hiddenSelectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden selected message's DOM element."
                        },
                        {
                            "name": "hiddenLastFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden last focusable element's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectPassThroughTransitionType<any>",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "SelectPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SelectState": {
                    "description": "Defines current inline state in Select component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "-1",
                            "description": "Current focused item index as a number."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter value state as a string."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "SelectContext": {
                    "description": "Defines current options in Select component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "option",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current item option."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current item index."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selection state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "SelectProps": {
                    "description": "Defines valid properties in Select component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of select items to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "14rem",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays a filter input at header."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"startsWith\" | \"contains\" | \"endsWith\">",
                            "default": "contains",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "filterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "editable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, custom value instead of predefined options can be entered using the editable input field."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "showClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4.0. Use 'labelId' instead.\nIdentifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4.0. Use 'labelStyle' instead.\nInline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4.0. Use 'labelClass' instead.\nStyle class of the input field."
                        },
                        {
                            "name": "labelId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying label element."
                        },
                        {
                            "name": "labelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the label field."
                        },
                        {
                            "name": "labelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the label field."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4.0. Use 'overlayStyle' instead.\nInline style of the overlay panel."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "",
                            "deprecated": "since v4.0. Use 'overlayClass' instead.\nStyle class of the overlay panel."
                        },
                        {
                            "name": "overlayStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay."
                        },
                        {
                            "name": "overlayClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the select is in loading state."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in clear button."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the select."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in filter input."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when hiding the select."
                        },
                        {
                            "name": "resetFilterOnClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when clicking on the clear icon."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "autoFilterFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the filter element when the overlay panel is shown."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "highlightOnSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the selected option will be add highlight class."
                        },
                        {
                            "name": "checkmark",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the selected option will be shown with a check mark."
                        },
                        {
                            "name": "filterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No available options",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SelectPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SelectSlots": {
                    "description": "Defines valid slots in Select component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">placeholder</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Placeholder prop value</span>\n }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template of panel."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template of panel."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option group slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option group template."
                        },
                        {
                            "name": "emptyfilter",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty filter template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// An array of objects to display for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">styleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">contentRef</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">el</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Referance of the content</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">getItemOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Options of the items</span>\n}",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "clearicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">clearCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Clear icon click function.</span>\n}",
                                    "description": "clear icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom clear icon template."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the select icon</span>\n }",
                                    "description": "select icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom select icon template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon</span>\n }",
                                    "description": "loading icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "filtericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the filter icon</span>\n }",
                                    "description": "filter icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter icon template."
                        }
                    ]
                },
                "SelectEmitsOptions": {
                    "description": "Defines valid emits in Select component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SelectChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SelectFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filter input."
                        }
                    ]
                },
                "SelectMethods": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "show",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "hide",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "SelectSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "SelectChangeEvent": {
                    "description": "Custom change event.",
                    "props": []
                },
                "SelectFilterEvent": {
                    "description": "Custom filter event.",
                    "props": []
                },
                "SelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "SelectPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "SelectState": {
                    "description": "Defines current inline state in Select component.",
                    "props": []
                },
                "SelectContext": {
                    "description": "Defines current options in Select component.",
                    "props": []
                },
                "SelectProps": {
                    "description": "Defines valid properties in Select component.",
                    "props": []
                },
                "SelectSlots": {
                    "description": "Defines valid slots in Select component.",
                    "props": []
                },
                "SelectEmitsOptions": {
                    "description": "Defines valid emits in Select component.",
                    "props": []
                },
                "SelectMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SelectPassThroughOptionType": {
                    "values": "SelectPassThroughAttributes | (options: SelectPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "SelectPassThroughTransitionType": {
                    "values": "TransitionProps | (options: SelectPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "SelectEmits": {
                    "values": "EmitFn<SelectEmitsOptions>"
                }
            }
        }
    },
    "selectstyle": {
        "description": "Select also known as Select, is used to choose an item from a collection of options.\n\n[Live Demo](https://www.primevue.org/select/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SelectStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SelectStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "SelectClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-label\"",
                            "description": "Class name of the label element"
                        },
                        {
                            "name": "clearIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-clear-icon\"",
                            "description": "Class name of the clear icon element"
                        },
                        {
                            "name": "dropdown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-dropdown\"",
                            "description": "Class name of the dropdown element"
                        },
                        {
                            "name": "loadingicon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-loading-icon\"",
                            "description": "Class name of the loadingicon element"
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-dropdown-icon\"",
                            "description": "Class name of the dropdown icon element"
                        },
                        {
                            "name": "overlay",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-overlay\"",
                            "description": "Class name of the overlay element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "pcFilter",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-filter\"",
                            "description": "Class name of the filter element"
                        },
                        {
                            "name": "listContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-list-container\"",
                            "description": "Class name of the list container element"
                        },
                        {
                            "name": "list",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-list\"",
                            "description": "Class name of the list element"
                        },
                        {
                            "name": "optionGroup",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-option-group\"",
                            "description": "Class name of the option group element"
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-option-group-label\"",
                            "description": "Class name of the option group label element"
                        },
                        {
                            "name": "option",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-option\"",
                            "description": "Class name of the option element"
                        },
                        {
                            "name": "optionLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-option-label\"",
                            "description": "Class name of the option label element"
                        },
                        {
                            "name": "optionCheckIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-option-check-icon\"",
                            "description": "Class name of the option check icon element"
                        },
                        {
                            "name": "optionBlankIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-option-blank-icon\"",
                            "description": "Class name of the option blank icon element"
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-empty-message\"",
                            "description": "Class name of the empty message element"
                        }
                    ]
                }
            }
        }
    },
    "selectbutton": {
        "description": "SelectButton is used to choose single or multiple items from a list using buttons.\n\n[Live Demo](https://www.primevue.org/selectbutton/)",
        "components": {
            "default": {
                "description": "SelectButton is used to choose single or multiple items from a list using buttons.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SelectButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectButtonState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectButtonContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SelectButtonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "pcToggleButton",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the ToggleButton component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SelectButtonChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "SelectButtonEmitsOptions.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Single value or an array of values that are selected."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonState": {
                    "description": "Defines current inline state in SelectButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focusedIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "FocusedIndex state as a number."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonContext": {
                    "description": "Defines current options in SelectButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        },
                        {
                            "name": "option",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Available option."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonProps": {
                    "description": "Defines valid properties in SelectButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "allowEmpty",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether selection can be cleared."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying element."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SelectButtonPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonSlots": {
                    "description": "Defines valid slots in SelectButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each option."
                        }
                    ]
                },
                "SelectButtonEmitsOptions": {
                    "description": "Defines valid emits in SelectButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SelectButtonChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on blur."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SelectButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "SelectButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "SelectButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "SelectButtonChangeEvent": {
                    "description": "Custom change event.",
                    "props": []
                },
                "SelectButtonState": {
                    "description": "Defines current inline state in SelectButton component.",
                    "props": []
                },
                "SelectButtonContext": {
                    "description": "Defines current options in SelectButton component.",
                    "props": []
                },
                "SelectButtonProps": {
                    "description": "Defines valid properties in SelectButton component.",
                    "props": []
                },
                "SelectButtonSlots": {
                    "description": "Defines valid slots in SelectButton component.",
                    "props": []
                },
                "SelectButtonEmitsOptions": {
                    "description": "Defines valid emits in SelectButton component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SelectButtonPassThroughOptionType": {
                    "values": "SelectButtonPassThroughAttributes | (options: SelectButtonPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "SelectButtonEmits": {
                    "values": "EmitFn<SelectButtonEmitsOptions>"
                }
            }
        }
    },
    "selectbuttonstyle": {
        "description": "SelectButton is used to choose single or multiple items from a list using buttons.\n\n[Live Demo](https://www.primevue.org/selectbutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SelectButtonStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SelectButtonStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "SelectButtonClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-selectbutton\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "sidebar": {
        "description": "Sidebar is a panel component displayed as an overlay at the edges of the screen.\n\n[Live Demo](https://primevue.org/drawer)",
        "components": {
            "default": {
                "description": "",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SidebarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "SidebarSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "SidebarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "undefined.SidebarProps.pt",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "SidebarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "SidebarState": {
                    "description": "Defines current inline state in Sidebar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "SidebarProps": {
                    "description": "Defines valid properties in Sidebar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "SidebarSlots": {
                    "description": "Defines valid slots in Sidebar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                },
                "SidebarEmitsOptions": {
                    "description": "Defines valid emits in Sidebar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SidebarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "SidebarSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "SidebarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "SidebarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "SidebarState": {
                    "description": "Defines current inline state in Sidebar component.",
                    "props": []
                },
                "SidebarProps": {
                    "description": "Defines valid properties in Sidebar component.",
                    "props": []
                },
                "SidebarSlots": {
                    "description": "Defines valid slots in Sidebar component.",
                    "props": []
                },
                "SidebarEmitsOptions": {
                    "description": "Defines valid emits in Sidebar component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SidebarEmits": {
                    "values": "EmitFn<SidebarEmitsOptions> & Drawer.DrawerEmits"
                }
            }
        }
    },
    "sidebarstyle": {
        "description": "Sidebar is a panel component displayed as an overlay at the edges of the screen.\n\n[Live Demo](https://primevue.org/drawer)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SidebarStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SidebarStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "SidebarClasses": {
                    "members": []
                }
            }
        }
    },
    "skeleton": {
        "description": "Skeleton is a placeholder to display instead of the actual content.\n\n[Live Demo](https://www.primevue.org/skeleton/)",
        "components": {
            "default": {
                "description": "Skeleton is a placeholder to display instead of the actual content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SkeletonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SkeletonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SkeletonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SkeletonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SkeletonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SkeletonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SkeletonProps": {
                    "description": "Defines valid properties in Skeleton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"circle\" | \"rectangle\"",
                            "default": "rectangle",
                            "description": "Shape of the element."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Size of the Circle or Square."
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "100%",
                            "description": "Width of the element."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "1rem",
                            "description": "Height of the element."
                        },
                        {
                            "name": "borderRadius",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Border radius of the element, defaults to value from theme."
                        },
                        {
                            "name": "animation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"wave\"",
                            "default": "wave",
                            "description": "Type of the animation."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SkeletonPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SkeletonSlots": {
                    "description": "Defines valid slots in Skeleton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "SkeletonEmitsOptions": {
                    "description": "Defines valid emits in Skeleton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SkeletonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "SkeletonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "SkeletonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "SkeletonProps": {
                    "description": "Defines valid properties in Skeleton component.",
                    "props": []
                },
                "SkeletonSlots": {
                    "description": "Defines valid slots in Skeleton component.",
                    "props": []
                },
                "SkeletonEmitsOptions": {
                    "description": "Defines valid emits in Skeleton component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SkeletonPassThroughOptionType": {
                    "values": "SkeletonPassThroughAttributes | (options: SkeletonPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "SkeletonEmits": {
                    "values": "EmitFn<SkeletonEmitsOptions>"
                }
            }
        }
    },
    "skeletonstyle": {
        "description": "Skeleton is a placeholder to display instead of the actual content.\n\n[Live Demo](https://www.primevue.org/skeleton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SkeletonStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SkeletonStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "SkeletonClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-skeleton\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "slider": {
        "description": "Slider is a component to provide input with a drag handle.\n\n[Live Demo](https://www.primevue.org/slider/)",
        "components": {
            "default": {
                "description": "Slider is a component to provide input with a drag handle.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SliderPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SliderProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SliderPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SliderProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "range",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the range's DOM element."
                        },
                        {
                            "name": "handle",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the handle's DOM element."
                        },
                        {
                            "name": "startHandler",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the start handler's DOM element."
                        },
                        {
                            "name": "endHandler",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the end handler's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SliderPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SliderSlideEndEvent": {
                    "description": "Custom slide end event.",
                    "relatedProp": "SliderEmitsOptions.slideend",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New value."
                        }
                    ],
                    "methods": []
                },
                "SliderProps": {
                    "description": "Defines valid properties in Slider component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number | number[]",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number | number[]",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the slider."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "range",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When speficed, allows two boundary values to be picked."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Used to define a string that labels the element."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SliderPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SliderSlots": {
                    "description": "Defines valid slots in Slider component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "SliderEmitsOptions": {
                    "description": "Defines valid emits in Slider component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number | number[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number | number[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "slideend",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SliderSlideEndEvent",
                                    "description": "Custom slide end event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when slide ends."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SliderPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "SliderPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "SliderPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "SliderSlideEndEvent": {
                    "description": "Custom slide end event.",
                    "props": []
                },
                "SliderProps": {
                    "description": "Defines valid properties in Slider component.",
                    "props": []
                },
                "SliderSlots": {
                    "description": "Defines valid slots in Slider component.",
                    "props": []
                },
                "SliderEmitsOptions": {
                    "description": "Defines valid emits in Slider component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SliderPassThroughOptionType": {
                    "values": "SliderPassThroughAttributes | (options: SliderPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "SliderEmits": {
                    "values": "EmitFn<SliderEmitsOptions>"
                }
            }
        }
    },
    "sliderstyle": {
        "description": "Slider is a component to provide input with a drag handle.\n\n[Live Demo](https://www.primevue.org/slider/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SliderStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SliderStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "SliderClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-slider\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "range",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-slider-range\"",
                            "description": "Class name of the range element"
                        },
                        {
                            "name": "handle",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-slider-handle\"",
                            "description": "Class name of the handle element"
                        }
                    ]
                }
            }
        }
    },
    "speeddial": {
        "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.\n\n[Live Demo](https://www.primevue.org/speeddial/)",
        "components": {
            "default": {
                "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SpeedDialPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SpeedDialProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "pcButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "pcAction",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the action's Button component."
                        },
                        {
                            "name": "actionIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action icon's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SpeedDialState": {
                    "description": "Defines current inline state in SpeedDial component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "List of items' id."
                        },
                        {
                            "name": "d_visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "isItemClicked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current click state of component as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "-1",
                            "description": "Current focused option index as a number."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialContext": {
                    "description": "Defines current options in SpeedDial component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "hidden",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current hidden state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialTooltipOptions": {
                    "description": "Defines tooltip options.",
                    "relatedProp": "SpeedDialProps.tooltipOptions",
                    "props": [
                        {
                            "name": "event",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"focus\" | \"hover\"",
                            "default": "",
                            "description": "Event to show the tooltip, valid values are hover and focus."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"left\" | \"right\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of element."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SpeedDialProps": {
                    "description": "Defines valid properties in SpeedDial component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the action items."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the overlay."
                        },
                        {
                            "name": "direction",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"up\" | \"down\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\"",
                            "default": "up",
                            "description": "Specifies the opening direction of actions."
                        },
                        {
                            "name": "transitionDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "30",
                            "description": "Transition delay step for each action item."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"circle\" | \"linear\" | \"semi-circle\" | \"quarter-circle\"",
                            "default": "linear",
                            "description": "Specifies the opening type of actions."
                        },
                        {
                            "name": "radius",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Radius for *circle types."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show a mask element behind the speeddial."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component is disabled."
                        },
                        {
                            "name": "hideOnClickOutside",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the actions close when clicked outside."
                        },
                        {
                            "name": "buttonClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the button element."
                        },
                        {
                            "name": "maskStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the mask element."
                        },
                        {
                            "name": "maskClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the mask element."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Show icon of the button element."
                        },
                        {
                            "name": "hideIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Hide icon of the button element."
                        },
                        {
                            "name": "rotateAnimation",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defined to rotate showIcon when hideIcon is not present."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialTooltipOptions",
                            "default": "",
                            "description": "Whether to display the tooltip on items. The modifiers of Tooltip can be used like an object in it. Valid keys are 'event' and 'position'."
                        },
                        {
                            "name": "buttonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the button component."
                        },
                        {
                            "name": "actionButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Used to pass all properties of the ButtonProps to the item component."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive list element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying list element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SpeedDialPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialSlots": {
                    "description": "Defines valid slots in SpeedDial component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">onClick</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Item click function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Button click function</span>\n}",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        },
                        {
                            "name": "button",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">visible</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Visible state of the item</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Button click function</span>\n}",
                                    "description": "button slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom button template."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">visible</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Visible state of the item</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon template</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        }
                    ]
                },
                "SpeedDialEmitsOptions": {
                    "description": "Defines valid emits in SpeedDial component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when the button element clicked."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the actions are visible."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the actions are hidden."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SpeedDialPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "SpeedDialSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "SpeedDialPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "SpeedDialPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "SpeedDialState": {
                    "description": "Defines current inline state in SpeedDial component.",
                    "props": []
                },
                "SpeedDialContext": {
                    "description": "Defines current options in SpeedDial component.",
                    "props": []
                },
                "SpeedDialTooltipOptions": {
                    "description": "Defines tooltip options.",
                    "props": []
                },
                "SpeedDialProps": {
                    "description": "Defines valid properties in SpeedDial component.",
                    "props": []
                },
                "SpeedDialSlots": {
                    "description": "Defines valid slots in SpeedDial component.",
                    "props": []
                },
                "SpeedDialEmitsOptions": {
                    "description": "Defines valid emits in SpeedDial component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SpeedDialPassThroughOptionType": {
                    "values": "SpeedDialPassThroughAttributes | (options: SpeedDialPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "SpeedDialEmits": {
                    "values": "EmitFn<SpeedDialEmitsOptions>"
                }
            }
        }
    },
    "speeddialstyle": {
        "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.\n\n[Live Demo](https://www.primevue.org/speeddial/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SpeedDialStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SpeedDialStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "SpeedDialClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-speeddial\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "pcButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-speeddial-button\"",
                            "description": "Class name of the button element"
                        },
                        {
                            "name": "list",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-speeddial-list\"",
                            "description": "Class name of the list element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-speeddial-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-speeddial-action\"",
                            "description": "Class name of the action element"
                        },
                        {
                            "name": "actionIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-speeddial-action-icon\"",
                            "description": "Class name of the action icon element"
                        },
                        {
                            "name": "mask",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-speeddial-mask\"",
                            "description": "Class name of the mask element"
                        }
                    ]
                }
            }
        }
    },
    "splitbutton": {
        "description": "SplitButton groups a set of commands in an overlay with a default command.\n\n[Live Demo](https://www.primevue.org/splitbutton/)",
        "components": {
            "default": {
                "description": "SplitButton groups a set of commands in an overlay with a default command.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitButtonState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SplitButtonSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitButtonState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "SplitButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SplitButtonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "pcButton",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "pcMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the TieredMenu component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SplitButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SplitButtonState": {
                    "description": "Defines current inline state in SplitButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "isExpanded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current expanded state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "SplitButtonProps": {
                    "description": "Defines valid properties in SplitButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the button."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the icon."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the overlay items."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached.\nSpecial keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "buttonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the default button."
                        },
                        {
                            "name": "menuButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the menu button."
                        },
                        {
                            "name": "menuButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the menu button icon."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the menu button icon."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\" | \"help\">",
                            "default": "",
                            "description": "Defines the style of the button."
                        },
                        {
                            "name": "raised",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a shadow to indicate elevation."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a circular border radius to the button."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a textual class to the button without a background initially."
                        },
                        {
                            "name": "outlined",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a border class without a background initially."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the button."
                        },
                        {
                            "name": "plain",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a plain textual class to the button without a background initially."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SplitButtonPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SplitButtonSlots": {
                    "description": "Defines valid slots in SplitButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Button part of the content can easily be customized with the default slot instead of using the built-in modes."
                        },
                        {
                            "name": "buttoncontent",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Command button part of the content can easily be customized with the button content slot."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom button icon template."
                        },
                        {
                            "name": "menubuttonicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "menubuttonicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use dropdownicon slot instead.\nCustom menu button icon template."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "menubuttonicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu button icon template."
                        },
                        {
                            "name": "menuitemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "menuitemicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu item icon template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">TieredMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each menu item."
                        }
                    ]
                },
                "SplitButtonEmitsOptions": {
                    "description": "Defines valid emits in SplitButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when main button is clicked."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SplitButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "SplitButtonSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "SplitButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "SplitButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "SplitButtonState": {
                    "description": "Defines current inline state in SplitButton component.",
                    "props": []
                },
                "SplitButtonProps": {
                    "description": "Defines valid properties in SplitButton component.",
                    "props": []
                },
                "SplitButtonSlots": {
                    "description": "Defines valid slots in SplitButton component.",
                    "props": []
                },
                "SplitButtonEmitsOptions": {
                    "description": "Defines valid emits in SplitButton component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SplitButtonPassThroughOptionType": {
                    "values": "SplitButtonPassThroughAttributes | (options: SplitButtonPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "SplitButtonEmits": {
                    "values": "EmitFn<SplitButtonEmitsOptions>"
                }
            }
        }
    },
    "splitbuttonstyle": {
        "description": "SplitButton groups a set of commands in an overlay with a default command.\n\n[Live Demo](https://www.primevue.org/splitbutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitButtonStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SplitButtonStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "SplitButtonClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-splitbutton\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "pcButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-splitbutton-button\"",
                            "description": "Class name of the button element"
                        },
                        {
                            "name": "pcDropdown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-splitbutton-dropdown\"",
                            "description": "Class name of the dropdown element"
                        }
                    ]
                }
            }
        }
    },
    "splitter": {
        "description": "Splitter is utilized to separate and resize panels.\n\n[Live Demo](https://www.primevue.org/splitter/)",
        "components": {
            "default": {
                "description": "Splitter is utilized to separate and resize panels.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SplitterResizeStartEvent": {
                    "description": "Custom resize start event.",
                    "relatedProp": "SplitterEmitsOptions.resizestart",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "sizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Sizes of the panels"
                        }
                    ],
                    "methods": []
                },
                "SplitterResizeEvent": {
                    "description": "Custom resize event.",
                    "relatedProp": "SplitterEmitsOptions.resize",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "sizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Sizes of the panels"
                        }
                    ],
                    "methods": []
                },
                "SplitterResizeEndEvent": {
                    "description": "Custom resize end event.",
                    "relatedProp": "SplitterEmitsOptions.resizeend",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "sizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Sizes of the panels"
                        }
                    ],
                    "methods": []
                },
                "SplitterPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SplitterProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "gutter",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the gutter's DOM element."
                        },
                        {
                            "name": "gutterHandle",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the gutter handle's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SplitterPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SplitterState": {
                    "description": "Defines current inline state in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "prevSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Previous size state as a number."
                        }
                    ],
                    "methods": []
                },
                "SplitterContext": {
                    "description": "Defines options in Splitter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "nested",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current nested state of the component."
                        }
                    ],
                    "methods": []
                },
                "SplitterProps": {
                    "description": "Defines valid properties in Splitter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the panels."
                        },
                        {
                            "name": "gutterSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4",
                            "description": "Size of the divider in pixels."
                        },
                        {
                            "name": "stateKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Storage identifier of a stateful Splitter."
                        },
                        {
                            "name": "stateStorage",
                            "optional": true,
                            "readonly": false,
                            "type": "\"session\" | \"local\"",
                            "default": "session",
                            "description": "Defines where a stateful splitter keeps its state, valid values are 'session' for sessionStorage and 'local' for localStorage."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the size of the panels while pressing the arrow keys."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SplitterPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SplitterSlots": {
                    "description": "Defines valid slots in Splitter slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect SplitterPanel components."
                        }
                    ]
                },
                "SplitterEmitsOptions": {
                    "description": "Defines valid emits in Splitter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "resizestart",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SplitterResizeStartEvent",
                                    "description": "Custom resize start event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when resize starts."
                        },
                        {
                            "name": "resize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SplitterResizeEvent",
                                    "description": "Custom resize event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke during the resizing process."
                        },
                        {
                            "name": "resizeend",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SplitterResizeEndEvent",
                                    "description": "Custom resize end event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when resize ends."
                        }
                    ]
                },
                "SplitterMethods": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "resetState",
                            "parameters": [],
                            "returnType": "void",
                            "description": "This method resizes all panels by either using the stored state in the case of a stateful Splitter, the size property of each SplitterPanel, or by resetting them to their default values."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SplitterPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "SplitterResizeStartEvent": {
                    "description": "Custom resize start event.",
                    "props": []
                },
                "SplitterResizeEvent": {
                    "description": "Custom resize event.",
                    "props": []
                },
                "SplitterResizeEndEvent": {
                    "description": "Custom resize end event.",
                    "props": []
                },
                "SplitterPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "SplitterPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "SplitterState": {
                    "description": "Defines current inline state in Panel component.",
                    "props": []
                },
                "SplitterContext": {
                    "description": "Defines options in Splitter component.",
                    "props": []
                },
                "SplitterProps": {
                    "description": "Defines valid properties in Splitter component.",
                    "props": []
                },
                "SplitterSlots": {
                    "description": "Defines valid slots in Splitter slots.",
                    "props": []
                },
                "SplitterEmitsOptions": {
                    "description": "Defines valid emits in Splitter component.",
                    "props": []
                },
                "SplitterMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SplitterPassThroughOptionType": {
                    "values": "SplitterPassThroughAttributes | (options: SplitterPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "SplitterEmits": {
                    "values": "EmitFn<SplitterEmitsOptions>"
                }
            }
        }
    },
    "splitterstyle": {
        "description": "Splitter is utilized to separate and resize panels.\n\n[Live Demo](https://www.primevue.org/splitter/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SplitterStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "SplitterClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-splitter\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "gutter",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-splitter-gutter\"",
                            "description": "Class name of the gutter element"
                        },
                        {
                            "name": "gutterHandle",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-splitter-gutter-handle\"",
                            "description": "Class name of the gutter handle element"
                        }
                    ]
                }
            }
        }
    },
    "splitterpanel": {
        "description": "SplitterPanel is a helper component for Splitter component.\n\n[Live Demo](https://www.primevue.org/splitter/)",
        "components": {
            "default": {
                "description": "SplitterPanel is a helper component for Splitter component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterPanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterPanelContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SplitterPanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelContext": {
                    "description": "Defines options in SplitterPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "nested",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current nested state of the panel."
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelProps": {
                    "description": "Defines valid properties in SplitterPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Size of the element relative to 100%."
                        },
                        {
                            "name": "minSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Minimum size of the element relative to 100%."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SplitterPanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelSlots": {
                    "description": "Defines valid slots in SplitterPanel slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SplitterPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "SplitterPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "SplitterPanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "SplitterPanelContext": {
                    "description": "Defines options in SplitterPanel component.",
                    "props": []
                },
                "SplitterPanelProps": {
                    "description": "Defines valid properties in SplitterPanel component.",
                    "props": []
                },
                "SplitterPanelSlots": {
                    "description": "Defines valid slots in SplitterPanel slots.",
                    "props": []
                },
                "SplitterPanelEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SplitterPanelPassThroughOptionType": {
                    "values": "SplitterPanelPassThroughAttributes | (options: SplitterPanelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "SplitterPanelEmits": {
                    "values": "EmitFn<SplitterPanelEmitsOptions>"
                }
            }
        }
    },
    "splitterpanelstyle": {
        "description": "SplitterPanel is a helper component for Splitter component.\n\n[Live Demo](https://www.primevue.org/splitter/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterPanelStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "SplitterPanelStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "SplitterPanelClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-splitterpanel\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "step": {
        "description": "Step is a helper component for Stepper component.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "components": {
            "default": {
                "description": "Step is a helper component for Stepper component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "StepProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "StepContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "StepPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "StepProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "StepPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "number",
                            "optional": true,
                            "readonly": false,
                            "type": "StepPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the number's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "StepPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StepPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "StepProps": {
                    "description": "Defines valid properties in Step component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of step."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the step is disabled."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Component<any, any, any, ComputedOptions, MethodOptions, Object, any>",
                            "default": "BUTTON",
                            "description": "Use to change the HTML tag of root element."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it changes the default rendered element for the one passed as a child element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StepPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "StepContext": {
                    "description": "Defines current options in Step component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the step is active."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the step is disabled."
                        }
                    ],
                    "methods": []
                },
                "StepSlots": {
                    "description": "Defines valid slots in Step slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loader.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the step is active.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Value of step.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">a11yAttrs</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// A11t attributes</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">activateCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Click function.</span>\n}"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template. Slot attributes can be used when asChild prop is true."
                        }
                    ]
                },
                "StepEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "StepPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "StepPassThroughAttributes": {
                    "props": []
                },
                "StepProps": {
                    "description": "Defines valid properties in Step component.",
                    "props": []
                },
                "StepContext": {
                    "description": "Defines current options in Step component.",
                    "props": []
                },
                "StepSlots": {
                    "description": "Defines valid slots in Step slots.",
                    "props": []
                },
                "StepEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepPassThroughOptionType": {
                    "values": "StepPassThroughAttributes | (options: StepPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "StepEmits": {
                    "values": "EmitFn<StepEmitsOptions>"
                }
            }
        }
    },
    "stepstyle": {
        "description": "Step is a helper component for Stepper component.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "StepClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-step\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-step-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "number",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-step-number\"",
                            "description": "Class name of the number element"
                        },
                        {
                            "name": "title",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-step-title\"",
                            "description": "Class name of the title element"
                        }
                    ]
                }
            }
        }
    },
    "stepitem": {
        "description": "StepItem is a helper component for Stepper component.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "components": {
            "default": {
                "description": "StepItem is a helper component for Stepper component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepItemPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "StepItemProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "StepItemPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "StepItemProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepItemPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StepItemPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "StepItemProps": {
                    "description": "Defines valid properties in StepItem component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of step."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StepItemPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "StepItemSlots": {
                    "description": "Defines valid slots in StepItem slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        }
                    ]
                },
                "StepItemEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepItemPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "StepItemPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "StepItemPassThroughAttributes": {
                    "props": []
                },
                "StepItemProps": {
                    "description": "Defines valid properties in StepItem component.",
                    "props": []
                },
                "StepItemSlots": {
                    "description": "Defines valid slots in StepItem slots.",
                    "props": []
                },
                "StepItemEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepItemPassThroughOptionType": {
                    "values": "StepItemPassThroughAttributes | (options: StepItemPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "StepItemEmits": {
                    "values": "EmitFn<StepItemEmitsOptions>"
                }
            }
        }
    },
    "stepitemstyle": {
        "description": "StepItem is a helper component for Stepper component.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepItemStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepItemStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "StepItemClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-stepitem\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "steplist": {
        "description": "StepList is a helper component for Stepper component.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "components": {
            "default": {
                "description": "StepList is a helper component for Stepper component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "StepListProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "StepListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "StepListProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StepListPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "StepListProps": {
                    "description": "Defines valid properties in StepList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StepListPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "StepListSlots": {
                    "description": "Defines valid slots in StepList slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        }
                    ]
                },
                "StepListEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "StepListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "StepListPassThroughAttributes": {
                    "props": []
                },
                "StepListProps": {
                    "description": "Defines valid properties in StepList component.",
                    "props": []
                },
                "StepListSlots": {
                    "description": "Defines valid slots in StepList slots.",
                    "props": []
                },
                "StepListEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepListPassThroughOptionType": {
                    "values": "StepListPassThroughAttributes | (options: StepListPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "StepListEmits": {
                    "values": "EmitFn<StepListEmitsOptions>"
                }
            }
        }
    },
    "stepliststyle": {
        "description": "StepList is a helper component for Stepper component.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepListStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepListStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "StepListClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-steplist\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "steppanel": {
        "description": "StepPanel is a helper component for Stepper component.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "components": {
            "default": {
                "description": "StepPanel is a helper component for Stepper component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "StepPanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "StepPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "StepPanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StepPanelPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "StepPanelProps": {
                    "description": "Defines valid properties in StepPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of step."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Component<any, any, any, ComputedOptions, MethodOptions, Object, any>",
                            "default": "BUTTON",
                            "description": "Use to change the HTML tag of root element."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it changes the default rendered element for the one passed as a child element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StepPanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "StepPanelSlots": {
                    "description": "Defines valid slots in StepPanel slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the step is active.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Value of step.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">a11yAttrs</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// A11t attributes</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">activateCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">value</span>: undefined) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Click function.</span>\n}"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template. Slot attributes can be used when asChild prop is true."
                        }
                    ]
                },
                "StepPanelEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "StepPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "StepPanelPassThroughAttributes": {
                    "props": []
                },
                "StepPanelProps": {
                    "description": "Defines valid properties in StepPanel component.",
                    "props": []
                },
                "StepPanelSlots": {
                    "description": "Defines valid slots in StepPanel slots.",
                    "props": []
                },
                "StepPanelEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepPanelPassThroughOptionType": {
                    "values": "StepPanelPassThroughAttributes | (options: StepPanelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "StepPanelEmits": {
                    "values": "EmitFn<StepPanelEmitsOptions>"
                }
            }
        }
    },
    "steppanelstyle": {
        "description": "StepPanel is a helper component for Stepper component.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepPanelStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepPanelStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "StepPanelClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-steppanel\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "steppanels": {
        "description": "StepPanels is a helper component for Stepper component.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "components": {
            "default": {
                "description": "StepPanels is a helper component for Stepper component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepPanelsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "StepPanelsProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "StepPanelsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "StepPanelsProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepPanelsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StepPanelsPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "StepPanelsProps": {
                    "description": "Defines valid properties in StepPanels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StepPanelsPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "StepPanelsSlots": {
                    "description": "Defines valid slots in StepPanels slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        }
                    ]
                },
                "StepPanelsEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepPanelsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "StepPanelsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "StepPanelsPassThroughAttributes": {
                    "props": []
                },
                "StepPanelsProps": {
                    "description": "Defines valid properties in StepPanels component.",
                    "props": []
                },
                "StepPanelsSlots": {
                    "description": "Defines valid slots in StepPanels slots.",
                    "props": []
                },
                "StepPanelsEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepPanelsPassThroughOptionType": {
                    "values": "StepPanelsPassThroughAttributes | (options: StepPanelsPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "StepPanelsEmits": {
                    "values": "EmitFn<StepPanelsEmitsOptions>"
                }
            }
        }
    },
    "steppanelsstyle": {
        "description": "StepPanels\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepPanelsStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepPanelsStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "StepPanelsClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-steppanels\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "stepper": {
        "description": "Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multi-step process.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "components": {
            "default": {
                "description": "Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multi-step process.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "StepperPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "StepperProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StepperPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "StepperState": {
                    "description": "Defines current inline state in Stepper component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current active value state."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique id for the Stepper component."
                        }
                    ],
                    "methods": []
                },
                "StepperProps": {
                    "description": "Defines valid properties in Stepper component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "null",
                            "description": "Active value of stepper."
                        },
                        {
                            "name": "linear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the steps are clickable or not."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StepperPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "StepperSlots": {
                    "description": "Defines valid slots in Stepper component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom default template."
                        },
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        }
                    ]
                },
                "StepperEmitsOptions": {
                    "description": "Defines valid emits in Stepper component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:value",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepperPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "StepperPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "StepperPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "StepperState": {
                    "description": "Defines current inline state in Stepper component.",
                    "props": []
                },
                "StepperProps": {
                    "description": "Defines valid properties in Stepper component.",
                    "props": []
                },
                "StepperSlots": {
                    "description": "Defines valid slots in Stepper component.",
                    "props": []
                },
                "StepperEmitsOptions": {
                    "description": "Defines valid emits in Stepper component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepperPassThroughOptionType": {
                    "values": "StepperPassThroughAttributes | (options: StepperPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "StepperEmits": {
                    "values": "EmitFn<StepperEmitsOptions>"
                }
            }
        }
    },
    "stepperstyle": {
        "description": "Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multi-step process.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepperStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "StepperClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-stepper\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "separator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-stepper-separator\"",
                            "description": "Class name of the separator element"
                        }
                    ]
                }
            }
        }
    },
    "steps": {
        "description": "Steps components is an indicator for the steps in a wizard workflow. Example below uses nested routes with Steps.\n\n[Live Demo](https://www.primevue.org/steps/)",
        "components": {
            "default": {
                "description": "Steps components is an indicator for the steps in a wizard workflow. Example below uses nested routes with Steps.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "StepsProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "StepsContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "StepsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "StepsProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "itemLink",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item link's DOM element."
                        },
                        {
                            "name": "itemNumber",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item number's DOM element."
                        },
                        {
                            "name": "itemLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item label's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StepsPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "StepsContext": {
                    "description": "Defines current options in Steps component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "StepsRouterBindProps": {
                    "description": "Defines valid router binding props in Steps component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "step",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        }
                    ],
                    "methods": []
                },
                "StepsProps": {
                    "description": "Defines valid properties in Steps component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the items are clickable or not."
                        },
                        {
                            "name": "activeStep",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Active step index of menuitem."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StepsPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "StepsSlots": {
                    "description": "Defines valid slots in Steps component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current active state of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Order of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">StepsRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        }
                    ]
                },
                "StepsEmitsOptions": {
                    "description": "Defines valid emits in Steps component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "StepsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "StepsPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "StepsContext": {
                    "description": "Defines current options in Steps component.",
                    "props": []
                },
                "StepsRouterBindProps": {
                    "description": "Defines valid router binding props in Steps component.",
                    "props": []
                },
                "StepsProps": {
                    "description": "Defines valid properties in Steps component.",
                    "props": []
                },
                "StepsSlots": {
                    "description": "Defines valid slots in Steps component.",
                    "props": []
                },
                "StepsEmitsOptions": {
                    "description": "Defines valid emits in Steps component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepsPassThroughOptionType": {
                    "values": "StepsPassThroughAttributes | (options: StepsPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "StepsEmits": {
                    "values": "EmitFn<StepsEmitsOptions>"
                }
            }
        }
    },
    "stepsstyle": {
        "description": "Steps components is an indicator for the steps in a wizard workflow. Example below uses nested routes with Steps.\n\n[Live Demo](https://www.primevue.org/steps/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepsStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StepsStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "StepsClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-steps\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "list",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-steps-list\"",
                            "description": "Class name of the list element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-steps-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "itemLink",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-steps-item-link\"",
                            "description": "Class name of the item link element"
                        },
                        {
                            "name": "itemNumber",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-steps-item-number\"",
                            "description": "Class name of the item number element"
                        },
                        {
                            "name": "itemLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-steps-item-label\"",
                            "description": "Class name of the item label element"
                        }
                    ]
                }
            }
        }
    },
    "styleclass": {
        "description": "StyleClass manages CSS classes declaratively to during enter/leave animations or just to toggle classes on an element.\n\n[Live Demo](https://primevue.org/styleclass)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StyleClassOptions": {
                    "description": "Defines options of StyleClass.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selector",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"@next\" | \"@prev\" | \"@parent\" | \"@grandparent\">",
                            "default": "",
                            "description": "Selector to define the target element. Available selectors are '@next', '@prev', '@parent' and '@grandparent'."
                        },
                        {
                            "name": "enterFromClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "enterActiveClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during enter animation."
                        },
                        {
                            "name": "enterToClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "leaveFromClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get hidden."
                        },
                        {
                            "name": "leaveActiveClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during leave animation."
                        },
                        {
                            "name": "leaveToClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when leave animation is completed."
                        },
                        {
                            "name": "hiddenClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Special class name to hide an element, only used in slide animation."
                        },
                        {
                            "name": "hideOnOutsideClick",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to trigger leave animation when outside of the element is clicked."
                        },
                        {
                            "name": "toggleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Adds or removes a class when no enter-leave animation is required."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StyleClassDirectivePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "StyleClassDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) directive options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StyleClassDirectiveBinding": {
                    "description": "Binding of StyleClass directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "null | ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, \"\", Object, any> | Record<string, any>",
                            "default": ""
                        },
                        {
                            "name": "oldValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "arg",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dir",
                            "optional": false,
                            "readonly": false,
                            "type": "ObjectDirective<any, any, string, string>",
                            "default": ""
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "StyleClassOptions",
                            "default": "",
                            "description": "Value of the StyleClass."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StyleClassOptions": {
                    "description": "Defines options of StyleClass.",
                    "props": []
                },
                "StyleClassDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) directive options.",
                    "props": []
                },
                "StyleClassDirectiveBinding": {
                    "description": "Binding of StyleClass directive.",
                    "props": []
                }
            }
        }
    },
    "styleclassstyle": {
        "description": "StyleClass manages css classes declaratively to during enter/leave animations or just to toggle classes on an element.\n\n[Live Demo](https://primevue.org/styleclass)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StyleClassStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "StyleClassStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "StyleClassClasses": {
                    "members": []
                }
            }
        }
    },
    "tab": {
        "description": "Tab is a helper component for Tabs component.\n\n[Live Demo](https://www.primevue.org/tabs/)",
        "components": {
            "default": {
                "description": "Tab is a helper component for Tabs component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TabContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TabPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TabProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TabPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TabProps": {
                    "description": "Defines valid properties in Tab component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of tab."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tab is disabled."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Component<any, any, any, ComputedOptions, MethodOptions, Object, any>",
                            "default": "BUTTON",
                            "description": "Use to change the HTML tag of root element."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it changes the default rendered element for the one passed as a child element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TabPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "TabContext": {
                    "description": "Defines current options in Tab component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is active."
                        }
                    ],
                    "methods": []
                },
                "TabSlots": {
                    "description": "Defines valid slots in Tab slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        }
                    ]
                },
                "TabEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TabPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TabPassThroughAttributes": {
                    "props": []
                },
                "TabProps": {
                    "description": "Defines valid properties in Tab component.",
                    "props": []
                },
                "TabContext": {
                    "description": "Defines current options in Tab component.",
                    "props": []
                },
                "TabSlots": {
                    "description": "Defines valid slots in Tab slots.",
                    "props": []
                },
                "TabEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabPassThroughOptionType": {
                    "values": "TabPassThroughAttributes | (options: TabPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TabEmits": {
                    "values": "EmitFn<TabEmitsOptions>"
                }
            }
        }
    },
    "tabstyle": {
        "description": "Tab is a helper component for Tabs component.\n\n[Live Demo](https://www.primevue.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TabClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tab\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "tablist": {
        "description": "TabList is a helper component for Tabs component.\n\n[Live Demo](https://www.primevue.org/tabs/)",
        "components": {
            "default": {
                "description": "TabList is a helper component for Tabs component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabListProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TabListContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TabListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TabListProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "prevButton",
                            "optional": true,
                            "readonly": false,
                            "type": "TabListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous button component."
                        },
                        {
                            "name": "nextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "TabListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next button component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TabListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "tabList",
                            "optional": true,
                            "readonly": false,
                            "type": "TabListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the tablist's DOM element."
                        },
                        {
                            "name": "activeBar",
                            "optional": true,
                            "readonly": false,
                            "type": "TabListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the inkbar's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TabListPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TabListProps": {
                    "description": "Defines valid properties in TabList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TabListPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "TabListContext": {
                    "description": "Defines current options in TabList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TabListSlots": {
                    "description": "Defines valid slots in TabList slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        }
                    ]
                },
                "TabListEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TabListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TabListPassThroughAttributes": {
                    "props": []
                },
                "TabListProps": {
                    "description": "Defines valid properties in TabList component.",
                    "props": []
                },
                "TabListContext": {
                    "description": "Defines current options in TabList component.",
                    "props": []
                },
                "TabListSlots": {
                    "description": "Defines valid slots in TabList slots.",
                    "props": []
                },
                "TabListEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabListPassThroughOptionType": {
                    "values": "TabListPassThroughAttributes | (options: TabListPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TabListEmits": {
                    "values": "EmitFn<TabListEmitsOptions>"
                }
            }
        }
    },
    "tabliststyle": {
        "description": "TabList is a helper component for Tabs component.\n\n[Live Demo](https://www.primevue.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabListStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabListStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TabListClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tablist\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tablist-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "tabList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tablist-tab-list\"",
                            "description": "Class name of the tabs element"
                        },
                        {
                            "name": "activeBar",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tablist-active-bar\"",
                            "description": "Class name of the activebar element"
                        },
                        {
                            "name": "prevButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tablist-prev-button\"",
                            "description": "Class name of the previous button element"
                        },
                        {
                            "name": "nextButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tablist-next-button\"",
                            "description": "Class name of the next button element"
                        }
                    ]
                }
            }
        }
    },
    "tabmenu": {
        "description": "TabMenu is a navigation component that displays items as tab headers. Example below uses nested routes with TabMenu.\n\n[Live Demo](https://www.primevue.org/tabmenu/)",
        "components": {
            "default": {
                "description": "TabMenu is a navigation component that displays items as tab headers. Example below uses nested routes with TabMenu.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabMenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TabMenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TabMenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TabMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TabMenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "tablist",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the tablist's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "itemLink",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item link's DOM element."
                        },
                        {
                            "name": "itemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item itemIcon's DOM element."
                        },
                        {
                            "name": "itemLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item label's DOM element."
                        },
                        {
                            "name": "activeBar",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the inkbar's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TabMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TabMenuState": {
                    "description": "Defines current inline state in TabMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current active index state as a number."
                        }
                    ],
                    "methods": []
                },
                "TabMenuContext": {
                    "description": "Defines current options in TabMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem"
                        }
                    ],
                    "methods": []
                },
                "TabMenuChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "TabMenuEmitsOptions['tab-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the selected tab"
                        }
                    ],
                    "methods": []
                },
                "TabMenuRouterBindProps": {
                    "description": "Defines valid router binding props in TabMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        }
                    ],
                    "methods": []
                },
                "TabMenuProps": {
                    "description": "Defines valid properties in TabMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Active index of menuitem."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TabMenuPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TabMenuSlots": {
                    "description": "Defines valid slots in TabMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current active state of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">TabMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        }
                    ]
                },
                "TabMenuEmitsOptions": {
                    "description": "Defines valid emits in TabMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "tab-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabMenuChangeEvent",
                                    "description": "Custom tab change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is changed."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TabMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TabMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "TabMenuState": {
                    "description": "Defines current inline state in TabMenu component.",
                    "props": []
                },
                "TabMenuContext": {
                    "description": "Defines current options in TabMenu component.",
                    "props": []
                },
                "TabMenuChangeEvent": {
                    "description": "Custom change event.",
                    "props": []
                },
                "TabMenuRouterBindProps": {
                    "description": "Defines valid router binding props in TabMenu component.",
                    "props": []
                },
                "TabMenuProps": {
                    "description": "Defines valid properties in TabMenu component.",
                    "props": []
                },
                "TabMenuSlots": {
                    "description": "Defines valid slots in TabMenu component.",
                    "props": []
                },
                "TabMenuEmitsOptions": {
                    "description": "Defines valid emits in TabMenu component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabMenuPassThroughOptionType": {
                    "values": "TabMenuPassThroughAttributes | (options: TabMenuPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TabMenuEmits": {
                    "values": "EmitFn<TabMenuEmitsOptions>"
                }
            }
        }
    },
    "tabmenustyle": {
        "description": "TabMenu is a navigation component that displays items as tab headers. Example below uses nested routes with TabMenu.\n\n[Live Demo](https://www.primevue.org/tabmenu/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabMenuStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabMenuStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TabMenuClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabmenu\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "tablist",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabmenu-tablist\"",
                            "description": "Class name of the tablist element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabmenu-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "itemLink",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabmenu-item-link\"",
                            "description": "Class name of the item link element"
                        },
                        {
                            "name": "itemIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabmenu-item-icon\"",
                            "description": "Class name of the item icon element"
                        },
                        {
                            "name": "itemLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabmenu-item-label\"",
                            "description": "Class name of the item label element"
                        },
                        {
                            "name": "inkbar",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabmenu-ink-bar\"",
                            "description": "Class name of the inkbar element"
                        }
                    ]
                }
            }
        }
    },
    "tabpanel": {
        "description": "TabPanel is a helper component for Tabs component.\n\n[Live Demo](https://www.primevue.org/tabs/)",
        "components": {
            "default": {
                "description": "TabPanel is a helper component for Tabs component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabPanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TabPanelContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TabPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TabPanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "headerAction",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header action's DOM element.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "headerTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TabPanelPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TabPanelProps": {
                    "description": "Defines valid properties in TabPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of tabpanel."
                        },
                        {
                            "name": "as",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Component<any, any, any, ComputedOptions, MethodOptions, Object, any>",
                            "default": "DIV",
                            "description": "Use to change the HTML tag of root element."
                        },
                        {
                            "name": "asChild",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it changes the default rendered element for the one passed as a child element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Orientation of tab headers.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab header.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "headerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab header.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "headerProps",
                            "optional": true,
                            "readonly": false,
                            "type": "LiHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLLiElement to the tab header.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "headerActionProps",
                            "optional": true,
                            "readonly": false,
                            "type": "AnchorHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLAnchorElement to the focusable anchor element inside the tab header.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab content.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab content.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "contentProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the tab content.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tab is disabled.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TabPanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "TabPanelContext": {
                    "description": "Defines current options in TabPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the tab.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Count of tabs",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is first.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is last.",
                            "deprecated": "since v4. Only supported by TabView."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is active."
                        }
                    ],
                    "methods": []
                },
                "TabPanelSlots": {
                    "description": "Defines valid slots in TabPanel slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template.",
                            "deprecated": "since v4. Only supported by TabView."
                        }
                    ]
                },
                "TabPanelEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TabPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TabPanelPassThroughAttributes": {
                    "props": []
                },
                "TabPanelProps": {
                    "description": "Defines valid properties in TabPanel component.",
                    "props": []
                },
                "TabPanelContext": {
                    "description": "Defines current options in TabPanel component.",
                    "props": []
                },
                "TabPanelSlots": {
                    "description": "Defines valid slots in TabPanel slots.",
                    "props": []
                },
                "TabPanelEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabPanelPassThroughOptionType": {
                    "values": "TabPanelPassThroughAttributes | (options: TabPanelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TabPanelEmits": {
                    "values": "EmitFn<TabPanelEmitsOptions>"
                }
            }
        }
    },
    "tabpanelstyle": {
        "description": "TabPanel is a helper component for Tabs component.\n\n[Live Demo](https://www.primevue.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabPanelStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabPanelStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TabPanelClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabpanel\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "tabpanels": {
        "description": "TabPanels is a helper component for Tabs component.\n\n[Live Demo](https://www.primevue.org/tabview/)",
        "components": {
            "default": {
                "description": "TabPanels is a helper component for Tabs component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabPanelsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabPanelsProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TabPanelsContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TabPanelsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TabPanelsProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TabPanelsPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TabPanelsProps": {
                    "description": "Defines valid properties in TabPanels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TabPanelsPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "TabPanelsContext": {
                    "description": "Defines current options in TabPanels component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TabPanelsSlots": {
                    "description": "Defines valid slots in TabPanels slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        }
                    ]
                },
                "TabPanelsEmitsOptions": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabPanelsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TabPanelsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TabPanelsPassThroughAttributes": {
                    "props": []
                },
                "TabPanelsProps": {
                    "description": "Defines valid properties in TabPanels component.",
                    "props": []
                },
                "TabPanelsContext": {
                    "description": "Defines current options in TabPanels component.",
                    "props": []
                },
                "TabPanelsSlots": {
                    "description": "Defines valid slots in TabPanels slots.",
                    "props": []
                },
                "TabPanelsEmitsOptions": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabPanelsPassThroughOptionType": {
                    "values": "TabPanelsPassThroughAttributes | (options: TabPanelsPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TabPanelsEmits": {
                    "values": "EmitFn<TabPanelsEmitsOptions>"
                }
            }
        }
    },
    "tabpanelsstyle": {
        "description": "TabPanels is a helper component for Tabs component.\n\n[Live Demo](https://www.primevue.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabPanelsStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabPanelsStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TabPanelsClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabpanels\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "tabs": {
        "description": "Tabs facilitates seamless switching between different views.\n\n[Live Demo](https://www.primevue.org/tabs/)",
        "components": {
            "default": {
                "description": "Tabs facilitates seamless switching between different views.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabsProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TabsState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TabsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TabsProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TabsPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TabsState": {
                    "description": "Defines current inline state in Tabs component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Current active value state."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique id for the Tabs component."
                        }
                    ],
                    "methods": []
                },
                "TabsProps": {
                    "description": "Defines valid properties in Tabs component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value of the active tab."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, enables horizontal and/or vertical scrolling."
                        },
                        {
                            "name": "showNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in container when scrollable is enabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TabsPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TabsSlots": {
                    "description": "Defines valid slots in Tabs slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect TabPanel components."
                        },
                        {
                            "name": "previcon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Previous button icon template for the scrollable component."
                        },
                        {
                            "name": "nexticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Next button icon template for the scrollable component."
                        }
                    ]
                },
                "TabsEmitsOptions": {
                    "description": "Defines valid emits in Tabs component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:value",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string | number",
                                    "description": "Current value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TabsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TabsPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "TabsState": {
                    "description": "Defines current inline state in Tabs component.",
                    "props": []
                },
                "TabsProps": {
                    "description": "Defines valid properties in Tabs component.",
                    "props": []
                },
                "TabsSlots": {
                    "description": "Defines valid slots in Tabs slots.",
                    "props": []
                },
                "TabsEmitsOptions": {
                    "description": "Defines valid emits in Tabs component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabsPassThroughOptionType": {
                    "values": "TabsPassThroughAttributes | (options: TabsPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TabsEmits": {
                    "values": "EmitFn<TabsEmitsOptions>"
                }
            }
        }
    },
    "tabsstyle": {
        "description": "Tabs facilitates seamless switching between different views.\n\n[Live Demo](https://www.primevue.org/tabs/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabsStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabsStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TabsClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabs\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "tabview": {
        "description": "",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabViewStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TabViewStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TabViewClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "navContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview-tablist-container\"",
                            "description": "Class name of the nav container element"
                        },
                        {
                            "name": "prevButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview-prev-button\"",
                            "description": "Class name of the previous button element"
                        },
                        {
                            "name": "navContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview-tablist-scroll-container\"",
                            "description": "Class name of the nav content element"
                        },
                        {
                            "name": "nav",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview-tablist\"",
                            "description": "Class name of the nav element"
                        },
                        {
                            "name": "tabHeader",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview-tablist-item\"",
                            "description": "Class name of the tab header element"
                        },
                        {
                            "name": "tabHeaderAction",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview-tab-header\"",
                            "description": "Class name of the tab header action element"
                        },
                        {
                            "name": "tabHeaderTitle",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview-tab-title\"",
                            "description": "Class name of the tab header title element"
                        },
                        {
                            "name": "tabContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview-panel\"",
                            "description": "Class name of the tab content element"
                        },
                        {
                            "name": "inkbar",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview-ink-bar\"",
                            "description": "Class name of the inkbar element"
                        },
                        {
                            "name": "nextButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview-next-button\"",
                            "description": "Class name of the next button element"
                        },
                        {
                            "name": "panelContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tabview-panels\"",
                            "description": "Class name of the panel container element"
                        }
                    ]
                }
            }
        }
    },
    "tag": {
        "description": "Tag component is used to categorize content.\n\n[Live Demo](https://www.primevue.org/tag)",
        "components": {
            "default": {
                "description": "Tag component is used to categorize content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TagProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TagPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TagProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TagPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TagProps": {
                    "description": "Defines valid properties in Tag component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value to display inside the tag."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"secondary\" | \"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\">",
                            "default": "",
                            "description": "Severity type of the tag."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the corners of the tag are rounded."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the tag to display next to the value."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TagPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TagSlots": {
                    "description": "Defines valid slots in Tag component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template"
                        },
                        {
                            "name": "icon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template"
                        }
                    ]
                },
                "TagEmitsOptions": {
                    "description": "Defines valid emits in Tag component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TagPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TagPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TagPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "TagProps": {
                    "description": "Defines valid properties in Tag component.",
                    "props": []
                },
                "TagSlots": {
                    "description": "Defines valid slots in Tag component.",
                    "props": []
                },
                "TagEmitsOptions": {
                    "description": "Defines valid emits in Tag component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TagPassThroughOptionType": {
                    "values": "TagPassThroughAttributes | (options: TagPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TagEmits": {
                    "values": "EmitFn<TagEmitsOptions>"
                }
            }
        }
    },
    "tagstyle": {
        "description": "Tag component is used to categorize content.\n\n[Live Demo](https://www.primevue.org/tag)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TagStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TagClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tag\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tag-icon\"",
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tag-label\"",
                            "description": "Class name of the label element"
                        }
                    ]
                }
            }
        }
    },
    "terminal": {
        "description": "Terminal is a text based user interface.\n\n[Live Demo](https://www.primevue.org/terminal)",
        "components": {
            "default": {
                "description": "Terminal is a text based user interface.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TerminalPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TerminalProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TerminalState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TerminalPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TerminalProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "welcomeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the welcome message's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "commands",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the commands' DOM element."
                        },
                        {
                            "name": "prompt",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the prompt's DOM element."
                        },
                        {
                            "name": "command",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the command's DOM element."
                        },
                        {
                            "name": "response",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the response's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "commandText",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the command text's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TerminalPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TerminalState": {
                    "description": "Defines current inline state in Terminal component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "commandText",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current command text as a string."
                        },
                        {
                            "name": "commands",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Current commands as an array."
                        }
                    ],
                    "methods": []
                },
                "TerminalProps": {
                    "description": "Defines valid properties in Terminal component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "welcomeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Initial text to display on terminal."
                        },
                        {
                            "name": "prompt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Prompt text for each command."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TerminalPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TerminalSlots": {
                    "description": "Defines valid slots in Terminal component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TerminalEmitsOptions": {
                    "description": "Defines valid emits in Terminal component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TerminalPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TerminalPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TerminalPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "TerminalState": {
                    "description": "Defines current inline state in Terminal component.",
                    "props": []
                },
                "TerminalProps": {
                    "description": "Defines valid properties in Terminal component.",
                    "props": []
                },
                "TerminalSlots": {
                    "description": "Defines valid slots in Terminal component.",
                    "props": []
                },
                "TerminalEmitsOptions": {
                    "description": "Defines valid emits in Terminal component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TerminalPassThroughOptionType": {
                    "values": "TerminalPassThroughAttributes | (options: TerminalPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TerminalEmits": {
                    "values": "EmitFn<TerminalEmitsOptions>"
                }
            }
        }
    },
    "terminalstyle": {
        "description": "Terminal is a text based user interface.\n\n[Live Demo](https://www.primevue.org/terminal)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TerminalStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TerminalStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TerminalClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-terminal\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "welcomeMessage",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-terminal-welcome-message\"",
                            "description": "Class name of the welcome message element"
                        },
                        {
                            "name": "commandList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-terminal-command-list\"",
                            "description": "Class name of the command list element"
                        },
                        {
                            "name": "command",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-terminal-command\"",
                            "description": "Class name of the command element"
                        },
                        {
                            "name": "commandValue",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-terminal-command-value\"",
                            "description": "Class name of the command value element"
                        },
                        {
                            "name": "commandResponse",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-terminal-command-response\"",
                            "description": "Class name of the command response element"
                        },
                        {
                            "name": "prompt",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-terminal-prompt\"",
                            "description": "Class name of the prompt element"
                        },
                        {
                            "name": "promptLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-terminal-prompt-label\"",
                            "description": "Class name of the prompt label element"
                        },
                        {
                            "name": "promptValue",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-terminal-prompt-value\"",
                            "description": "Class name of the prompt value element"
                        }
                    ]
                }
            }
        }
    },
    "terminalservice": {
        "description": "[Live Demo](https://www.primevue.org/terminal/)",
        "model": {
            "TerminalServiceOptions": {
                "description": "Confirmation Service methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "on",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "undefined | \"command\" | \"response\""
                                },
                                {
                                    "name": "fn",
                                    "optional": false,
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the terminal using the action options."
                        },
                        {
                            "name": "emit",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "undefined | \"command\" | \"response\""
                                },
                                {
                                    "name": "params",
                                    "optional": true,
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emits the terminal using the action options."
                        },
                        {
                            "name": "off",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "undefined | \"command\" | \"response\""
                                },
                                {
                                    "name": "fn",
                                    "optional": false,
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "description": "Closes the terminal using the action options."
                        }
                    ]
                }
            }
        }
    },
    "textarea": {
        "description": "Textarea is a multi-line text input element.\n\n[Live Demo](https://www.primevue.org/textarea/)",
        "components": {
            "default": {
                "description": "Textarea is a multi-line text input element.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TextareaPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TextareaProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TextareaContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TextareaPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TextareaProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TextareaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TextareaPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TextareaContext": {
                    "description": "Defines current options in Textarea component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current filled state of the component as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the component as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TextareaProps": {
                    "description": "Defines valid properties in Textarea component. In addition to these, all properties of TextareaHTMLAttributes can be used in this component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "aria-activedescendant",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application."
                        },
                        {
                            "name": "aria-atomic",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute."
                        },
                        {
                            "name": "aria-autocomplete",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"inline\" | \"list\" | \"both\"",
                            "default": "",
                            "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made."
                        },
                        {
                            "name": "aria-busy",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user."
                        },
                        {
                            "name": "aria-checked",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"mixed\"",
                            "default": "",
                            "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets."
                        },
                        {
                            "name": "aria-colcount",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the total number of columns in a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-colindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-colspan",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-controls",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element."
                        },
                        {
                            "name": "aria-current",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"page\" | \"step\" | \"location\" | \"date\" | \"time\"",
                            "default": "",
                            "description": "Indicates the element that represents the current item within a container or set of related elements."
                        },
                        {
                            "name": "aria-describedby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) that describes the object."
                        },
                        {
                            "name": "aria-details",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element that provides a detailed, extended description for the object."
                        },
                        {
                            "name": "aria-disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable."
                        },
                        {
                            "name": "aria-dropeffect",
                            "optional": true,
                            "readonly": false,
                            "type": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"",
                            "default": "",
                            "description": "Indicates what functions can be performed when a dragged object is released on the drop target.",
                            "deprecated": "in ARIA 1.1"
                        },
                        {
                            "name": "aria-errormessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element that provides an error message for the object."
                        },
                        {
                            "name": "aria-expanded",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed."
                        },
                        {
                            "name": "aria-flowto",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order."
                        },
                        {
                            "name": "aria-grabbed",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.",
                            "deprecated": "in ARIA 1.1"
                        },
                        {
                            "name": "aria-haspopup",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"menu\" | \"listbox\" | \"tree\" | \"grid\" | \"dialog\"",
                            "default": "",
                            "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element."
                        },
                        {
                            "name": "aria-hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether the element is exposed to an accessibility API."
                        },
                        {
                            "name": "aria-invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"grammar\" | \"spelling\"",
                            "default": "",
                            "description": "Indicates the entered value does not conform to the format expected by the application."
                        },
                        {
                            "name": "aria-keyshortcuts",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element."
                        },
                        {
                            "name": "aria-label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels the current element."
                        },
                        {
                            "name": "aria-labelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies the element (or elements) that labels the current element."
                        },
                        {
                            "name": "aria-level",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the hierarchical level of an element within a structure."
                        },
                        {
                            "name": "aria-live",
                            "optional": true,
                            "readonly": false,
                            "type": "\"off\" | \"assertive\" | \"polite\"",
                            "default": "",
                            "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region."
                        },
                        {
                            "name": "aria-modal",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether an element is modal when displayed."
                        },
                        {
                            "name": "aria-multiline",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates whether a text box accepts multiple lines of input or only a single line."
                        },
                        {
                            "name": "aria-multiselectable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the user may select more than one item from the current selectable descendants."
                        },
                        {
                            "name": "aria-orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "",
                            "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous."
                        },
                        {
                            "name": "aria-owns",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship."
                        },
                        {
                            "name": "aria-placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format."
                        },
                        {
                            "name": "aria-posinset",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
                        },
                        {
                            "name": "aria-pressed",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"mixed\"",
                            "default": "",
                            "description": "Indicates the current \"pressed\" state of toggle buttons."
                        },
                        {
                            "name": "aria-readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that the element is not editable, but is otherwise operable."
                        },
                        {
                            "name": "aria-relevant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
                            "default": "",
                            "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified."
                        },
                        {
                            "name": "aria-required",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates that user input is required on the element before a form may be submitted."
                        },
                        {
                            "name": "aria-roledescription",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a human-readable, author-localized description for the role of an element."
                        },
                        {
                            "name": "aria-rowcount",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the total number of rows in a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-rowindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-rowspan",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid."
                        },
                        {
                            "name": "aria-selected",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": "",
                            "description": "Indicates the current \"selected\" state of various widgets."
                        },
                        {
                            "name": "aria-setsize",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM."
                        },
                        {
                            "name": "aria-sort",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
                            "default": "",
                            "description": "Indicates if items in a table or grid are sorted in ascending or descending order."
                        },
                        {
                            "name": "aria-valuemax",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the maximum allowed value for a range widget."
                        },
                        {
                            "name": "aria-valuemin",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the minimum allowed value for a range widget."
                        },
                        {
                            "name": "aria-valuenow",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": "",
                            "description": "Defines the current value for a range widget."
                        },
                        {
                            "name": "aria-valuetext",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the human readable text alternative of aria-valuenow for a range widget."
                        },
                        {
                            "name": "innerHTML",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "StyleValue",
                            "default": ""
                        },
                        {
                            "name": "accesskey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "contenteditable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish | \"inherit\" | \"plaintext-only\"",
                            "default": ""
                        },
                        {
                            "name": "contextmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dir",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "\"\" | Booleanish | \"hidden\" | \"until-found\"",
                            "default": ""
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "inert",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "lang",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spellcheck",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "translate",
                            "optional": true,
                            "readonly": false,
                            "type": "\"yes\" | \"no\"",
                            "default": ""
                        },
                        {
                            "name": "radiogroup",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "role",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "about",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "datatype",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "inlist",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "prefix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "property",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "resource",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "typeof",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "vocab",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autocapitalize",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autocorrect",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autosave",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemprop",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemscope",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "itemtype",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemid",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "itemref",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "results",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "security",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "unselectable",
                            "optional": true,
                            "readonly": false,
                            "type": "\"on\" | \"off\"",
                            "default": ""
                        },
                        {
                            "name": "inputmode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"text\" | \"none\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\" | \"search\"",
                            "default": "",
                            "description": "Hints at the type of data that might be entered by the user while editing the element or its contents"
                        },
                        {
                            "name": "is",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specify that a standard HTML element should behave like a defined custom built-in element"
                        },
                        {
                            "name": "autocomplete",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "autofocus",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "cols",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "dirname",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "form",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "maxlength",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "minlength",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "Booleanish",
                            "default": ""
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "Numberish",
                            "default": ""
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "null | string | number | readonly string[]",
                            "default": ""
                        },
                        {
                            "name": "wrap",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "onCopy",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCut",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPaste",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCompositionupdate",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDrag",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragexit",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDragstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDrop",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocusin",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onFocusout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onChange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onBeforeinput",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onInput",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onReset",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSubmit",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onInvalid",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoad",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onError",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeydown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeypress",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onKeyup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAuxclick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onClick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onContextmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDblclick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMousedown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMousemove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMouseup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAbort",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCanplay",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onCanplaythrough",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onDurationchange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEmptied",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEncrypted",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onEnded",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadeddata",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadedmetadata",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onLoadstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPause",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPlay",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPlaying",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onProgress",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onRatechange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSeeked",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSeeking",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onStalled",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSuspend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTimeupdate",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onVolumechange",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onWaiting",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onScrollend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchcancel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchmove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTouchstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerdown",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointermove",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerup",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointercancel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerenter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerleave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerover",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onPointerout",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onWheel",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onAnimationiteration",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTransitionend",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onTransitionstart",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "autoResize",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, height of textarea changes as being typed."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TextareaPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "TextareaHTMLAttributes"
                },
                "TextareaSlots": {
                    "description": "Defines valid slots in Textarea component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TextareaEmitsOptions": {
                    "description": "Defines valid emits in Textarea component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "update:modelValue",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TextareaPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TextareaPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TextareaPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "TextareaContext": {
                    "description": "Defines current options in Textarea component.",
                    "props": []
                },
                "TextareaProps": {
                    "description": "Defines valid properties in Textarea component. In addition to these, all properties of TextareaHTMLAttributes can be used in this component.",
                    "props": []
                },
                "TextareaSlots": {
                    "description": "Defines valid slots in Textarea component.",
                    "props": []
                },
                "TextareaEmitsOptions": {
                    "description": "Defines valid emits in Textarea component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TextareaPassThroughOptionType": {
                    "values": "TextareaPassThroughAttributes | (options: TextareaPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TextareaEmits": {
                    "values": "EmitFn<TextareaEmitsOptions>"
                }
            }
        }
    },
    "textareastyle": {
        "description": "Textarea is a multi-line text input element.\n\n[Live Demo](https://www.primevue.org/textarea/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TextareaStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TextareaStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TextareaClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-textarea\"",
                            "description": "Class name of the root element"
                        }
                    ]
                }
            }
        }
    },
    "tieredmenu": {
        "description": "TieredMenu displays submenus in nested overlays.\n\n[Live Demo](https://www.primevue.org/menu/)",
        "components": {
            "default": {
                "description": "TieredMenu displays submenus in nested overlays.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TieredMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TieredMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TieredMenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "rootList",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "itemContent",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the item content's DOM element."
                        },
                        {
                            "name": "itemLink",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the item link's DOM element."
                        },
                        {
                            "name": "itemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the item icon's DOM element."
                        },
                        {
                            "name": "itemLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the item label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "submenu",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the submenu's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughTransitionType<any>",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "TieredMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TieredMenuFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item index"
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item level"
                        },
                        {
                            "name": "parentKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Parent key info"
                        }
                    ],
                    "methods": []
                },
                "TieredMenuState": {
                    "description": "Defines current inline state in TieredMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedItemInfo",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuFocusedItemInfo",
                            "default": "",
                            "description": "Current focused item info."
                        },
                        {
                            "name": "activeItemPath",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuFocusedItemInfo[]",
                            "default": "",
                            "description": "Active item path."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TieredMenuContext": {
                    "description": "Defines current options in TieredMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TieredMenuRouterBindProps": {
                    "description": "Defines valid router binding props in TieredMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        },
                        {
                            "name": "submenuicon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Submenuicon elemnt binding"
                        }
                    ],
                    "methods": []
                },
                "TieredMenuProps": {
                    "description": "Defines valid properties in TieredMenuMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "popup",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TieredMenuPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TieredMenuSlots": {
                    "description": "Defines valid slots in TieredMenuMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">TieredMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        },
                        {
                            "name": "submenuicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is active</span>\n }",
                                    "description": "submenuicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom submenu icon template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        },
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        }
                    ]
                },
                "TieredMenuEmitsOptions": {
                    "description": "Defines valid emits in TieredMenuMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is hidden."
                        }
                    ]
                },
                "TieredMenuMethods": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "toggle",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "show",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TieredMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TieredMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TieredMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "TieredMenuFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "props": []
                },
                "TieredMenuState": {
                    "description": "Defines current inline state in TieredMenu component.",
                    "props": []
                },
                "TieredMenuContext": {
                    "description": "Defines current options in TieredMenu component.",
                    "props": []
                },
                "TieredMenuRouterBindProps": {
                    "description": "Defines valid router binding props in TieredMenu component.",
                    "props": []
                },
                "TieredMenuProps": {
                    "description": "Defines valid properties in TieredMenuMenu component.",
                    "props": []
                },
                "TieredMenuSlots": {
                    "description": "Defines valid slots in TieredMenuMenu component.",
                    "props": []
                },
                "TieredMenuEmitsOptions": {
                    "description": "Defines valid emits in TieredMenuMenu component.",
                    "props": []
                },
                "TieredMenuMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TieredMenuPassThroughOptionType": {
                    "values": "TieredMenuPassThroughAttributes | (options: TieredMenuPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TieredMenuPassThroughTransitionType": {
                    "values": "TransitionProps | (options: TieredMenuPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "TieredMenuEmits": {
                    "values": "EmitFn<TieredMenuEmitsOptions>"
                }
            }
        }
    },
    "tieredmenustyle": {
        "description": "TieredMenu displays submenus in nested overlays.\n\n[Live Demo](https://www.primevue.org/menu/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TieredMenuStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TieredMenuStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TieredMenuClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "start",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu-start\"",
                            "description": "Class name of the start element"
                        },
                        {
                            "name": "rootList",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu-root-list\"",
                            "description": "Class name of the root list element"
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu-item\"",
                            "description": "Class name of the item element"
                        },
                        {
                            "name": "itemContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu-item-content\"",
                            "description": "Class name of the item content element"
                        },
                        {
                            "name": "itemLink",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu-item-link\"",
                            "description": "Class name of the item link element"
                        },
                        {
                            "name": "itemIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu-item-icon\"",
                            "description": "Class name of the item icon element"
                        },
                        {
                            "name": "itemLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu-item-label\"",
                            "description": "Class name of the item label element"
                        },
                        {
                            "name": "submenuIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu-submenu-icon\"",
                            "description": "Class name of the submenu icon element"
                        },
                        {
                            "name": "submenu",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu-submenu\"",
                            "description": "Class name of the submenu element"
                        },
                        {
                            "name": "separator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu-separator\"",
                            "description": "Class name of the separator element"
                        },
                        {
                            "name": "end",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tieredmenu-end\"",
                            "description": "Class name of the end element"
                        }
                    ]
                }
            }
        }
    },
    "timeline": {
        "description": "Timeline visualizes a series of chained events.\n\n[Live Demo](https://primevue.org/timeline)",
        "components": {
            "default": {
                "description": "Timeline visualizes a series of chained events.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TimelinePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TimelineProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TimelineContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TimelinePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TimelineProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "event",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the event's DOM element."
                        },
                        {
                            "name": "eventOpposite",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the event opposite's DOM element."
                        },
                        {
                            "name": "eventSeparator",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the event separator's DOM element."
                        },
                        {
                            "name": "eventMarker",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the event marker's DOM element."
                        },
                        {
                            "name": "eventConnector",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the event connector's DOM element."
                        },
                        {
                            "name": "eventContent",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the event content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TimelinePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TimelineContext": {
                    "description": "Defines current options in Timeline component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the item as a number."
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total number of items in the timeline."
                        }
                    ],
                    "methods": []
                },
                "TimelineProps": {
                    "description": "Defines valid properties in Timeline component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of events to display."
                        },
                        {
                            "name": "align",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"top\" | \"bottom\" | \"alternate\"",
                            "default": "left",
                            "description": "Position of the timeline bar relative to the content."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the timeline."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TimelinePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TimelineSlots": {
                    "description": "Defines valid slots in Timeline component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of item</span>\n }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template"
                        },
                        {
                            "name": "opposite",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of item</span>\n }",
                                    "description": "opposite slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom opposite template."
                        },
                        {
                            "name": "marker",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of item</span>\n }",
                                    "description": "marker slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom marker template."
                        },
                        {
                            "name": "connector",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of item</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom connector template."
                        }
                    ]
                },
                "TimelineEmitsOptions": {
                    "description": "Defines valid emits in Timeline component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TimelinePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TimelinePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TimelinePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "TimelineContext": {
                    "description": "Defines current options in Timeline component.",
                    "props": []
                },
                "TimelineProps": {
                    "description": "Defines valid properties in Timeline component.",
                    "props": []
                },
                "TimelineSlots": {
                    "description": "Defines valid slots in Timeline component.",
                    "props": []
                },
                "TimelineEmitsOptions": {
                    "description": "Defines valid emits in Timeline component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TimelinePassThroughOptionType": {
                    "values": "TimelinePassThroughAttributes | (options: TimelinePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TimelineEmits": {
                    "values": "EmitFn<TimelineEmitsOptions>"
                }
            }
        }
    },
    "timelinestyle": {
        "description": "Timeline visualizes a series of chained events.\n\n[Live Demo](https://primevue.org/timeline)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TimelineStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TimelineStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TimelineClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-timeline\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "event",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-timeline-event\"",
                            "description": "Class name of the event element"
                        },
                        {
                            "name": "eventOpposite",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-timeline-event-opposite\"",
                            "description": "Class name of the event opposite element"
                        },
                        {
                            "name": "eventSeparator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-timeline-event-separator\"",
                            "description": "Class name of the event separator element"
                        },
                        {
                            "name": "eventMarker",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-timeline-event-marker\"",
                            "description": "Class name of the event marker element"
                        },
                        {
                            "name": "eventConnector",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-timeline-event-connector\"",
                            "description": "Class name of the event connector element"
                        },
                        {
                            "name": "eventContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-timeline-event-content\"",
                            "description": "Class name of the event content element"
                        }
                    ]
                }
            }
        }
    },
    "toast": {
        "description": "Toast is used to display messages in an overlay.\n\n[Live Demo](https://www.primevue.org/toast/)",
        "components": {
            "default": {
                "description": "Toast is used to display messages in an overlay.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToastPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ToastProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ToastState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ToastPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ToastProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the message's DOM element."
                        },
                        {
                            "name": "messageContent",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the message content's DOM element."
                        },
                        {
                            "name": "messageIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the message icon's DOM element."
                        },
                        {
                            "name": "messageText",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the message text's DOM element."
                        },
                        {
                            "name": "summary",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the summary's DOM element."
                        },
                        {
                            "name": "detail",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the detail's DOM element."
                        },
                        {
                            "name": "buttonContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the button container's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the button icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ToastPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ToastMessageOptions": {
                    "description": "Defines message options in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"error\" | \"secondary\" | \"info\" | \"success\" | \"warn\" | \"contrast\"",
                            "default": "info",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "summary",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Summary content of the message."
                        },
                        {
                            "name": "detail",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Detail content of the message."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the message can be closed manually using the close icon."
                        },
                        {
                            "name": "life",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Delay in milliseconds to close the message automatically."
                        },
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Key of the Toast to display the message."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the message."
                        },
                        {
                            "name": "contentStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the content."
                        }
                    ],
                    "methods": []
                },
                "ToastBreakpointsType": {
                    "description": "Defines breakpoints type in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ToastState": {
                    "description": "Defines current inline state in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "messages",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current messages."
                        }
                    ],
                    "methods": []
                },
                "ToastProps": {
                    "description": "Defines valid properties in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of a message group."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                            "default": "top-right",
                            "description": "Position of the toast in viewport."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastBreakpointsType",
                            "default": "",
                            "description": "Object literal to define styles per screen size."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the toast close button."
                        },
                        {
                            "name": "infoIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the toast with info severity."
                        },
                        {
                            "name": "warnIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the toast with warn severity."
                        },
                        {
                            "name": "errorIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the toast with error severity."
                        },
                        {
                            "name": "successIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the toast with success severity."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the close button."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastMessageOptions",
                            "default": "",
                            "description": "Used to access message options."
                        },
                        {
                            "name": "onMouseEnter",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": "",
                            "description": "Used to specify a callback function to be run when the mouseenter event is fired on the message component."
                        },
                        {
                            "name": "onMouseLeave",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": "",
                            "description": "Used to specify a callback function to be run when the mouseleave event is fired on the message component."
                        },
                        {
                            "name": "onClick",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": "",
                            "description": "Used to specify a callback function to be run when the click event is fired on the message component."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ToastPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ToastSlots": {
                    "description": "Defines valid slot in Toast component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "message",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n }",
                                    "description": "message slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message template."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the message icon</span>\n }",
                                    "description": "message icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'messageicon' slot instead.\nCustom message icon template."
                        },
                        {
                            "name": "messageicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon</span>\n }",
                                    "description": "message icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message icon template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the close icon</span>\n }",
                                    "description": "close icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close sidebar function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "ToastEmitsOptions": {
                    "description": "Defines valid emits in Toast component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "close",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessageOptions",
                                    "description": "Toast message."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the toast is closed."
                        },
                        {
                            "name": "life-end",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessageOptions",
                                    "description": "Toast message."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the toast's timeout is over."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ToastPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ToastPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ToastPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ToastMessageOptions": {
                    "description": "Defines message options in Toast component.",
                    "props": []
                },
                "ToastBreakpointsType": {
                    "description": "Defines breakpoints type in Toast component.",
                    "props": []
                },
                "ToastState": {
                    "description": "Defines current inline state in Toast component.",
                    "props": []
                },
                "ToastProps": {
                    "description": "Defines valid properties in Toast component.",
                    "props": []
                },
                "ToastSlots": {
                    "description": "Defines valid slot in Toast component.",
                    "props": []
                },
                "ToastEmitsOptions": {
                    "description": "Defines valid emits in Toast component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToastPassThroughOptionType": {
                    "values": "ToastPassThroughAttributes | (options: ToastPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ToastPassThroughTransitionType": {
                    "values": "TransitionProps | (options: ToastPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "ToastEmits": {
                    "values": "EmitFn<ToastEmitsOptions>"
                }
            }
        }
    },
    "toaststyle": {
        "description": "Toast is used to display messages in an overlay.\n\n[Live Demo](https://www.primevue.org/toast/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToastStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ToastStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ToastClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toast\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "message",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toast-message\"",
                            "description": "Class name of the message element"
                        },
                        {
                            "name": "messageContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toast-message-content\"",
                            "description": "Class name of the message content element"
                        },
                        {
                            "name": "messageIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toast-message-icon\"",
                            "description": "Class name of the message icon element"
                        },
                        {
                            "name": "messageText",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toast-message-text\"",
                            "description": "Class name of the message text element"
                        },
                        {
                            "name": "summary",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toast-summary\"",
                            "description": "Class name of the summary element"
                        },
                        {
                            "name": "detail",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toast-detail\"",
                            "description": "Class name of the detail element"
                        },
                        {
                            "name": "closeButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toast-close-button\"",
                            "description": "Class name of the close button element"
                        },
                        {
                            "name": "closeIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toast-close-icon\"",
                            "description": "Class name of the close icon element"
                        }
                    ]
                }
            }
        }
    },
    "toastservice-usetoast": {
        "description": "[Live Demo](https://www.primevue.org/toast/)",
        "model": {
            "ToastServiceMethods": {
                "description": "Toast Service methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "add",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessageOptions",
                                    "description": "Message instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the message in a suitable Toast component."
                        },
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessageOptions",
                                    "description": "Message instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Clears the message."
                        },
                        {
                            "name": "removeGroup",
                            "parameters": [
                                {
                                    "name": "group",
                                    "optional": false,
                                    "type": "string",
                                    "description": "Name of the message group."
                                }
                            ],
                            "returnType": "void",
                            "description": "Clears the messages that belongs to the group."
                        },
                        {
                            "name": "removeAllGroups",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Clears all the messages."
                        }
                    ]
                }
            }
        }
    },
    "togglebutton": {
        "description": "ToggleButton is used to select a boolean value using a button.\n\n[Live Demo](https://www.primevue.org/togglebutton/)",
        "components": {
            "default": {
                "description": "ToggleButton is used to select a boolean value using a button.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ToggleButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ToggleButtonContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ToggleButtonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonContext": {
                    "description": "Defines current options in ToggleButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current highlighted state as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonProps": {
                    "description": "Defines valid properties in ToggleButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "onIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon for the on state."
                        },
                        {
                            "name": "offIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon for the off state."
                        },
                        {
                            "name": "onLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "yes",
                            "description": "Label for the on state."
                        },
                        {
                            "name": "offLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "no",
                            "description": "Label for the off state."
                        },
                        {
                            "name": "iconPos",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "left",
                            "description": "Position of the icon."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ToggleButtonPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonSlots": {
                    "description": "Defines valid slots in ToggleButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content such as icons, images and text can be placed inside the button via the default slot."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Current value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Icon style class</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        }
                    ]
                },
                "ToggleButtonEmitsOptions": {
                    "description": "Defines valid emits in ToggleButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ToggleButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ToggleButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ToggleButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ToggleButtonContext": {
                    "description": "Defines current options in ToggleButton component.",
                    "props": []
                },
                "ToggleButtonProps": {
                    "description": "Defines valid properties in ToggleButton component.",
                    "props": []
                },
                "ToggleButtonSlots": {
                    "description": "Defines valid slots in ToggleButton component.",
                    "props": []
                },
                "ToggleButtonEmitsOptions": {
                    "description": "Defines valid emits in ToggleButton component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonPassThroughOptionType": {
                    "values": "ToggleButtonPassThroughAttributes | (options: ToggleButtonPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ToggleButtonEmits": {
                    "values": "EmitFn<ToggleButtonEmitsOptions>"
                }
            }
        }
    },
    "togglebuttonstyle": {
        "description": "ToggleButton is used to select a boolean value using a button.\n\n[Live Demo](https://www.primevue.org/togglebutton/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ToggleButtonStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ToggleButtonClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-togglebutton\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-togglebutton-icon\"",
                            "description": "Class name of the icon element"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-togglebutton-label\"",
                            "description": "Class name of the label element"
                        }
                    ]
                }
            }
        }
    },
    "toggleswitch": {
        "description": "ToggleSwitch is used to select a boolean value.\n\n[Live Demo](https://www.primevue.org/toggleswitch/)",
        "components": {
            "default": {
                "description": "ToggleSwitch is used to select a boolean value.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleSwitchPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ToggleSwitchProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ToggleSwitchContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ToggleSwitchPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ToggleSwitchProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleSwitchPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleSwitchPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "slider",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleSwitchPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the slider's DOM element."
                        },
                        {
                            "name": "handle",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleSwitchPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the handle's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ToggleSwitchPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ToggleSwitchProps": {
                    "description": "Defines valid properties in ToggleSwitch component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | boolean",
                            "default": "false",
                            "description": "Specifies whether a toggleswitch should be checked or not."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | boolean",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "true",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "false",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ToggleSwitchPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ToggleSwitchContext": {
                    "description": "Defines current options in ToggleSwitch component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current checked state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ToggleSwitchSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "handle",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current checked state of the item as a boolean.</span>\n }",
                                    "description": "handle slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom handle template."
                        }
                    ]
                },
                "ToggleSwitchEmitsOptions": {
                    "description": "Defines valid emits in ToggleSwitch component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ToggleSwitchPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ToggleSwitchPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ToggleSwitchPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ToggleSwitchProps": {
                    "description": "Defines valid properties in ToggleSwitch component.",
                    "props": []
                },
                "ToggleSwitchContext": {
                    "description": "Defines current options in ToggleSwitch component.",
                    "props": []
                },
                "ToggleSwitchSlots": {
                    "props": []
                },
                "ToggleSwitchEmitsOptions": {
                    "description": "Defines valid emits in ToggleSwitch component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToggleSwitchPassThroughOptionType": {
                    "values": "ToggleSwitchPassThroughAttributes | (options: ToggleSwitchPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ToggleSwitchEmits": {
                    "values": "EmitFn<ToggleSwitchEmitsOptions>"
                }
            }
        }
    },
    "toggleswitchstyle": {
        "description": "ToggleSwitch is used to select a boolean value.\n\n[Live Demo](https://www.primevue.org/toggleswitch/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleSwitchStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ToggleSwitchStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ToggleSwitchClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toggleswitch\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "input",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toggleswitch-input\"",
                            "description": "Class name of the input element"
                        },
                        {
                            "name": "slider",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toggleswitch-slider\"",
                            "description": "Class name of the slider element"
                        },
                        {
                            "name": "handle",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toggleswitch-handle\"",
                            "description": "Class name of the handle element"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toggleswitch-handle\"",
                            "description": "Class name of the icon element"
                        }
                    ]
                }
            }
        }
    },
    "toolbar": {
        "description": "Toolbar is a grouping component for buttons and other content.\n\n[Live Demo](https://www.primevue.org/toolbar/)",
        "components": {
            "default": {
                "description": "Toolbar is a grouping component for buttons and other content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ToolbarProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ToolbarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ToolbarProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the start's DOM element."
                        },
                        {
                            "name": "center",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the center's DOM element."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the right's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ToolbarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ToolbarProps": {
                    "description": "Defines valid properties in Toolbar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ToolbarPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ToolbarSlots": {
                    "description": "Defines valid slots in Toolbar slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "center",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom center template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        }
                    ]
                },
                "ToolbarEmitsOptions": {
                    "description": "Defines valid emits in Toolbar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ToolbarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "ToolbarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "ToolbarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "ToolbarProps": {
                    "description": "Defines valid properties in Toolbar component.",
                    "props": []
                },
                "ToolbarSlots": {
                    "description": "Defines valid slots in Toolbar slots.",
                    "props": []
                },
                "ToolbarEmitsOptions": {
                    "description": "Defines valid emits in Toolbar component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToolbarPassThroughOptionType": {
                    "values": "ToolbarPassThroughAttributes | (options: ToolbarPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ToolbarEmits": {
                    "values": "EmitFn<ToolbarEmitsOptions>"
                }
            }
        }
    },
    "toolbarstyle": {
        "description": "Toolbar is a grouping component for buttons and other content.\n\n[Live Demo](https://www.primevue.org/toolbar/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "ToolbarStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "ToolbarClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toolbar\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "start",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toolbar-start\"",
                            "description": "Class name of the start element"
                        },
                        {
                            "name": "center",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toolbar-center\"",
                            "description": "Class name of the center element"
                        },
                        {
                            "name": "end",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-toolbar-end\"",
                            "description": "Class name of the end element"
                        }
                    ]
                }
            }
        }
    },
    "tooltip": {
        "description": "Tooltip directive provides advisory information for a component.\n\n[Live Demo](https://primevue.org/tooltip)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TooltipPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TooltipContext",
                            "default": ""
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TooltipOptions": {
                    "description": "Defines options of Tooltip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the tooltip."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "When present, it adds a custom id to the tooltip."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "When present, it adds a custom class to the tooltip."
                        },
                        {
                            "name": "escape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "By default the tooltip contents are not rendered as text. Set to false to support html tags in the content."
                        },
                        {
                            "name": "fitContent",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Automatically adjusts the element position when there is not enough space on the selected position."
                        },
                        {
                            "name": "showDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "When present, it adds a custom delay to the tooltip's display."
                        },
                        {
                            "name": "hideDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "When present, it adds a custom delay to the tooltip's hiding."
                        },
                        {
                            "name": "autoHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to hide tooltip when hovering over tooltip content."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TooltipDirectivePassThroughOptions>",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TooltipDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TooltipOptions.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the text's DOM element."
                        },
                        {
                            "name": "arrow",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the arrow's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TooltipDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TooltipContext": {
                    "description": "Defines current options in Tooltip directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "top",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current top position state as a boolean."
                        },
                        {
                            "name": "right",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current right position state as a boolean."
                        },
                        {
                            "name": "bottom",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current bottom position state as a boolean."
                        },
                        {
                            "name": "left",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current left position state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TooltipDirectiveModifiers": {
                    "description": "Defines modifiers of Tooltip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "right",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Right position for Tooltip."
                        },
                        {
                            "name": "left",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Left position for Tooltip."
                        },
                        {
                            "name": "top",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Top position for Tooltip."
                        },
                        {
                            "name": "bottom",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Bottom position for Tooltip."
                        },
                        {
                            "name": "focus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Focus event for Tooltip."
                        }
                    ],
                    "methods": []
                },
                "TooltipDirectiveBinding": {
                    "description": "Binding of Tooltip directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "null | ComponentPublicInstance<Object, Object, Object, Object, Object, Object, Object, Object, false, ComponentOptionsBase<any, any, any, any, any, any, any, any, any, Object, Object, string, Object, Object, Object, string, ComponentProvideOptions>, Object, Object, \"\", Object, any> | Record<string, any>",
                            "default": ""
                        },
                        {
                            "name": "oldValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "arg",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dir",
                            "optional": false,
                            "readonly": false,
                            "type": "ObjectDirective<any, any, string, string>",
                            "default": ""
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | TooltipOptions",
                            "default": "",
                            "description": "Value of the tooltip."
                        },
                        {
                            "name": "modifiers",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipDirectiveModifiers",
                            "default": "",
                            "description": "Modifiers of the tooltip."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TooltipPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TooltipOptions": {
                    "description": "Defines options of Tooltip.",
                    "props": []
                },
                "TooltipDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TooltipDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "TooltipContext": {
                    "description": "Defines current options in Tooltip directive.",
                    "props": []
                },
                "TooltipDirectiveModifiers": {
                    "description": "Defines modifiers of Tooltip.",
                    "props": []
                },
                "TooltipDirectiveBinding": {
                    "description": "Binding of Tooltip directive.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TooltipDirectivePassThroughOptionType": {
                    "values": "TooltipDirectivePassThroughAttributes | (options: TooltipPassThroughMethodOptions) => TooltipDirectivePassThroughAttributes | null | undefined"
                }
            }
        }
    },
    "tooltipstyle": {
        "description": "Tooltip directive provides advisory information for a component.\n\n[Live Demo](https://primevue.org/tooltip)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TooltipStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TooltipStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TooltipClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tooltip\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "arrow",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tooltip-arrow\"",
                            "description": "Class name of the arrow element"
                        },
                        {
                            "name": "text",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tooltip-text\"",
                            "description": "Class name of the text element"
                        }
                    ]
                }
            }
        }
    },
    "tree": {
        "description": "Tree is used to display hierarchical data.\n\n[Live Demo](https://www.primevue.org/tree/)",
        "components": {
            "default": {
                "description": "Tree is used to display hierarchical data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TreeSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "TreeExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeSelectionKeys": {
                    "description": "Custom selection keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "TreeEmitsOptions.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "TreePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TreeProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "pcFilterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the IconField component."
                        },
                        {
                            "name": "pcFilterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "pcFilterIconContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the InputIcon component."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the filter icon's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "rootChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root children's DOM element."
                        },
                        {
                            "name": "node",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the node's DOM element."
                        },
                        {
                            "name": "nodeContent",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the node content's DOM element."
                        },
                        {
                            "name": "nodeToggleButton",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the node toggle button's DOM element."
                        },
                        {
                            "name": "nodeToggleIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the node toggle icon's DOM element."
                        },
                        {
                            "name": "pcNodeCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the checkbox's DOM element."
                        },
                        {
                            "name": "nodeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the node icon's DOM element."
                        },
                        {
                            "name": "nodeLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the node label's DOM element."
                        },
                        {
                            "name": "nodeChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the node children's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TreePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeState": {
                    "description": "Defines current inline state in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_expandedKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeExpandedKeys",
                            "default": "",
                            "description": "Current expanded keys state."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter value state as a string."
                        }
                    ],
                    "methods": []
                },
                "TreeContext": {
                    "description": "Defines current options in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode",
                            "default": "",
                            "description": "Current tree node instance"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the node."
                        },
                        {
                            "name": "expanded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current expanded state of the node as a boolean."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selected state of the node as a boolean."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current checked state of the node as a boolean."
                        },
                        {
                            "name": "partialChecked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current partial checked state of the node as a boolean."
                        },
                        {
                            "name": "leaf",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current leaf state of the node as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TreeProps": {
                    "description": "Defines valid properties in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeExpandedKeys",
                            "default": "",
                            "description": "A map of keys to represent the expansion state in controlled mode."
                        },
                        {
                            "name": "selectionKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectionKeys",
                            "default": "",
                            "description": "A map of keys to control the selection state."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"single\" | \"multiple\" | \"checkbox\"",
                            "default": "",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display loading indicator."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display when tree is loading."
                        },
                        {
                            "name": "loadingMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"mask\" | \"icon\"",
                            "default": "mask",
                            "description": "Loading mode display."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items."
                        },
                        {
                            "name": "filterBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against. A callable taking a TreeNode can be provided instead of a list of field names."
                        },
                        {
                            "name": "filterMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"lenient\" | \"strict\"",
                            "default": "lenient",
                            "description": "Mode for filtering."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "highlightOnSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Highlights automatically the first item."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"flex\">",
                            "default": "",
                            "description": "Height of the scroll viewport in fixed units or the 'flex' keyword for a dynamic size."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TreePassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TreeSlots": {
                    "description": "Defines valid slots in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Expanded state</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "loadingicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "searchicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "searchicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'filtericon' slot instead.\nCustom search icon template."
                        },
                        {
                            "name": "filtericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "filtericon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom search icon template."
                        },
                        {
                            "name": "togglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Expanded state of the node</span>\n }",
                                    "description": "toggleicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'nodetoggleicon' slot instead.\nCustom toggle icon template."
                        },
                        {
                            "name": "nodetogglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Expanded state of the node</span>\n }",
                                    "description": "toggleicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'nodetoggleicon' slot instead.\nCustom node toggle icon template."
                        },
                        {
                            "name": "nodetoggleicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Expanded state of the node</span>\n }",
                                    "description": "toggleicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom node toggle icon template."
                        },
                        {
                            "name": "nodeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "nodeicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom node icon template."
                        },
                        {
                            "name": "checkboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Check state of the node</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">partialChecked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Partial check state of the node</span>\n }",
                                    "description": "checkboxicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom checkbox icon"
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Current value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expandedKeys</span>: <span class=\"doc-option-parameter-type\">TreeExpandedKeys</span>, <span class=\"doc-option-parameter-type\">// Current expanded key</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selectionKeys</span>: <span class=\"doc-option-parameter-type\">TreeSelectionKeys</span>, <span class=\"doc-option-parameter-type\">// Current selected keys</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header"
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Current value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expandedKeys</span>: <span class=\"doc-option-parameter-type\">TreeExpandedKeys</span>, <span class=\"doc-option-parameter-type\">// Current expanded key</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selectionKeys</span>: <span class=\"doc-option-parameter-type\">TreeSelectionKeys</span>, <span class=\"doc-option-parameter-type\">// Current selected keys</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer"
                        }
                    ]
                },
                "TreeEmitsOptions": {
                    "description": "Defines valid emits in Tree component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:expandedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "TreeExpandedKeys",
                                    "description": "New expanded keys."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expanded keys change."
                        },
                        {
                            "name": "update:selectionKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "TreeSelectionKeys",
                                    "description": "New selection keys."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection keys change."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-collapse",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filter input."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TreePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TreeSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "TreeExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "props": []
                },
                "TreeSelectionKeys": {
                    "description": "Custom selection keys metadata.",
                    "props": []
                },
                "TreeFilterEvent": {
                    "description": "Custom filter event.",
                    "props": []
                },
                "TreePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TreePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "TreeState": {
                    "description": "Defines current inline state in Tree component.",
                    "props": []
                },
                "TreeContext": {
                    "description": "Defines current options in Tree component.",
                    "props": []
                },
                "TreeProps": {
                    "description": "Defines valid properties in Tree component.",
                    "props": []
                },
                "TreeSlots": {
                    "description": "Defines valid slots in Tree component.",
                    "props": []
                },
                "TreeEmitsOptions": {
                    "description": "Defines valid emits in Tree component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TreePassThroughOptionType": {
                    "values": "TreePassThroughAttributes | (options: TreePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TreeEmits": {
                    "values": "EmitFn<TreeEmitsOptions>"
                }
            }
        }
    },
    "treestyle": {
        "description": "Tree is used to display hierarchical data.\n\n[Live Demo](https://www.primevue.org/tree/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TreeStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TreeClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "mask",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-mask\"",
                            "description": "Class name of the mask element"
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-loading-icon\"",
                            "description": "Class name of the loading icon element"
                        },
                        {
                            "name": "pcFilterInput",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-filter-input\"",
                            "description": "Class name of the filter input element"
                        },
                        {
                            "name": "wrapper",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-root\"",
                            "description": "Class name of the wrapper element"
                        },
                        {
                            "name": "rootChildren",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-root-children\"",
                            "description": "Class name of the root children element"
                        },
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-node\"",
                            "description": "Class name of the node element"
                        },
                        {
                            "name": "nodeContent",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-node-content\"",
                            "description": "Class name of the node content element"
                        },
                        {
                            "name": "nodeToggleButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-node-toggle-button\"",
                            "description": "Class name of the node toggle button element"
                        },
                        {
                            "name": "nodeToggleIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-node-toggle-icon\"",
                            "description": "Class name of the node toggle icon element"
                        },
                        {
                            "name": "nodeCheckbox",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-node-checkbox\"",
                            "description": "Class name of the node checkbox element"
                        },
                        {
                            "name": "nodeIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-node-icon\"",
                            "description": "Class name of the node icon element"
                        },
                        {
                            "name": "nodeLabel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-node-label\"",
                            "description": "Class name of the node label element"
                        },
                        {
                            "name": "nodeChildren",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-tree-node-children\"",
                            "description": "Class name of the node children element"
                        }
                    ]
                }
            }
        }
    },
    "treenode": {
        "description": "PrimeVue tree components share a common api to specify the node.",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeNode": {
                    "description": "Custom TreeNode metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "key",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Mandatory unique key of the node."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the node."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Data represented by the node."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the node to match a template."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the node to display next to content."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes as children."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the node."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the node."
                        },
                        {
                            "name": "selectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Whether the node is selectable when selection mode is enabled."
                        },
                        {
                            "name": "leaf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if the node has children. Used in lazy loading."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Specifies the node loading. Used in Tree and TreeTable."
                        },
                        {
                            "name": "expandedIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to use in expanded state."
                        },
                        {
                            "name": "collapsedIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to use in collapsed state."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TreeNode": {
                    "description": "Custom TreeNode metadata.",
                    "props": []
                }
            }
        }
    },
    "treeselect": {
        "description": "TreeSelect is a form component to choose from hierarchical data.\n\n[Live Demo](https://www.primevue.org/treeselect/)",
        "components": {
            "default": {
                "description": "TreeSelect is a form component to choose from hierarchical data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TreeSelectProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "labelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label container's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the clear icon's DOM element."
                        },
                        {
                            "name": "chipItem",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the chip's DOM element."
                        },
                        {
                            "name": "pcChip",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Chip."
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown's DOM element."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "treeContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the tree container's DOM element."
                        },
                        {
                            "name": "pcTree",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to Tree component."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "hiddenInputContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden input container's DOM element."
                        },
                        {
                            "name": "hiddenInput",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden input's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeSelectState": {
                    "description": "Defines current inline state in TreeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "null",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeExpandedKeys",
                            "default": "",
                            "description": "Current expanded keys state."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectProps": {
                    "description": "Defines valid properties in TreeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The default value for the input when not controlled by  `modelValue` ."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The name attribute for the element, typically used in form submissions."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "A map of keys to represent the expansion state in controlled mode."
                        },
                        {
                            "name": "showClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in clear button."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "20rem",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"single\" | \"multiple\" | \"checkbox\"",
                            "default": "",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "fluid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "null",
                            "description": "Spans 100% width of the container when enabled."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "\"comma\" | \"chip\"",
                            "default": "comma",
                            "description": "Defines how the selected items are displayed."
                        },
                        {
                            "name": "selectedItemsLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "null",
                            "description": "Label to display after exceeding max selected labels."
                        },
                        {
                            "name": "maxSelectedLabels",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Decides how many selected item labels to show at most."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display loading indicator."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display when tree is loading."
                        },
                        {
                            "name": "loadingMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"mask\" | \"icon\"",
                            "default": "mask",
                            "description": "Loading mode display."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items."
                        },
                        {
                            "name": "filterBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against. A callable taking a TreeNode can be provided instead of a list of field names."
                        },
                        {
                            "name": "filterMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"lenient\" | \"strict\"",
                            "default": "lenient",
                            "description": "Mode for filtering."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No available options",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label to display when there are no selections."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"outlined\" | \"filled\"",
                            "default": "null",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "formControl",
                            "optional": true,
                            "readonly": false,
                            "type": "Record<string, any>",
                            "default": "",
                            "description": "Form control object, typically used for handling validation and form state."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TreeSelectPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectSlots": {
                    "description": "Defines valid slots in TreeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Selected value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">placeholder</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Placeholder</span>\n }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Current node</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Selection state</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Expanded state</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Selected value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// An array of treenodes.</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Selected value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// An array of treenodes.</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "triggericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "dropdownicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. use 'dropdownicon' slot instead.\nCustom indicator template."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "dropdownicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        },
                        {
                            "name": "itemtogglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Expanded state of the node</span>\n }",
                                    "description": "item toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v4.0. Use 'itemtoggleicon' slot instead.\nCustom item toggler icon template."
                        },
                        {
                            "name": "itemtoggleicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Expanded state of the node</span>\n }",
                                    "description": "item toggle icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item toggle icon template."
                        },
                        {
                            "name": "itemcheckboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Check state of the node</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">partialChecked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Partial check state of the node</span>\n }",
                                    "description": "item checkbox icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item checkbox icon template."
                        },
                        {
                            "name": "clearicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">clearCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Clear icon click function.</span>\n}",
                                    "description": "clear icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom clear icon template."
                        }
                    ]
                },
                "TreeSelectEmitsOptions": {
                    "description": "Defines valid emits in TreeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes in uncontrolled mode."
                        },
                        {
                            "name": "update:expandedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "TreeExpandedKeys",
                                    "description": "New expanded keys."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expanded keys change."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string[]",
                                    "description": "Selected node keys"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-collapse",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        }
                    ]
                },
                "TreeSelectMethods": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "show",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "hide",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TreeSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TreeSelectSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "TreeSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TreeSelectPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "TreeSelectState": {
                    "description": "Defines current inline state in TreeSelect component.",
                    "props": []
                },
                "TreeSelectProps": {
                    "description": "Defines valid properties in TreeSelect component.",
                    "props": []
                },
                "TreeSelectSlots": {
                    "description": "Defines valid slots in TreeSelect component.",
                    "props": []
                },
                "TreeSelectEmitsOptions": {
                    "description": "Defines valid emits in TreeSelect component.",
                    "props": []
                },
                "TreeSelectMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TreeSelectPassThroughOptionType": {
                    "values": "TreeSelectPassThroughAttributes | (options: TreeSelectPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TreeSelectPassThroughTransitionType": {
                    "values": "TransitionProps | (options: TreeSelectPassThroughMethodOptions) => TransitionProps | undefined"
                },
                "TreeSelectEmits": {
                    "values": "EmitFn<TreeSelectEmitsOptions>"
                }
            }
        }
    },
    "treeselectstyle": {
        "description": "TreeSelect is a form component to choose from hierarchical data.\n\n[Live Demo](https://www.primevue.org/treeselect/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeSelectStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TreeSelectStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TreeSelectClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treeselect\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "labelContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treeselect-label-container\"",
                            "description": "Class name of the label container element"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treeselect-label\"",
                            "description": "Class name of the label element"
                        },
                        {
                            "name": "clearIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-select-clear-icon\"",
                            "description": "Class name of the clear icon element"
                        },
                        {
                            "name": "chipItem",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treeselect-chip-item\"",
                            "description": "Class name of the chip item element"
                        },
                        {
                            "name": "pcChip",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treeselect-chip\"",
                            "description": "Class name of the chip element"
                        },
                        {
                            "name": "dropdown",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treeselect-dropdown\"",
                            "description": "Class name of the dropdown element"
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treeselect-dropdown-icon\"",
                            "description": "Class name of the dropdown icon element"
                        },
                        {
                            "name": "panel",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treeselect-overlay\"",
                            "description": "Class name of the panel element"
                        },
                        {
                            "name": "treeContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treeselect-tree-container\"",
                            "description": "Class name of the tree container element"
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treeselect-empty-message\"",
                            "description": "Class name of the empty message element"
                        }
                    ]
                }
            }
        }
    },
    "treetable": {
        "description": "TreeTable is used to display hierarchical data in tabular format.\n\n[Live Demo](https://www.primevue.org/treetable/)",
        "components": {
            "default": {
                "description": "TreeTable is used to display hierarchical data in tabular format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeTablePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TreeTableSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "TreeTableFilterMetaData": {
                    "description": "Custom treetable filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filter value"
                        },
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"startsWith\" | \"contains\" | \"notContains\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Filter match mode"
                        }
                    ],
                    "methods": []
                },
                "TreeTableOperatorFilterMetaData": {
                    "description": "Custom operator filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "operator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter operator"
                        },
                        {
                            "name": "constraints",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMetaData[]",
                            "default": "",
                            "description": "Array of filter meta datas."
                        }
                    ],
                    "methods": []
                },
                "TreeTableFilterMeta": {
                    "description": "Custom filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string | TreeTableFilterMetaData | TreeTableOperatorFilterMetaData"
                        }
                    ],
                    "methods": []
                },
                "TreeTableSortEvent": {
                    "description": "Custom sort event.",
                    "relatedProp": "TreeTableEmitsOptions.sort",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"startsWith\" | \"contains\" | \"notContains\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "TreeTablePageEvent,TreeTableFilterEvent"
                },
                "TreeTablePageEvent": {
                    "description": "Custom page event.",
                    "relatedProp": "TreeTableEmitsOptions.sort",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"startsWith\" | \"contains\" | \"notContains\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total page count"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "TreeTableSortEvent"
                },
                "TreeTableFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "TreeTableEmitsOptions.sort",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"startsWith\" | \"contains\" | \"notContains\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "filteredValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filtered collection (non-lazy only)"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "TreeTableSortEvent"
                },
                "TreeTableRowContextMenuEvent": {
                    "description": "Custom row context menu event.",
                    "relatedProp": "TreeTableEmitsOptions['row-contextmenu']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode",
                            "default": "",
                            "description": "Selected row data."
                        }
                    ],
                    "methods": []
                },
                "TreeTableSortMeta": {
                    "description": "Custom sort metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Column field"
                        },
                        {
                            "name": "order",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Column sort order"
                        }
                    ],
                    "methods": []
                },
                "TreeTableExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeTableSelectionKeys": {
                    "description": "Custom selection keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeTablePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TreeTableProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading wrapper's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "pcPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Paginator component."
                        },
                        {
                            "name": "tableContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table container's DOM element."
                        },
                        {
                            "name": "table",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "thead",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thead's DOM element."
                        },
                        {
                            "name": "headerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header row's DOM element."
                        },
                        {
                            "name": "tbody",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the tbody's DOM element."
                        },
                        {
                            "name": "row",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "emptyMessageCell",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message cell's DOM element."
                        },
                        {
                            "name": "tfoot",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the tfoot's DOM element."
                        },
                        {
                            "name": "footerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer row's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "columnResizeIndicator",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column resize indicator's DOM element."
                        },
                        {
                            "name": "column",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the Column helper components."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TreeTablePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeTableState": {
                    "description": "Defines current inline state in TreeTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of first record as a number."
                        },
                        {
                            "name": "d_rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current number of rows to display in new page as a number."
                        },
                        {
                            "name": "d_sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Current sort field."
                        },
                        {
                            "name": "d_sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current order to sort the data by default."
                        },
                        {
                            "name": "d_multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableSortMeta[]",
                            "default": "",
                            "description": "Current sortmeta objects to sort the data."
                        },
                        {
                            "name": "d_groupRowsSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableSortMeta",
                            "default": "",
                            "description": "Current group sortmeta objects to sort the data."
                        },
                        {
                            "name": "d_selectionKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current keys of selected rows."
                        },
                        {
                            "name": "d_expandedRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current keys of rows in expanded state."
                        },
                        {
                            "name": "d_columnOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Current order of the columns."
                        },
                        {
                            "name": "d_editingRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current keys of editing rows."
                        },
                        {
                            "name": "d_editingMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Current editing meta data."
                        },
                        {
                            "name": "d_filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Current filters object."
                        },
                        {
                            "name": "d_editing",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current editing as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TreeTableContext": {
                    "description": "Defines current options in TreeTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "node",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeNode",
                            "default": "",
                            "description": "Current node of the item."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index state of the item."
                        },
                        {
                            "name": "frozen",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current frozen state of the row as a boolean."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selectable state of the row as a boolean."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selected state of the row as a boolean."
                        },
                        {
                            "name": "scrollable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current horizontal and/or vertical scrolling state."
                        },
                        {
                            "name": "showGridlines",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current show gridlines state."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "null | string",
                            "default": "null",
                            "description": "Current size of the table."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current check state of the node as a boolean."
                        },
                        {
                            "name": "partialChecked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current partial check state of the node as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TreeTableProps": {
                    "description": "Defines valid properties in TreeTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "\"key\"",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTableExpandedKeys",
                            "default": "",
                            "description": "A map of keys to represent the state of the tree expansion state in controlled mode."
                        },
                        {
                            "name": "selectionKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTableSelectionKeys",
                            "default": "",
                            "description": "A map of keys to control the selection state."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"single\" | \"multiple\" | \"checkbox\"",
                            "default": "",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "contextMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Enables context menu integration."
                        },
                        {
                            "name": "contextMenuSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row instance with the ContextMenu."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first row to be displayed."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"top\" | \"bottom\" | \"both\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are 'top','bottom' or 'both'."
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. It can be customized using the template property using the predefined keys. Here are the available elements that can be placed inside a paginator in any order.\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state.\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The icon to show while indicating data load is in progress."
                        },
                        {
                            "name": "loadingMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"mask\" | \"icon\"",
                            "default": "mask",
                            "description": "Loading mode display."
                        },
                        {
                            "name": "rowHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, background of the rows change on hover."
                        },
                        {
                            "name": "autoLayout",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the cell widths scale according to their content or not."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or a getter function of a row data used for sorting by default."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "defaultSortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Default sort order of an unsorted column."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "An array of SortMeta objects to sort the data by default in multiple sort mode."
                        },
                        {
                            "name": "sortMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"single\" | \"multiple\"",
                            "default": "single",
                            "description": "Defines whether sorting works on single column or on multiple columns."
                        },
                        {
                            "name": "removableSort",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can have an un-sorted state."
                        },
                        {
                            "name": "filters",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Filters object with key-value pairs to define the filters."
                        },
                        {
                            "name": "filterMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"lenient\" | \"strict\"",
                            "default": "lenient",
                            "description": "Mode for filtering."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "resizableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be resized using drag and drop."
                        },
                        {
                            "name": "columnResizeMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"fit\" | \"expand\"",
                            "default": "fit",
                            "description": "Defines whether the overall table width should change on column resize."
                        },
                        {
                            "name": "indentation",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Indentation factor as rem value for children nodes."
                        },
                        {
                            "name": "showGridlines",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show grid lines between cells."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, enables horizontal and/or vertical scrolling."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"flex\">",
                            "default": "",
                            "description": "Height of the scroll viewport in fixed pixels or the 'flex' keyword for a dynamic size."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the table."
                        },
                        {
                            "name": "tableStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Inline style of the table element."
                        },
                        {
                            "name": "tableClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the table element."
                        },
                        {
                            "name": "tableProps",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Props to pass to the table element."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TreeTablePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TreeTableSlots": {
                    "description": "Defines valid slots in TreeTable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "checkboxicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom checkbox icon template."
                        },
                        {
                            "name": "paginatorcontainer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator container template."
                        },
                        {
                            "name": "paginatorstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator start template."
                        },
                        {
                            "name": "paginatorend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator end template."
                        },
                        {
                            "name": "paginatorfirstpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator first page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator first page link icon template."
                        },
                        {
                            "name": "paginatorprevpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator prev page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator previous page link icon template."
                        },
                        {
                            "name": "paginatornextpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator next page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator next page link icon template."
                        },
                        {
                            "name": "paginatorlastpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator last page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator last page link icon template."
                        },
                        {
                            "name": "paginatorrowsperpagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator rows per page dropdown icon.</span>\n }",
                                    "description": "paginatorrowsperpagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginatorrowsperpagedropdownicon template."
                        },
                        {
                            "name": "paginatorjumptopagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator jump to page dropdown icon.</span>\n }",
                                    "description": "paginatorjumptopagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginatorjumptopagedropdownicon template."
                        }
                    ]
                },
                "TreeTableEmitsOptions": {
                    "description": "Defines valid emits in TreeTable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:expandedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "TreeTableExpandedKeys",
                                    "description": "New expanded keys."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expanded keys change."
                        },
                        {
                            "name": "update:selectionKeys",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableSelectionKeys"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection keys change."
                        },
                        {
                            "name": "update:contextMenuSelection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the contextMenuSelection changes."
                        },
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        },
                        {
                            "name": "update:sortField",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortField changes."
                        },
                        {
                            "name": "update:sortOrder",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortOrder changes."
                        },
                        {
                            "name": "update:multiSortMeta",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | null | TreeTableSortMeta[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the multiSortMeta changes."
                        },
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTablePageEvent",
                                    "description": "Custom page event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on pagination. Sort and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "sort",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableSortEvent",
                                    "description": "Custom sort event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on sort. Page and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Event to emit after filtering, not triggered in lazy mode."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-collapse",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "column-resize-end",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is resized."
                        },
                        {
                            "name": "row-contextmenu",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableRowContextMenuEvent",
                                    "description": "Custom row context menu event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is selected with a ContextMenu."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TreeTablePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "TreeTableSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "props": []
                },
                "TreeTableFilterMetaData": {
                    "description": "Custom treetable filter metadata.",
                    "props": []
                },
                "TreeTableOperatorFilterMetaData": {
                    "description": "Custom operator filter metadata.",
                    "props": []
                },
                "TreeTableFilterMeta": {
                    "description": "Custom filter metadata.",
                    "props": []
                },
                "TreeTableSortEvent": {
                    "description": "Custom sort event.",
                    "props": []
                },
                "TreeTablePageEvent": {
                    "description": "Custom page event.",
                    "props": []
                },
                "TreeTableFilterEvent": {
                    "description": "Custom filter event.",
                    "props": []
                },
                "TreeTableRowContextMenuEvent": {
                    "description": "Custom row context menu event.",
                    "props": []
                },
                "TreeTableSortMeta": {
                    "description": "Custom sort metadata.",
                    "props": []
                },
                "TreeTableExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "props": []
                },
                "TreeTableSelectionKeys": {
                    "description": "Custom selection keys metadata.",
                    "props": []
                },
                "TreeTablePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "TreeTablePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "TreeTableState": {
                    "description": "Defines current inline state in TreeTable component.",
                    "props": []
                },
                "TreeTableContext": {
                    "description": "Defines current options in TreeTable component.",
                    "props": []
                },
                "TreeTableProps": {
                    "description": "Defines valid properties in TreeTable component.",
                    "props": []
                },
                "TreeTableSlots": {
                    "description": "Defines valid slots in TreeTable component.",
                    "props": []
                },
                "TreeTableEmitsOptions": {
                    "description": "Defines valid emits in TreeTable component.",
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TreeTablePassThroughOptionType": {
                    "values": "TreeTablePassThroughAttributes | (options: TreeTablePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TreeTableEmits": {
                    "values": "EmitFn<TreeTableEmitsOptions>"
                }
            }
        }
    },
    "treetablestyle": {
        "description": "TreeTable is used to display hierarchical data in tabular format.\n\n[Live Demo](https://www.primevue.org/treetable/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeTableStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "TreeTableStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "TreeTableClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "loading",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-loading\"",
                            "description": "Class name of the loading element"
                        },
                        {
                            "name": "mask",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-mask\"",
                            "description": "Class name of the mask element"
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-loading-icon\"",
                            "description": "Class name of the loading icon element"
                        },
                        {
                            "name": "header",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-header\"",
                            "description": "Class name of the header element"
                        },
                        {
                            "name": "paginator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-paginator-[position]\"",
                            "description": "Class name of the paginator element"
                        },
                        {
                            "name": "tableContainer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-table-container\"",
                            "description": "Class name of the table container element"
                        },
                        {
                            "name": "table",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-table\"",
                            "description": "Class name of the table element"
                        },
                        {
                            "name": "thead",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-thead\"",
                            "description": "Class name of the thead element"
                        },
                        {
                            "name": "columnResizer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-column-resizer\"",
                            "description": "Class name of the column resizer element"
                        },
                        {
                            "name": "columnTitle",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-column-title\"",
                            "description": "Class name of the column title element"
                        },
                        {
                            "name": "sortIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-sort-icon\"",
                            "description": "Class name of the sort icon element"
                        },
                        {
                            "name": "pcSortBadge",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-sort-badge\"",
                            "description": "Class name of the sort badge element"
                        },
                        {
                            "name": "tbody",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-tbody\"",
                            "description": "Class name of the tbody element"
                        },
                        {
                            "name": "nodeToggleButton",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-node-toggle-button\"",
                            "description": "Class name of the node toggle button element"
                        },
                        {
                            "name": "nodeToggleIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-node-toggle-icon\"",
                            "description": "Class name of the node toggle icon element"
                        },
                        {
                            "name": "pcNodeCheckbox",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-node-checkbox\"",
                            "description": "Class name of the node checkbox element"
                        },
                        {
                            "name": "emptyMessage",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-empty-message\"",
                            "description": "Class name of the empty message element"
                        },
                        {
                            "name": "tfoot",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-tfoot\"",
                            "description": "Class name of the tfoot element"
                        },
                        {
                            "name": "footer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-footer\"",
                            "description": "Class name of the footer element"
                        },
                        {
                            "name": "columnResizeIndicator",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-treetable-column-resize-indicator\"",
                            "description": "Class name of the column resize indicator element"
                        }
                    ]
                }
            }
        }
    },
    "primevue/src/useconfirm/UseConfirm": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "useConfirm": {
                    "name": "useConfirm",
                    "parameters": [],
                    "returnType": "Object"
                }
            }
        }
    },
    "primevue/src/usedialog/UseDialog": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "useDialog": {
                    "name": "useDialog",
                    "parameters": [],
                    "returnType": "Object"
                }
            }
        }
    },
    "primevue/src/usestyle/UseStyle": {},
    "primevue/src/usetoast/UseToast": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "useToast": {
                    "name": "useToast",
                    "parameters": [],
                    "returnType": "default"
                }
            }
        }
    },
    "utils": {
        "description": "Utils module",
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "blockBodyScroll": {
                    "name": "blockBodyScroll",
                    "parameters": [],
                    "returnType": "void"
                },
                "unblockBodyScroll": {
                    "name": "unblockBodyScroll",
                    "parameters": [],
                    "returnType": "void"
                }
            }
        }
    },
    "virtualscroller": {
        "description": "VirtualScroller is a performant approach to handle huge data efficiently.\n\n[Live Demo](https://www.primevue.org/virtualscroller/)",
        "components": {
            "default": {
                "description": "VirtualScroller is a performant approach to handle huge data efficiently.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "VirtualScrollerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "VirtualScrollerScrollIndexChangeEvent": {
                    "description": "Custom scroll index change event.",
                    "relatedProp": "VirtualScrollerEmitsOptions['scroll-index-change']",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "First index of the new data range to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Last index of the new data range to be loaded."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "VirtualScrollerLazyEvent,VirtualScrollerViewport"
                },
                "VirtualScrollerLazyEvent": {
                    "description": "Custom lazy event.",
                    "relatedProp": "VirtualScrollerEmitsOptions['scroll-index-change']",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "First index of the new data range to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Last index of the new data range to be loaded."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "VirtualScrollerScrollIndexChangeEvent"
                },
                "VirtualScrollerViewport": {
                    "description": "Custom virtualscroller viewport metadata.",
                    "relatedProp": "VirtualScrollerEmitsOptions['scroll-index-change']",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "First index of the new data range to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Last index of the new data range to be loaded."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "VirtualScrollerScrollIndexChangeEvent"
                },
                "VirtualScrollerRangeMethod": {
                    "description": "Virtual scroller rendered range.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Whether the item is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Whether the item is last."
                        },
                        {
                            "name": "viewport",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerViewport",
                            "default": "",
                            "description": "Viewport info."
                        }
                    ],
                    "methods": []
                },
                "VirtualScrollerItemOptions": {
                    "description": "Custom item options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Item index"
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Items count"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is last."
                        },
                        {
                            "name": "even",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is even."
                        },
                        {
                            "name": "odd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is odd."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "VirtualScrollerLoaderOptions"
                },
                "VirtualScrollerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "VirtualScrollerProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "loader",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loader's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "spacer",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the spacer's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "VirtualScrollerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "VirtualScrollerState": {
                    "description": "Defines current inline state in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "First index of the new data range to be loaded as a number."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Last index of the new data range to be loaded as a number."
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the first item as a number."
                        },
                        {
                            "name": "numItemsInViewport",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Visible item count in the viewport as a number."
                        },
                        {
                            "name": "lastScrollPos",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Lastest scroll position as a number."
                        },
                        {
                            "name": "d_numToleratedItems",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Additional elements to add to the DOM outside of the view as a number."
                        },
                        {
                            "name": "d_loading",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "false",
                            "description": "Current loading state as a boolean."
                        },
                        {
                            "name": "loaderArr",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Loadable items array."
                        },
                        {
                            "name": "spacerStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The style of spacer element."
                        },
                        {
                            "name": "contentStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The style of content element."
                        }
                    ],
                    "methods": []
                },
                "VirtualScrollerLoaderOptions": {
                    "description": "Custom virtualscroller loader options",
                    "relatedProp": "virtualscroller.VirtualScrollerItemOptions",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Item index"
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Items count"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is last."
                        },
                        {
                            "name": "even",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is even."
                        },
                        {
                            "name": "odd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is odd."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "VirtualScrollerItemOptions"
                },
                "VirtualScrollerProps": {
                    "description": "Defines valid properties in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[] | any[][]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "itemSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number | number[]",
                            "default": "",
                            "description": "The height/width of item according to orientation."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Height of the scroll viewport."
                        },
                        {
                            "name": "scrollWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Width of the scroll viewport."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"horizontal\" | \"vertical\"",
                            "default": "vertical",
                            "description": "The orientation of scrollbar."
                        },
                        {
                            "name": "numToleratedItems",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "half the number of items shown in the view.",
                            "description": "Determines how many additional elements to add to the DOM outside of the view.\nAccording to the scrolls made up and down, extra items are added in a certain algorithm in the form of multiples of this number."
                        },
                        {
                            "name": "delay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay in scroll before new data is loaded."
                        },
                        {
                            "name": "resizeDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "10",
                            "description": "Delay after window's resize finishes."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "If disabled, the VirtualScroller feature is eliminated and the content is displayed directly."
                        },
                        {
                            "name": "loaderDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to implement a custom loader instead of using the loader feature in the VirtualScroller."
                        },
                        {
                            "name": "showLoader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show loader."
                        },
                        {
                            "name": "showSpacer",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Used to implement a custom spacer instead of using the spacer feature in the VirtualScroller."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to load items."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, positions the content as inline."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Used to specify how many items to load in each load method in lazy mode."
                        },
                        {
                            "name": "appendOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to append each loaded item to top without removing any items from the DOM. Using very large data may cause the browser to crash."
                        },
                        {
                            "name": "autoSize",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to dynamically change the height or width of scrollable container."
                        },
                        {
                            "name": "dt",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "It generates scoped CSS variables using design tokens for the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<VirtualScrollerPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": [
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "VirtualScrollerLazyEvent",
                                    "description": "Custom lazy event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke in lazy mode to load new data."
                        }
                    ]
                },
                "VirtualScrollerSlots": {
                    "description": "Defines valid slots in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// An array of objects to display for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">styleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the content</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">contentRef</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">el</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Referance of the content</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">getItemOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Options of the items</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">loading</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the data is loaded.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">getLoaderOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number, <span class=\"doc-option-parameter-name\">ext</span>: any) &rArr; VirtualScrollerLoaderOptions</span>, <span class=\"doc-option-parameter-type\">// Loader options of the items while the data is loading.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">itemSize</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// The height/width of item according to orientation.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">rows</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// The number of the rendered rows.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">columns</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// The number of the rendered columns.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">spacerStyle</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// The style of spacer element.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">contentStyle</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// The style of content element.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">vertical</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the orientation is vertical.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">horizontal</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the orientation is horizontal.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">both</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the orientation is both.</span>\n }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Item options.</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">VirtualScrollerLoaderOptions</span>, <span class=\"doc-option-parameter-type\">// Loader options.</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "loadingicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        }
                    ]
                },
                "VirtualScrollerEmitsOptions": {
                    "description": "Defines valid emits in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:numToleratedItems",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New number tolerated items"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the numToleratedItems changes."
                        },
                        {
                            "name": "scroll",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when scroll position changes."
                        },
                        {
                            "name": "scroll-index-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "VirtualScrollerScrollIndexChangeEvent",
                                    "description": "Custom tab open event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when scroll position and item's range in view changes."
                        },
                        {
                            "name": "lazy-load",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "VirtualScrollerLazyEvent",
                                    "description": "Custom lazy event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke in lazy mode to load new data."
                        }
                    ]
                },
                "VirtualScrollerMethods": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "scrollTo",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": "ScrollToOptions",
                                    "description": "scoll options."
                                }
                            ],
                            "returnType": "void",
                            "description": "Scroll to move to a specific position."
                        },
                        {
                            "name": "scrollToIndex",
                            "parameters": [
                                {
                                    "name": "index",
                                    "optional": false,
                                    "type": "number",
                                    "description": "Index of item according to orientation mode."
                                },
                                {
                                    "name": "behavior",
                                    "optional": true,
                                    "type": "ScrollBehavior",
                                    "description": "Behavior of scroll."
                                }
                            ],
                            "returnType": "void",
                            "description": "Scroll to move to a specific item."
                        },
                        {
                            "name": "scrollInView",
                            "parameters": [
                                {
                                    "name": "index",
                                    "optional": false,
                                    "type": "number",
                                    "description": "Index of item according to orientation mode."
                                },
                                {
                                    "name": "to",
                                    "optional": false,
                                    "type": "\"to-start\" | \"to-end\"",
                                    "description": "Defines the location of the item in view,"
                                },
                                {
                                    "name": "behavior",
                                    "optional": true,
                                    "type": "ScrollBehavior",
                                    "description": "Behavior of scroll"
                                }
                            ],
                            "returnType": "void",
                            "description": "It is used to move the specified index into the view. It is a method that will usually be needed when keyboard support is added to the virtualScroller component."
                        },
                        {
                            "name": "getRenderedRange",
                            "parameters": [],
                            "returnType": "VirtualScrollerRangeMethod",
                            "description": "Returns the range of items added to the DOM."
                        }
                    ]
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "VirtualScrollerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "props": []
                },
                "VirtualScrollerScrollIndexChangeEvent": {
                    "description": "Custom scroll index change event.",
                    "props": []
                },
                "VirtualScrollerLazyEvent": {
                    "description": "Custom lazy event.",
                    "props": []
                },
                "VirtualScrollerViewport": {
                    "description": "Custom virtualscroller viewport metadata.",
                    "props": []
                },
                "VirtualScrollerRangeMethod": {
                    "description": "Virtual scroller rendered range.",
                    "props": []
                },
                "VirtualScrollerItemOptions": {
                    "description": "Custom item options.",
                    "props": []
                },
                "VirtualScrollerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "props": []
                },
                "VirtualScrollerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "props": []
                },
                "VirtualScrollerState": {
                    "description": "Defines current inline state in VirtualScroller component.",
                    "props": []
                },
                "VirtualScrollerLoaderOptions": {
                    "description": "Custom virtualscroller loader options",
                    "props": []
                },
                "VirtualScrollerProps": {
                    "description": "Defines valid properties in VirtualScroller component.",
                    "props": []
                },
                "VirtualScrollerSlots": {
                    "description": "Defines valid slots in VirtualScroller component.",
                    "props": []
                },
                "VirtualScrollerEmitsOptions": {
                    "description": "Defines valid emits in VirtualScroller component.",
                    "props": []
                },
                "VirtualScrollerMethods": {
                    "props": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "VirtualScrollerPassThroughOptionType": {
                    "values": "VirtualScrollerPassThroughAttributes | (options: VirtualScrollerPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "VirtualScrollerEmits": {
                    "values": "EmitFn<VirtualScrollerEmitsOptions>"
                }
            }
        }
    },
    "virtualscrollerstyle": {
        "description": "VirtualScroller is a performant approach to handle huge data efficiently.\n\n[Live Demo](https://www.primevue.org/virtualscroller/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "VirtualScrollerStyle": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [],
                    "extendedTypes": "default"
                }
            }
        },
        "tokens": {
            "description": "Define design tokens used by the component.",
            "values": {
                "VirtualScrollerStyle": {
                    "props": []
                }
            }
        },
        "enumerations": {
            "values": {
                "VirtualScrollerClasses": {
                    "members": [
                        {
                            "name": "root",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-virtualscroller\"",
                            "description": "Class name of the root element"
                        },
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-virtualscroller-content\"",
                            "description": "Class name of the content element"
                        },
                        {
                            "name": "spacer",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-virtualscroller-spacer\"",
                            "description": "Class name of the spacer element"
                        },
                        {
                            "name": "loader",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-virtualscroller-loader\"",
                            "description": "Class name of the loader element"
                        },
                        {
                            "name": "loadingIcon",
                            "optional": false,
                            "readonly": false,
                            "value": "\"p-virtualscroller-loading-icon\"",
                            "description": "Class name of the loading icon element"
                        }
                    ]
                }
            }
        }
    }
}
