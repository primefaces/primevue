{
    "accordion": {
        "description": "Accordion groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "components": {
            "default": {
                "description": "Accordion groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AccordionTabOpenEvent": {
                    "description": "Custom tab open event.",
                    "relatedProp": "AccordionEmits.tab-open",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Opened tab index."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AccordionTabCloseEvent,AccordionClickEvent"
                },
                "AccordionTabCloseEvent": {
                    "description": "Custom tab close event.",
                    "relatedProp": "AccordionEmits.tab-close",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Opened tab index."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "AccordionTabOpenEvent"
                },
                "AccordionClickEvent": {
                    "description": "Custom tab open event.",
                    "relatedProp": "AccordionEmits.tab-open",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Opened tab index."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "AccordionTabOpenEvent"
                },
                "AccordionPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AccordionProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "tab",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to AccordionTab helper components.",
                            "deprecated": "since v3.30.1. Use 'accordiontab' property instead."
                        },
                        {
                            "name": "accordiontab",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to AccordionTab helper components."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "AccordionPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AccordionState": {
                    "description": "Defines current inline state in Accordion component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string"
                        },
                        {
                            "name": "d_activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number | number[]",
                            "default": "",
                            "description": "Current active index state."
                        }
                    ],
                    "methods": []
                },
                "AccordionProps": {
                    "description": "Defines valid properties in Accordion component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, multiple tabs can be activated at the same time."
                        },
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "null | number | number[]",
                            "default": "null",
                            "description": "Index of the active tab or an array of indexes in multiple mode."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css."
                        },
                        {
                            "name": "expandIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of a collapsed tab."
                        },
                        {
                            "name": "collapseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of an expanded tab."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AccordionPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "AccordionSlots": {
                    "description": "Defines valid slots in Accordion slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect AccordionTab components."
                        },
                        {
                            "name": "collapseicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom collapse icon template."
                        },
                        {
                            "name": "expandicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom expand icon template."
                        }
                    ]
                },
                "AccordionEmits": {
                    "description": "Defines valid emits in Accordion component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:activeIndex",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | number",
                                    "description": "Index of new active tab."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the active tab changes."
                        },
                        {
                            "name": "tab-open",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionTabOpenEvent",
                                    "description": "Custom tab open event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded."
                        },
                        {
                            "name": "tab-close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionTabCloseEvent",
                                    "description": "Custom tab close event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header."
                        },
                        {
                            "name": "tab-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AccordionClickEvent",
                                    "description": "Custom tab click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is clicked."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AccordionPassThroughOptionType": {
                    "values": "AccordionPassThroughAttributes | (options: AccordionPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "accordion/style/AccordionStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "accordiontab": {
        "description": "AccordionTab is a helper component for Accordion.\n\n[Live Demo](https://www.primevue.org/accordion/)",
        "components": {
            "default": {
                "description": "AccordionTab is a helper component for Accordion..",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionTabPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionTabProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "AccordionTabContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AccordionTabPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AccordionTabProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerAction",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the headeraction's DOM element."
                        },
                        {
                            "name": "headerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the headericon's DOM element."
                        },
                        {
                            "name": "headerTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the headertitle's DOM element."
                        },
                        {
                            "name": "toggleableContent",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toggleablecontent's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "AccordionTabPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "AccordionTabPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AccordionTabProps": {
                    "description": "Defines valid properties in AccordionTab component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Orientation of tab headers."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab header."
                        },
                        {
                            "name": "headerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab header."
                        },
                        {
                            "name": "headerProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the tab header.",
                            "deprecated": "since v3.26.0. Use 'pt' property instead."
                        },
                        {
                            "name": "headerActionProps",
                            "optional": true,
                            "readonly": false,
                            "type": "AnchorHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLAnchorElement to the focusable anchor element inside the tab header.",
                            "deprecated": "since v3.26.0. Use 'pt' property instead."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab content."
                        },
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab content."
                        },
                        {
                            "name": "contentProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the tab content.",
                            "deprecated": "since v3.26.0. Use 'pt' property instead."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tab is disabled."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AccordionTabPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "AccordionTabContext": {
                    "description": "Defines current options in AccordionTab component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the tab."
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Count of tabs"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is last."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is active."
                        }
                    ],
                    "methods": []
                },
                "AccordionTabSlots": {
                    "description": "Defines valid slots in AcordionTab slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot for content."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for the title section of a AccordionTab is defined using the header template."
                        },
                        {
                            "name": "headericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the tab</span>\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">isTabActive</span>: <span class=\"doc-option-parameter-type line-through\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Whether the tab is active</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Whether the tab is active</span>\n}",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon for the header section of a AccordionTab is defined using the headericon template."
                        }
                    ]
                },
                "AccordionTabEmits": {
                    "description": "Defines valid emits in AcordionTab component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AccordionTabPassThroughOptionType": {
                    "values": "AccordionTabPassThroughAttributes | (options: AccordionTabPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "AccordionTabPassThroughTransitionType": {
                    "values": "TransitionProps | (options: AccordionTabPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "accordiontab/style/AccordionTabStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionTabStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "animateonscroll": {
        "description": "AnimateOnScroll manages PrimeFlex CSS classes declaratively to during enter/leave animations on scroll or on page load.\n\n[Live Demo](https://primevue.org/animateonscroll)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AnimateOnScrollOptions": {
                    "description": "Defines options of AnimateOnScroll.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "enterClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item goes into viewport, use white space as a delimeter to define multiple classes."
                        },
                        {
                            "name": "leaveClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item leaves the viewport, use white space as a delimeter to define multiple classes."
                        },
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "null | Element | Document",
                            "default": "",
                            "description": "Specifies the  `root`  option of the IntersectionObserver API"
                        },
                        {
                            "name": "rootMargin",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specifies the  `rootMargin`  option of the IntersectionObserver API"
                        },
                        {
                            "name": "threshold",
                            "optional": true,
                            "readonly": false,
                            "type": "readonly number[]",
                            "default": "",
                            "description": "Specifies the  `threshold`  option of the IntersectionObserver API"
                        }
                    ],
                    "methods": []
                },
                "AnimateOnScrollDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) directive options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "DirectiveHooks<any, any>",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "AnimateOnScrollDirectiveModifiers": {
                    "description": "Defines modifiers of AnimateOnScroll.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "once",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the scroll event listener should be removed after initial run."
                        }
                    ],
                    "methods": []
                },
                "AnimateOnScrollDirectiveBinding": {
                    "description": "Binding of AnimateOnScroll directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "AnimateOnScrollOptions",
                            "default": "",
                            "description": "Value of the AnimateOnScroll."
                        },
                        {
                            "name": "modifiers",
                            "optional": true,
                            "readonly": false,
                            "type": "AnimateOnScrollDirectiveModifiers",
                            "default": "",
                            "description": "Modifiers of the AnimateOnScroll."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        }
    },
    "animateonscroll/style/AnimateOnScrollStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AnimateOnScrollStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "api/Api": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FilterMatchModeOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "STARTS_WITH",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CONTAINS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "NOT_CONTAINS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ENDS_WITH",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "EQUALS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "NOT_EQUALS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "IN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "LESS_THAN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "LESS_THAN_OR_EQUAL_TO",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "GREATER_THAN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "GREATER_THAN_OR_EQUAL_TO",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BETWEEN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DATE_IS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DATE_IS_NOT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DATE_BEFORE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DATE_AFTER",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "FilterOperatorOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "AND",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "OR",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "PrimeIconsOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ALIGN_CENTER",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ALIGN_JUSTIFY",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ALIGN_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ALIGN_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "AMAZON",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ANDROID",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ANGLE_DOUBLE_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ANGLE_DOUBLE_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ANGLE_DOUBLE_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ANGLE_DOUBLE_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ANGLE_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ANGLE_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ANGLE_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ANGLE_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "APPLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_CIRCLE_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_CIRCLE_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_CIRCLE_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_CIRCLE_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_DOWN_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_DOWN_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_RIGHT_ARROW_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_UP_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_UP_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_H",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_V",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ARROW_A",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "AT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BACKWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BAN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BARS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BELL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BITCOIN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BOLT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BOOK",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BOOKMARK",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BOOKMARK_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BOX",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BRIEFCASE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "BUILDING",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CALENDAR",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CALENDAR_MINUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CALENDAR_PLUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CALENDAR_TIMES",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CALCULATOR",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CAMERA",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CAR",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CARET_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CARET_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CARET_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CARET_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CART_PLUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHART_BAR",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHART_LINE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHART_PIE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHECK",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHECK_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHECK_SQUARE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHEVRON_CIRCLE_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHEVRON_CIRCLE_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHEVRON_CIRCLE_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHEVRON_CIRCLE_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHEVRON_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHEVRON_LEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHEVRON_RIGHT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CHEVRON_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CIRCLE_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CLOCK",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CLONE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CLOUD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CLOUD_DOWNLOAD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CLOUD_UPLOAD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CODE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "COG",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "COMMENT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "COMMENTS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "COMPASS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "COPY",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "CREDIT_CARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DATABASE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DELETELEFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DESKTOP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DIRECTIONS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DIRECTIONS_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DISCORD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DOLLAR",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "DOWNLOAD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "EJECT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ELLIPSIS_H",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ELLIPSIS_V",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ENVELOPE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ERASER",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "EURO",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "EXCLAMATION_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "EXCLAMATION_TRIANGLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "EXTERNAL_LINK",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "EYE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "EYE_SLASH",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FACEBOOK",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FAST_BACKWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FAST_FORWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FILE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FILE_EDIT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FILE_EXCEL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FILE_EXPORT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FILE_IMPORT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FILE_PDF",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FILE_WORD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FILTER",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FILTER_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FILTER_SLASH",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FLAG",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FLAG_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FOLDER",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FOLDER_OPEN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "FORWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "GIFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "GITHUB",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "GLOBE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "GOOGLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "HASHTAG",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "HEART",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "HEART_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "HISTORY",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "HOURGLASS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "HOME",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ID_CARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "IMAGE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "IMAGES",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "INBOX",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "INFO",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "INFO_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "INSTAGRAM",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "KEY",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "LANGUAGE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "LINK",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "LINKEDIN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "LIST",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "LOCK",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "LOCK_OPEN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "MAP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "MAP_MARKER",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "MEGAPHONE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "MICREPHONE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "MICROSOFT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "MINUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "MINUS_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "MOBILE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "MONEY_BILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "MOON",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PALETTE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PAPERCLIP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PAUSE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PAYPAL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PENCIL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PERCENTAGE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PHONE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PLAY",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PLUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PLUS_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "POUND",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "POWER_OFF",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PRIME",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "PRINT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "QRCODE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "QUESTION",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "QUESTION_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "REDDIT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "REFRESH",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "REPLAY",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "REPLY",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SAVE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SEARCH",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SEARCH_MINUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SEARCH_PLUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SEND",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SERVER",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SHARE_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SHIELD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SHOPPING_BAG",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SHOPPING_CART",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SIGN_IN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SIGN_OUT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SITEMAP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SLACK",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SLIDERS_H",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SLIDERS_V",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_ALPHA_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_ALPHA_ALT_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_ALPHA_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_ALPHA_ALT_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_ALT_SLASH",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_AMOUNT_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_AMOUNT_DOWN_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_AMOUNT_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_AMOUNT_UP_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_NUMERIC_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_NUMERIC_ALT_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_NUMERIC_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_NUMERIC_ALT_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SORT_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SPINNER",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "STAR",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "STAR_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "STEP_BACKWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "STEP_BACKWARD_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "STEP_FORWARD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "STEP_FORWARD_ALT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "STOP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "STOPWATCH",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "STOP_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SUN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "SYNC",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TABLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TABLET",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TAG",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TAGS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TELEGRAM",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TH_LARGE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "THUMBS_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "THUMBS_DOWN_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "THUMBS_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "THUMBS_UP_FILL",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TICKET",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TIMES",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TIMES_CIRCLE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TRASH",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TRUCK",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "TWITTER",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "UNDO",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "UNLOCK",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "UPLOAD",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "USER",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "USER_EDIT",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "USER_MINUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "USER_PLUS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "USERS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "VERIFIED",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "VIDEO",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "VIMEO",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "VOLUME_DOWN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "VOLUME_OFF",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "VOLUME_UP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "WALLET",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "WHATSAPP",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "WIFI",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "WINDOW_MAXIMIZE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "WINDOW_MINIMIZE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "WRENCH",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "YOUTUBE",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "ToastSeverityOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "SUCCESS",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "INFO",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "WARN",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "ERROR",
                            "optional": false,
                            "readonly": true,
                            "type": "string",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "autocomplete": {
        "description": "AutoComplete is an input component that provides real-time suggestions while being typed.\n\n[Live Demo](https://www.primevue.org/autocomplete/)",
        "components": {
            "default": {
                "description": "AutoComplete is an input component that provides real-time suggestions while being typed.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AutoCompletePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "AutoCompleteState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "AutoCompleteEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteItemSelectEvent": {
                    "description": "Custom item select event.",
                    "relatedProp": "AutoCompleteEmits['item-select']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected item"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AutoCompleteItemUnselectEvent"
                },
                "AutoCompleteItemUnselectEvent": {
                    "description": "Custom item unselect event.",
                    "relatedProp": "AutoCompleteEmits['item-unselect']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected item"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "AutoCompleteItemSelectEvent"
                },
                "AutoCompleteDropdownClickEvent": {
                    "description": "Custom dropdown click event.",
                    "relatedProp": "AutoCompleteEmits['dropdown-click']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event"
                        },
                        {
                            "name": "query",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current value of the input field"
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteCompleteEvent": {
                    "description": "Custom complete event.",
                    "relatedProp": "AutoCompleteEmits.complete",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "query",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value to search with"
                        }
                    ],
                    "methods": []
                },
                "AutoCompletePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AutoCompleteProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "token",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the token's DOM element."
                        },
                        {
                            "name": "tokenLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the token label's DOM element."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the remove token icon's DOM element."
                        },
                        {
                            "name": "inputToken",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input token's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "dropdownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<AutoCompleteSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "itemGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item group's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "searchResultMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the search result message's DOM element."
                        },
                        {
                            "name": "selectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the selected message's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "AutoCompletePassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "AutoCompletePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteState": {
                    "description": "Defines current inline state in AutoComplete component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current focused item index as a number."
                        },
                        {
                            "name": "focusedMultipleOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current focused item index as a number."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "searching",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current search state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteContext": {
                    "description": "Defines current options in AutoComplete component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selection state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteProps": {
                    "description": "Defines valid properties in AutoComplete component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "suggestions",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of suggestions to display."
                        },
                        {
                            "name": "field",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "",
                            "deprecated": "since v3.16.0. Use 'optionLabel' property instead.\nProperty name or getter function of a suggested object to resolve and display."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Maximum height of the suggestions panel."
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a button next to the input field when enabled."
                        },
                        {
                            "name": "dropdownMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"blank\" | \"current\"",
                            "default": "blank",
                            "description": "Specifies the behavior dropdown button. Default 'blank' mode sends an empty string and 'current' mode sends the input value."
                        },
                        {
                            "name": "autoHighlight",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "",
                            "deprecated": "since v3.16.0\nHighlights automatically the first item of the dropdown to be selected."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if multiple values can be selected."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the autocomplete is in loading state."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "minLength",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Minimum number of characters to initiate a search."
                        },
                        {
                            "name": "delay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Delay between keystrokes to wait before sending a query."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached.\nSpecial keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "forceSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions."
                        },
                        {
                            "name": "completeOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to run a query when input receives focus."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dropdown.",
                            "deprecated": "since v3.27.0. Use 'dropdownicon' slot."
                        },
                        {
                            "name": "dropdownClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the dropdown button."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in loading state.",
                            "deprecated": "since v3.27.0. Use 'loadingicon' slot."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in chip remove action.",
                            "deprecated": "since v3.27.0. Use 'removetokenicon' slot."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "searchLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in searching. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "searchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySearchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AutoCompletePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "AutoCompleteSlots": {
                    "description": "Defines valid slots in AutoComplete component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "chip",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// A value in the selection</span>\n }",
                                    "description": "chip slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">suggestions</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template of panel."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">suggestions</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template of panel."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "",
                            "deprecated": "since v3.16.0\nCustom content for each item."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// undefined</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option group slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option group template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// An array of objects to display for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">styleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">contentRef</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">el</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Referance of the content</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">getItemOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Options of the items</span>\n}",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template when there is no data to display."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom dropdown icon template."
                        },
                        {
                            "name": "removetokenicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the token.</span>\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClick</span>: <span class=\"doc-option-parameter-type line-through\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Remove token icon function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Remove token icon function.</span>\n}"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom remove token icon template in multiple mode."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        }
                    ]
                },
                "AutoCompleteEmits": {
                    "description": "Defines valid emits in AutoComplete component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "item-select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteItemSelectEvent",
                                    "description": "Custom item select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "item-unselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteItemUnselectEvent",
                                    "description": "Custom item unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a selected value is removed."
                        },
                        {
                            "name": "dropdown-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteDropdownClickEvent",
                                    "description": "Custom dropdown click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to when dropdown button is clicked."
                        },
                        {
                            "name": "clear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when input is cleared by the user."
                        },
                        {
                            "name": "complete",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "AutoCompleteCompleteEvent",
                                    "description": "Custom complete event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to search for suggestions."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AutoCompletePassThroughOptionType": {
                    "values": "AutoCompletePassThroughAttributes | (options: AutoCompletePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "AutoCompletePassThroughTransitionType": {
                    "values": "TransitionProps | (options: AutoCompletePassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "autocomplete/style/AutoCompleteStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AutoCompleteStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "avatar": {
        "description": "Avatar represents people using icons, labels and images.\n\n- [Live Demo](https://primevue.org/avatar)",
        "components": {
            "default": {
                "description": "Avatar represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AvatarProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AvatarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AvatarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AvatarProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the image's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "AvatarProps": {
                    "description": "Defines valid properties in Avatar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the text to display."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the icon to display.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the image to display."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"normal\" | \"large\" | \"xlarge\"",
                            "default": "normal",
                            "description": "Size of the element."
                        },
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"square\" | \"circle\"",
                            "default": "square",
                            "description": "Shape of the element."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AvatarPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "AvatarSlots": {
                    "description": "Defines valid slots in Avatar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Content can easily be customized with the default slot instead of using the built-in modes."
                        },
                        {
                            "name": "icon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        }
                    ]
                },
                "AvatarEmits": {
                    "description": "Defines valid emits in Avatar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "error",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Triggered when an error occurs while loading an image file."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AvatarPassThroughOptionType": {
                    "values": "AvatarPassThroughAttributes | (options: AvatarPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "avatar/style/AvatarStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "avatargroup": {
        "description": "A set of Avatars can be displayed together using the AvatarGroup component.\n\n[Live Demo](https://www.primevue.org/avatar/)",
        "components": {
            "default": {
                "description": "A set of Avatars can be displayed together using the AvatarGroup component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "AvatarGroupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "AvatarGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "AvatarGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "AvatarGroupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "AvatarGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "AvatarGroupProps": {
                    "description": "Defines valid properties in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<AvatarGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "AvatarGroupSlots": {
                    "description": "Defines valid slots in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect Avatar components."
                        }
                    ]
                },
                "AvatarGroupEmits": {
                    "description": "Defines valid emits in AvatarGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupPassThroughOptionType": {
                    "values": "AvatarGroupPassThroughAttributes | (options: AvatarGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "avatargroup/style/AvatarGroupStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AvatarGroupStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "badge": {
        "description": "Badge represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/badge)",
        "components": {
            "default": {
                "description": "Badge represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "BadgeProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        }
                    ],
                    "methods": []
                },
                "BadgePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "BadgePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "BadgeProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "BadgeProps": {
                    "description": "Defines valid properties in Badge component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Value to display inside the badge."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HintedString<\"success\" | \"secondary\" | \"info\" | \"warning\" | \"danger\" | \"contrast\">",
                            "default": "",
                            "description": "Severity type of the badge."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "null | \"large\" | \"xlarge\"",
                            "default": "",
                            "description": "Size of the badge, valid options are 'large' and 'xlarge'."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<BadgePassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "BadgeSlots": {
                    "description": "Defines valid slots in Badge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Content can easily be customized with the default slot instead of using the built-in display."
                        }
                    ]
                },
                "BadgeEmits": {
                    "description": "Defines valid emits in Badge component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BadgePassThroughOptionType": {
                    "values": "BadgePassThroughAttributes | (options: BadgePassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "badge/style/BadgeStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgeStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "badgedirective": {
        "description": "Badge directive is a small status indicator for another element.\n\n[Live Demo](https://primevue.org/badge)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "BadgeContext",
                            "default": ""
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "BadgeDirectiveOptions": {
                    "description": "Defines options of Badge.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<BadgeDirectivePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "BadgeDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "BadgeDirectiveOptions.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgeDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "DirectiveHooks<any, any>",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "BadgeDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "BadgeContext": {
                    "description": "Defines current options in Badge directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "info",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Current info state as a boolean."
                        },
                        {
                            "name": "success",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current success state as a boolean."
                        },
                        {
                            "name": "warning",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current warning state as a boolean."
                        },
                        {
                            "name": "danger",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current danger state as a boolean."
                        },
                        {
                            "name": "nogutter",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current gutter state as a boolean."
                        },
                        {
                            "name": "dot",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current dot state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "BadgeDirectiveModifiers": {
                    "description": "Defines modifiers of Badge directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "info",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Info severity for Badge directive."
                        },
                        {
                            "name": "success",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Success severity for Badge directive."
                        },
                        {
                            "name": "warning",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Warning severity for Badge directive."
                        },
                        {
                            "name": "danger",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Danger severity for Badge directive."
                        }
                    ],
                    "methods": []
                },
                "BadgeDirectiveBinding": {
                    "description": "Binding of Badge directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | BadgeDirectiveOptions",
                            "default": "",
                            "description": "Value of the Badge."
                        },
                        {
                            "name": "modifiers",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgeDirectiveModifiers",
                            "default": "",
                            "description": "Modifiers of the Badge."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BadgeDirectivePassThroughOptionType": {
                    "values": "BadgeDirectivePassThroughAttributes | (options: BadgePassThroughMethodOptions) => BadgeDirectivePassThroughAttributes | null | undefined"
                }
            }
        }
    },
    "badgedirective/style/BadgeDirectiveStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BadgeDirectiveStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "base/style/BaseStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BaseStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedBy": "AccordionStyle,AccordionTabStyle,AnimateOnScrollStyle,AutoCompleteStyle,AvatarStyle,AvatarGroupStyle,BadgeStyle,BadgeDirectiveStyle,BaseComponentStyle,BaseIconStyle,BlockUIStyle,BreadcrumbStyle,ButtonStyle,ButtonGroupStyle,CalendarStyle,CardStyle,CarouselStyle,CascadeSelectStyle,ChartStyle,CheckboxStyle,ChipStyle,ChipsStyle,ColorPickerStyle,ColumnStyle,ColumnGroupStyle,ConfirmDialogStyle,ConfirmPopupStyle,ContextMenuStyle,DataTableStyle,DataViewStyle,DataViewLayoutOptionsStyle,DeferredContentStyle,DialogStyle,DividerStyle,DockStyle,DropdownStyle,DynamicDialogStyle,EditorStyle,FieldsetStyle,FileUploadStyle,FloatLabelStyle,FocusTrapStyle,GalleriaStyle,IconFieldStyle,ImageStyle,InlineMessageStyle,InplaceStyle,InputGroupStyle,InputGroupAddonStyle,InputIconStyle,InputMaskStyle,InputNumberStyle,InputOtpStyle,InputSwitchStyle,InputTextStyle,KnobStyle,ListboxStyle,MegaMenuStyle,MenuStyle,MenubarStyle,MessageStyle,MeterGroupStyle,MultiSelectStyle,OrderListStyle,OrganizationChartStyle,OverlayPanelStyle,PaginatorStyle,PanelStyle,PanelMenuStyle,PasswordStyle,PickListStyle,PortalStyle,ProgressBarStyle,ProgressSpinnerStyle,RadioButtonStyle,RatingStyle,AccordionStyle,RowStyle,ScrollPanelStyle,ScrollTopStyle,SelectButtonStyle,SidebarStyle,SkeletonStyle,SliderStyle,SpeedDialStyle,SplitButtonStyle,SplitterStyle,SplitterPanelStyle,StepperStyle,StepperPanelStyle,StepsStyle,StyleClassStyle,TabMenuStyle,TabPanelStyle,TabViewStyle,TagStyle,TerminalStyle,TextareaStyle,TieredMenuStyle,TimelineStyle,ToastStyle,ToggleButtonStyle,ToolbarStyle,TooltipStyle,TreeStyle,TreeSelectStyle,TreeTableStyle,TriStateCheckboxStyle,VirtualScrollerStyle"
                }
            }
        }
    },
    "basecomponent/BaseComponent": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ComponentHooks": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "onBeforeCreate",
                            "parameters": [],
                            "returnType": "void"
                        },
                        {
                            "name": "onCreated",
                            "parameters": [],
                            "returnType": "void"
                        },
                        {
                            "name": "onBeforeMount",
                            "parameters": [],
                            "returnType": "void"
                        },
                        {
                            "name": "onMounted",
                            "parameters": [],
                            "returnType": "void"
                        },
                        {
                            "name": "onBeforeUpdate",
                            "parameters": [],
                            "returnType": "void"
                        },
                        {
                            "name": "onUpdated",
                            "parameters": [],
                            "returnType": "void"
                        },
                        {
                            "name": "onBeforeUnmount",
                            "parameters": [],
                            "returnType": "void"
                        },
                        {
                            "name": "onUnmounted",
                            "parameters": [],
                            "returnType": "void"
                        }
                    ]
                },
                "BaseComponentPassThroughOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "BaseComponentPassThroughMethodOptions": {
                    "description": "",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": true,
                            "readonly": false,
                            "type": "null | I",
                            "default": ""
                        },
                        {
                            "name": "props",
                            "optional": true,
                            "readonly": false,
                            "type": "null | P",
                            "default": ""
                        },
                        {
                            "name": "state",
                            "optional": true,
                            "readonly": false,
                            "type": "null | S",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "basecomponent/style/BaseComponentStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BaseComponentStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "basedirective/BaseDirective": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DirectiveInstance": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "$name",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string",
                            "default": ""
                        },
                        {
                            "name": "$host",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": ""
                        },
                        {
                            "name": "$binding",
                            "optional": false,
                            "readonly": false,
                            "type": "DirectiveBinding<V>",
                            "default": ""
                        },
                        {
                            "name": "$el",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HTMLElement",
                            "default": ""
                        },
                        {
                            "name": "$css",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "default": ""
                        },
                        {
                            "name": "defaultPT",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "isUnstyled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DirectiveOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "el",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": ""
                        },
                        {
                            "name": "binding",
                            "optional": false,
                            "readonly": false,
                            "type": "DirectiveBinding<V>",
                            "default": ""
                        },
                        {
                            "name": "vnode",
                            "optional": false,
                            "readonly": false,
                            "type": "VNode<any, T, Object>",
                            "default": ""
                        },
                        {
                            "name": "prevVNode",
                            "optional": false,
                            "readonly": false,
                            "type": "Prev",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "DirectiveHooks": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "onCreated",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onBeforeMount",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onMounted",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onBeforeUpdate",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onUpdated",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onBeforeUnmount",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onUnmounted",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "BaseDirectivePassThroughOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "DirectiveHooks<any, any>",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "baseicon/style/BaseIconStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BaseIconStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "blockui": {
        "description": "BlockUI represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/blockui)",
        "components": {
            "default": {
                "description": "BlockUI represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BlockUIPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "BlockUIProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "BlockUIState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "BlockUIPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "BlockUIProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BlockUIPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "BlockUIPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "BlockUIPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "BlockUIState": {
                    "description": "Defines current inline state in BlockUI component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "isBlocked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current blocked state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "BlockUIProps": {
                    "description": "Defines valid properties in BlockUI component",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "blocked",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Controls the blocked state."
                        },
                        {
                            "name": "fullScreen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the whole document gets blocked."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<BlockUIPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "BlockUISlots": {
                    "description": "Defines valid slots in BlockUI component",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content's slot."
                        }
                    ]
                },
                "BlockUIEmits": {
                    "description": "Defines valid emits in BlockUI component",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "block",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the element gets blocked."
                        },
                        {
                            "name": "unblock",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the element gets unblocked."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BlockUIPassThroughOptionType": {
                    "values": "BlockUIPassThroughAttributes | (options: BlockUIPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "blockui/style/BlockUIStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BlockUIStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "breadcrumb": {
        "description": "Breadcrumb provides contextual information about page hierarchy.\n\n[Live Demo](https://www.primevue.org/breadcrumb/)",
        "components": {
            "default": {
                "description": "Breadcrumb provides contextual information about page hierarchy.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BreadcrumbPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "BreadcrumbProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "BreadcrumbContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "BreadcrumbProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "separatorIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "BreadcrumbPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbContext": {
                    "description": "Defines current options in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem"
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbRouterBindProps": {
                    "description": "Defines valid router binding props in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbProps": {
                    "description": "Defines valid properties in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "home",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem",
                            "default": "",
                            "description": "Configuration for the home icon."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path.",
                            "deprecated": "since v3.40.0."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<BreadcrumbPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "BreadcrumbSlots": {
                    "description": "Defines valid slots in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">BreadcrumbRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "separator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom separator template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        }
                    ]
                },
                "BreadcrumbEmits": {
                    "description": "Defines valid emits in Breadcrumb component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "BreadcrumbPassThroughOptionType": {
                    "values": "BreadcrumbPassThroughAttributes | (options: BreadcrumbPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "breadcrumb/style/BreadcrumbStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "BreadcrumbStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "button": {
        "description": "Button is an extension to standard button element with icons and theming.\n\n[Live Demo](https://www.primevue.org/button/)",
        "components": {
            "default": {
                "description": "Button is an extension to standard button element with icons and theming.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ButtonContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ButtonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the badge's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ButtonProps": {
                    "description": "Defines valid properties in Button component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the button."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the button."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the button."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the icon."
                        },
                        {
                            "name": "iconPos",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "left",
                            "description": "Position of the icon."
                        },
                        {
                            "name": "iconClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the icon."
                        },
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the badge."
                        },
                        {
                            "name": "badgeClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the badge."
                        },
                        {
                            "name": "badgeSeverity",
                            "optional": true,
                            "readonly": false,
                            "type": "null | HintedString<\"success\" | \"secondary\" | \"info\" | \"warning\" | \"danger\" | \"contrast\">",
                            "default": "",
                            "description": "Severity type of the badge."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the button is in loading state."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in loading state."
                        },
                        {
                            "name": "link",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a link style to the button."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"success\" | \"help\" | \"secondary\" | \"info\" | \"warning\" | \"danger\" | \"contrast\">",
                            "default": "",
                            "description": "Defines the style of the button."
                        },
                        {
                            "name": "raised",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a shadow to indicate elevation."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a circular border radius to the button."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a textual class to the button without a background initially."
                        },
                        {
                            "name": "outlined",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a border class without a background initially."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the button."
                        },
                        {
                            "name": "plain",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a plain textual class to the button without a background initially."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ButtonPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "ButtonHTMLAttributes"
                },
                "ButtonContext": {
                    "description": "Defines current options in Button component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the element as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ButtonSlots": {
                    "description": "Defines valid slots in Button component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content such as icons, images and text can be placed inside the button via the default slot. Note that when slot is used, label, icon and badge properties are not included."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "loading icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        }
                    ]
                },
                "ButtonEmits": {
                    "description": "Defines valid emits in Button component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ButtonPassThroughOptionType": {
                    "values": "ButtonPassThroughAttributes | (options: ButtonPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "button/style/ButtonStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "buttongroup": {
        "description": "A set of Buttons can be displayed together using the ButtonGroup component.\n\n[Live Demo](https://www.primevue.org/button/)",
        "components": {
            "default": {
                "description": "A set of Buttons can be displayed together using the ButtonGroup component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ButtonGroupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ButtonGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ButtonGroupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ButtonGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ButtonGroupProps": {
                    "description": "Defines valid properties in ButtonGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ButtonGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ButtonGroupSlots": {
                    "description": "Defines valid slots in ButtonGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect Button components."
                        }
                    ]
                },
                "ButtonGroupEmits": {
                    "description": "Defines valid emits in ButtonGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupPassThroughOptionType": {
                    "values": "ButtonGroupPassThroughAttributes | (options: ButtonGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "buttongroup/style/ButtonGroupStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ButtonGroupStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "calendar": {
        "description": "Calendar also known as DatePicker, is a form component to work with dates.\n\n[Live Demo](https://www.primevue.org/calendar/)",
        "components": {
            "default": {
                "description": "Calendar also known as DatePicker, is a form component to work with dates.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CalendarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "CalendarSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "CalendarResponsiveOptions": {
                    "description": "Custom Calendar responsive options metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Breakpoint for responsive mode. Exp; @media screen and (max-width: ${breakpoint}) {...}"
                        },
                        {
                            "name": "numMonths",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of visible months on breakpoint."
                        }
                    ],
                    "methods": []
                },
                "CalendarMonthChangeEvent": {
                    "description": "Custom Calendar month change event.",
                    "relatedProp": "CalendarEmits['month-change']]",
                    "props": [
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New month."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New year."
                        }
                    ],
                    "methods": []
                },
                "CalendarYearChangeEvent": {
                    "description": "Custom Calendar year change event.",
                    "relatedProp": "CalendarEmits['year-change']]",
                    "props": [
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New month."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New year."
                        }
                    ],
                    "methods": []
                },
                "CalendarBlurEvent": {
                    "description": "Custom Calendar blur event.",
                    "relatedProp": "CalendarEmits.blur",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Input value"
                        }
                    ],
                    "methods": []
                },
                "CalendarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "CalendarProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "dropdownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<CalendarSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "groupContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the group container's DOM element."
                        },
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the group's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "previousButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<CalendarSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "monthTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the month title's DOM element."
                        },
                        {
                            "name": "yearTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the year title's DOM element."
                        },
                        {
                            "name": "decadeTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the decade title's DOM element."
                        },
                        {
                            "name": "nextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<CalendarSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "table",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "tableHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table header's DOM element."
                        },
                        {
                            "name": "tableHeaderRow",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table header row's DOM element."
                        },
                        {
                            "name": "weekHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week header's DOM element."
                        },
                        {
                            "name": "weekHeaderLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week header label's DOM element."
                        },
                        {
                            "name": "tableHeaderCell",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table header cell's DOM element."
                        },
                        {
                            "name": "weekLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week label's DOM element."
                        },
                        {
                            "name": "weekDay",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week day's DOM element."
                        },
                        {
                            "name": "tableBody",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table body's DOM element."
                        },
                        {
                            "name": "tableBodyRow",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table body row's DOM element."
                        },
                        {
                            "name": "weekNumber",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week number's DOM element."
                        },
                        {
                            "name": "weekLabelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the week label container's DOM element."
                        },
                        {
                            "name": "day",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the day's DOM element."
                        },
                        {
                            "name": "dayLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the day label's DOM element."
                        },
                        {
                            "name": "monthPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the month picker's DOM element."
                        },
                        {
                            "name": "month",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the month's DOM element."
                        },
                        {
                            "name": "yearPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the year picker's DOM element."
                        },
                        {
                            "name": "year",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the year's DOM element."
                        },
                        {
                            "name": "timePicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the time picker's DOM element."
                        },
                        {
                            "name": "hourPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hour picker's DOM element."
                        },
                        {
                            "name": "hour",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hour's DOM element."
                        },
                        {
                            "name": "separatorContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separatorc ontainer's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "minutePicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the minute picker's DOM element."
                        },
                        {
                            "name": "minute",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the minute's DOM element."
                        },
                        {
                            "name": "secondPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the second picker's DOM element."
                        },
                        {
                            "name": "second",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the second's DOM element."
                        },
                        {
                            "name": "ampmPicker",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the ampm picker's DOM element."
                        },
                        {
                            "name": "ampm",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the ampm's DOM element."
                        },
                        {
                            "name": "buttonbar",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the buttonbar's DOM element."
                        },
                        {
                            "name": "todayButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<CalendarSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "clearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<CalendarSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "hiddenSelectedDay",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the aria selected day's DOM element."
                        },
                        {
                            "name": "hiddenMonth",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the aria month's DOM element."
                        },
                        {
                            "name": "hiddenYear",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the aria year's DOM element."
                        },
                        {
                            "name": "datepickerMask",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the datepicker mask's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "CalendarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CalendarState": {
                    "description": "Defines current inline state in Calendar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "currentMonth",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current month as a number."
                        },
                        {
                            "name": "currentYear",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current year as a number."
                        },
                        {
                            "name": "currentHour",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current hour as a number."
                        },
                        {
                            "name": "currentMinute",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current minute as a number."
                        },
                        {
                            "name": "currentSecond",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current second as a number."
                        },
                        {
                            "name": "pm",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current pm state as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "currentView",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "'date'",
                            "description": "Current view state as a string."
                        }
                    ],
                    "methods": []
                },
                "CalendarDateContext": {
                    "description": "Defines current date options in Calendar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "day",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current date."
                        },
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current month state."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current year state."
                        },
                        {
                            "name": "today",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current today state of the calendar's day."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Selectable state of the day."
                        }
                    ],
                    "methods": []
                },
                "CalendarContext": {
                    "description": "Defines current options in Calendar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "date",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarDateContext",
                            "default": "",
                            "description": "Current date."
                        },
                        {
                            "name": "today",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current today state of the calendar's day."
                        },
                        {
                            "name": "otherMonth",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current other month state of the calendar's day."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selected state of the calendar's day or month or year."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the calendar's day or month or year."
                        },
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarMonthOptions",
                            "default": "",
                            "description": "Current month state."
                        },
                        {
                            "name": "monthIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current month index state."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "CalendarYearOptions",
                            "default": "",
                            "description": "Current year state."
                        }
                    ],
                    "methods": []
                },
                "CalendarMonthOptions": {
                    "description": "Defines current month options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Month value."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Selectable state of the month."
                        }
                    ],
                    "methods": []
                },
                "CalendarYearOptions": {
                    "description": "Defines current year options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Year value."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Selectable state of the month."
                        }
                    ],
                    "methods": []
                },
                "CalendarProps": {
                    "description": "Defines valid properties in Calendar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "null | string | string[] | Date | Date[]",
                            "default": "null",
                            "description": "Value of the component."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"range\" | \"single\"",
                            "default": "single",
                            "description": "Defines the quantity of the selection."
                        },
                        {
                            "name": "dateFormat",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Format of the date. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays the calendar as inline instead of an overlay."
                        },
                        {
                            "name": "showOtherMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display dates in other months (non-selectable) at the start or end of the current month. To make these days selectable use the selectOtherMonths option."
                        },
                        {
                            "name": "selectOtherMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether days in other months shown before or after the current month are selectable. This only applies if the showOtherMonths option is set to true."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays a button with icon next to input."
                        },
                        {
                            "name": "iconDisplay",
                            "optional": true,
                            "readonly": false,
                            "type": "\"input\" | \"button\"",
                            "default": "'button'",
                            "description": "Icon position of the component. This only applies if the showIcon option is set to true."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the calendar button.",
                            "deprecated": "since v3.27.0. Use 'dropdownicon' slot."
                        },
                        {
                            "name": "previousIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to show in the previous button.",
                            "deprecated": "since v3.27.0. Use 'previousicon' slot."
                        },
                        {
                            "name": "nextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to show in the next button.",
                            "deprecated": "since v3.27.0. Use 'nexticon' slot."
                        },
                        {
                            "name": "incrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to show in each of the increment buttons.",
                            "deprecated": "since v3.27.0. Use 'incrementicon' slot."
                        },
                        {
                            "name": "decrementIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to show in each of the decrement buttons.",
                            "deprecated": "since v3.27.0. Use 'decrementicon' slot."
                        },
                        {
                            "name": "numberOfMonths",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of months to display."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CalendarResponsiveOptions[]",
                            "default": "",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "769px",
                            "description": "The breakpoint to define the maximum width boundary for datepicker panel."
                        },
                        {
                            "name": "view",
                            "optional": true,
                            "readonly": false,
                            "type": "\"month\" | \"year\" | \"date\"",
                            "default": "date",
                            "description": "Type of view to display."
                        },
                        {
                            "name": "touchUI",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, calendar overlay is displayed as optimized for touch devices."
                        },
                        {
                            "name": "monthNavigator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the month should be rendered as a dropdown instead of text.",
                            "deprecated": "since version 3.9.0, Navigator is always on."
                        },
                        {
                            "name": "yearNavigator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the year should be rendered as a dropdown instead of text.",
                            "deprecated": "since version 3.9.0, Navigator is always on."
                        },
                        {
                            "name": "yearRange",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "false",
                            "description": "The range of years displayed in the year drop-down in (nnnn:nnnn) format such as (2000:2020).",
                            "deprecated": "since version 3.9.0, Years are based on decades by default."
                        },
                        {
                            "name": "minDate",
                            "optional": true,
                            "readonly": false,
                            "type": "Date",
                            "default": "",
                            "description": "The minimum selectable date."
                        },
                        {
                            "name": "maxDate",
                            "optional": true,
                            "readonly": false,
                            "type": "Date",
                            "default": "",
                            "description": "The maximum selectable date."
                        },
                        {
                            "name": "disabledDates",
                            "optional": true,
                            "readonly": false,
                            "type": "Date[]",
                            "default": "",
                            "description": "Array with dates to disable."
                        },
                        {
                            "name": "disabledDays",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array with disabled weekday numbers."
                        },
                        {
                            "name": "maxDateCount",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of selectable dates in multiple mode."
                        },
                        {
                            "name": "showOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When disabled, datepicker will not be visible with input focus."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "showButtonBar",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display today and clear buttons at the footer."
                        },
                        {
                            "name": "shortYearCutoff",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "+10",
                            "description": "The cutoff year for determining the century for a date."
                        },
                        {
                            "name": "showTime",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display timepicker."
                        },
                        {
                            "name": "timeOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display timepicker only."
                        },
                        {
                            "name": "hourFormat",
                            "optional": true,
                            "readonly": false,
                            "type": "\"12\" | \"24\"",
                            "default": "24",
                            "description": "Specifies hour format."
                        },
                        {
                            "name": "stepHour",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Hours to change per step."
                        },
                        {
                            "name": "stepMinute",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Minutes to change per step."
                        },
                        {
                            "name": "stepSecond",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Seconds to change per step."
                        },
                        {
                            "name": "showSeconds",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show the seconds in time picker."
                        },
                        {
                            "name": "hideOnDateTimeSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to hide the overlay on date selection when showTime is enabled."
                        },
                        {
                            "name": "hideOnRangeSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to hide the overlay on date selection is completed when selectionMode is range."
                        },
                        {
                            "name": "timeSeparator",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ":",
                            "description": "Separator of time selector."
                        },
                        {
                            "name": "showWeek",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, calendar will show week numbers."
                        },
                        {
                            "name": "manualInput",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to allow entering the date manually via typing."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the element."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<CalendarPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "CalendarDateSlotOptions": {
                    "description": "Defines valid options of the date slot in Calendar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "day",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current date."
                        },
                        {
                            "name": "month",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current month state."
                        },
                        {
                            "name": "year",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current year state."
                        },
                        {
                            "name": "today",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current today state of the calendar's day."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Selectable state of the day."
                        }
                    ],
                    "methods": []
                },
                "CalendarSlots": {
                    "description": "Defines valid slots in Calendar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template of panel."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template of panel."
                        },
                        {
                            "name": "date",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">date</span>: <span class=\"doc-option-parameter-type\">CalendarDateSlotOptions</span>, <span class=\"doc-option-parameter-type\">// Value of the component.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom date template."
                        },
                        {
                            "name": "decade",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">years</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// An array containing the start and and year of a decade to display at header of the year picker.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom decade template."
                        },
                        {
                            "name": "weekheaderlabel",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom week header label template."
                        },
                        {
                            "name": "weeklabel",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">weekNumber</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Number of the week</span>\n }",
                                    "description": "weeklabel slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom week label template."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the dropdown icon</span>\n }",
                                    "description": "dropdown icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom dropdown icon template."
                        },
                        {
                            "name": "inputicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the input icon</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">clickCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Click callback</span>\n}",
                                    "description": "input icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom input icon template."
                        },
                        {
                            "name": "previousicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the previous icon</span>\n }",
                                    "description": "previous icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom previous icon template."
                        },
                        {
                            "name": "nexticon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the next icon</span>\n }",
                                    "description": "next icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom next icon template."
                        },
                        {
                            "name": "incrementicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the increment icon</span>\n }",
                                    "description": "increment icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom increment icon template."
                        },
                        {
                            "name": "decrementicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the decrement icon</span>\n }",
                                    "description": "decrement icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom decrement icon template."
                        }
                    ]
                },
                "CalendarEmits": {
                    "description": "Defines valid emits in Calendar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | string | string[] | Date | Date[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "input",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when input field is being typed."
                        },
                        {
                            "name": "date-select",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "Date",
                                    "description": "Selected value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a date is selected."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when datepicker panel is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when datepicker panel is hidden."
                        },
                        {
                            "name": "today-click",
                            "parameters": [
                                {
                                    "name": "date",
                                    "optional": false,
                                    "type": "Date",
                                    "description": "Today as a date instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when today button is clicked."
                        },
                        {
                            "name": "clear-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when clear button is clicked."
                        },
                        {
                            "name": "month-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarMonthChangeEvent",
                                    "description": "Custom month change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a month is changed using the navigators."
                        },
                        {
                            "name": "year-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarYearChangeEvent",
                                    "description": "Custom year change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a year is changed using the navigators."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Focus event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on focus of input field."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CalendarBlurEvent",
                                    "description": "Blur event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on blur of input field."
                        },
                        {
                            "name": "keydown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a key is pressed."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CalendarPassThroughOptionType": {
                    "values": "CalendarPassThroughAttributes | (options: CalendarPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "CalendarPassThroughTransitionType": {
                    "values": "TransitionProps | (options: CalendarPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "calendar/style/CalendarStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CalendarStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "card": {
        "description": "Card is a flexible container component.\n\n[Live Demo](https://www.primevue.org/card/)",
        "components": {
            "default": {
                "description": "Card is a flexible container component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CardProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "CardPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "CardProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "body",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the body's DOM element."
                        },
                        {
                            "name": "caption",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the caption's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "subtitle",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the subtitle's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "CardPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "CardPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CardProps": {
                    "description": "Defines valid properties in Card component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<CardPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "CardSlots": {
                    "description": "Defines valid slots in Card component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "title",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom title template."
                        },
                        {
                            "name": "subtitle",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom subtitle template."
                        },
                        {
                            "name": "content",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        }
                    ]
                },
                "CardEmits": {
                    "description": "Defines valid emits in Card component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CardPassThroughOptionType": {
                    "values": "CardPassThroughAttributes | (options: CardPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "card/style/CardStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CardStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "carousel": {
        "description": "Carousel is a content slider featuring various customization options.\n\n[Live Demo](https://www.primevue.org/carousel/)",
        "components": {
            "default": {
                "description": "Carousel is a content slider featuring various customization options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CarouselPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CarouselProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CarouselState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "CarouselContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "CarouselPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "CarouselProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "previousButton",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous button's DOM element."
                        },
                        {
                            "name": "previousButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous button icon's DOM element."
                        },
                        {
                            "name": "itemsContent",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the items content's DOM element."
                        },
                        {
                            "name": "itemsContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the items container's DOM element."
                        },
                        {
                            "name": "itemCloned",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item cloned's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "nextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next button's DOM element."
                        },
                        {
                            "name": "nextButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next button icon's DOM element."
                        },
                        {
                            "name": "indicators",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicators's DOM element."
                        },
                        {
                            "name": "indicator",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicator's DOM element."
                        },
                        {
                            "name": "indicatorButton",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicator button's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "CarouselPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CarouselState": {
                    "description": "Defines current inline state in Carousel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "remainingItems",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Remaining items' count as a number."
                        },
                        {
                            "name": "d_numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items per page as a number."
                        },
                        {
                            "name": "d_numScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items to scroll as a number."
                        },
                        {
                            "name": "d_oldNumScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Old number of items to scroll as a number."
                        },
                        {
                            "name": "d_oldNumVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Old number of items per page as a number."
                        },
                        {
                            "name": "d_oldValue",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Old array of objects to display."
                        },
                        {
                            "name": "d_page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "totalShiftedItems",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Total shifted items' count as a number."
                        },
                        {
                            "name": "allowAutoplay",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Allow autoplay as a boolean."
                        },
                        {
                            "name": "d_circular",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite as a boolean."
                        },
                        {
                            "name": "swipeThreshold",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "20",
                            "description": "Swipe threshold count as a number."
                        }
                    ],
                    "methods": []
                },
                "CarouselContext": {
                    "description": "Defines current inline options in Carousel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "highlighted",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current highlighted state of the indicator as a boolean."
                        }
                    ],
                    "methods": []
                },
                "CarouselResponsiveOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Breakpoint for responsive mode. Exp;"
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of visible items on breakpoint."
                        },
                        {
                            "name": "numScroll",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of scrolled items on breakpoint."
                        }
                    ],
                    "methods": []
                },
                "CarouselProps": {
                    "description": "Defines valid properties in Carousel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "page",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "numVisible",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items per page."
                        },
                        {
                            "name": "numScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Number of items to scroll."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "CarouselResponsiveOptions[]",
                            "default": "",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the layout of the component, valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "verticalViewPortHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "300px",
                            "description": "Height of the viewport in vertical layout."
                        },
                        {
                            "name": "containerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the viewport container."
                        },
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of main content."
                        },
                        {
                            "name": "indicatorsContentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the indicator items."
                        },
                        {
                            "name": "circular",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite."
                        },
                        {
                            "name": "autoplayInterval",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Time in milliseconds to scroll items automatically."
                        },
                        {
                            "name": "showNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in container."
                        },
                        {
                            "name": "showIndicators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display indicator container."
                        },
                        {
                            "name": "prevButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the previous navigation button."
                        },
                        {
                            "name": "nextButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the next navigation button."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<CarouselPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "CarouselSlots": {
                    "description": "Defines valid slots in Carousel slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Data of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the item</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "previousicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom previous icon template."
                        },
                        {
                            "name": "nexticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom next icon template."
                        }
                    ]
                },
                "CarouselEmits": {
                    "description": "Defines valid emits in Carousel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:page",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New page value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the page changes."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CarouselPassThroughOptionType": {
                    "values": "CarouselPassThroughAttributes | (options: CarouselPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "carousel/style/CarouselStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CarouselStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "cascadeselect": {
        "description": "CascadeSelect is a form component to select a value from a nested structure of options.\n\n[Live Demo](https://www.primevue.org/cascadeselect/)",
        "components": {
            "default": {
                "description": "CascadeSelect is a form component to select a value from a nested structure of options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CascadeSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CascadeSelectProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CascadeSelectState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "CascadeSelectContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectChangeEvent": {
                    "description": "Custom change event",
                    "relatedProp": "CascadeSelectEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "CascadeSelectGroupChangeEvent"
                },
                "CascadeSelectGroupChangeEvent": {
                    "description": "",
                    "relatedProp": "CascadeSelectEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "CascadeSelectChangeEvent"
                },
                "CascadeSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "CascadeSelectProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "dropdownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown button's DOM element."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown icon's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the text's DOM element."
                        },
                        {
                            "name": "groupIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the group icon's DOM element."
                        },
                        {
                            "name": "hiddenSelectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden selected message's DOM element."
                        },
                        {
                            "name": "hiddenSearchResult",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the search result message text aria's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "CascadeSelectPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectFocusedOptionInfo": {
                    "description": "Defines focused item info",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item index"
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item level"
                        },
                        {
                            "name": "parentKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Parent key info"
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectState": {
                    "description": "Defines current inline state in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string"
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedOptionInfo",
                            "optional": false,
                            "readonly": false,
                            "type": "CascadeSelectFocusedOptionInfo",
                            "default": "",
                            "description": "Current focused item info."
                        },
                        {
                            "name": "activeOptionPath",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectContext": {
                    "description": "Defines current options in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current option."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the option."
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Level of the option."
                        },
                        {
                            "name": "itemGroup",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current item group state of option as a boolean."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of option as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of option as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of option as a boolean."
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectProps": {
                    "description": "Defines valid properties in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | string[] | Function",
                            "default": "",
                            "description": "Property name or getter function to retrieve the items of a group."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dropdown is in loading state."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dropdown.",
                            "deprecated": "since v3.27.0. Use 'dropdownicon' slot."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in loading state.",
                            "deprecated": "since v3.27.0. Use 'loadingicon' slot."
                        },
                        {
                            "name": "optionGroupIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the option group.",
                            "deprecated": "since v3.27.0. Use 'optiongroupicon' slot."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected/opened."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "searchLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in searching. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "searchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySearchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No available options",
                            "description": "Text to be displayed when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<CascadeSelectPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "CascadeSelectSlots": {
                    "description": "Defines valid slots in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each option."
                        },
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">placeholder</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Placeholder text to show</span>\n }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        },
                        {
                            "name": "indicator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template.",
                            "deprecated": "since v3.27.0. Use 'dropdownicon or loadingicon' slots."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom dropdown icon template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "optiongroupicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option group icon template."
                        }
                    ]
                },
                "CascadeSelectEmits": {
                    "description": "Defines valid emits in CascadeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CascadeSelectChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on click."
                        },
                        {
                            "name": "group-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "CascadeSelectGroupChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a group changes."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CascadeSelectPassThroughOptionType": {
                    "values": "CascadeSelectPassThroughAttributes | (options: CascadeSelectPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "CascadeSelectPassThroughTransitionType": {
                    "values": "TransitionProps | (options: CascadeSelectPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "cascadeselect/style/CascadeSelectStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CascadeSelectStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "chart": {
        "description": "Chart groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/chart/)",
        "components": {
            "default": {
                "description": "Chart groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "refresh",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Redraws the graph."
                        },
                        {
                            "name": "reinit",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Destroys the graph first and then creates it again."
                        },
                        {
                            "name": "generateLegend",
                            "parameters": [],
                            "returnType": "any",
                            "description": "Returns an HTML string of a legend for that chart. The legend is generated from the legendCallback in the options."
                        },
                        {
                            "name": "getChart",
                            "parameters": [],
                            "returnType": "any",
                            "description": "Returns Chart instance."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChartPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ChartProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ChartPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ChartProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "canvas",
                            "optional": true,
                            "readonly": false,
                            "type": "ChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the canvas's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ChartPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ChartSelectEvent": {
                    "description": "Custom select event.",
                    "relatedProp": "ChartEmits.select",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected element."
                        },
                        {
                            "name": "dataset",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected dataset."
                        }
                    ],
                    "methods": []
                },
                "ChartProps": {
                    "description": "Defines valid properties in Chart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the chart."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Data to display."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Options to customize the chart."
                        },
                        {
                            "name": "plugins",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to custom plugins of the chart."
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "300",
                            "description": "Width of the chart in non-responsive mode."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "150",
                            "description": "Height of the chart in non-responsive mode."
                        },
                        {
                            "name": "canvasProps",
                            "optional": true,
                            "readonly": false,
                            "type": "CanvasHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the CanvasHTMLAttributes to canvas element inside the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ChartPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ChartSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ChartEmits": {
                    "description": "Defines valid emits in Chart component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ChartSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded."
                        },
                        {
                            "name": "loaded",
                            "parameters": [
                                {
                                    "name": "chart",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Chart instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when chart is loaded."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ChartPassThroughOptionType": {
                    "values": "ChartPassThroughAttributes | (options: ChartPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "chart/style/ChartStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChartStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "checkbox": {
        "description": "Checkbox is an extension to standard checkbox element with theming.\n\n[Live Demo](https://www.primevue.org/checkbox/)",
        "components": {
            "default": {
                "description": "Accordion groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "CheckboxProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "CheckboxState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "CheckboxContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "CheckboxPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "CheckboxProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "box",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the box's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "CheckboxPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CheckboxState": {
                    "description": "Defines current inline state in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "CheckboxProps": {
                    "description": "Defines valid properties in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value binding of the checkbox."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "binary",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Allows to select a boolean value instead of multiple values."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that the element is required."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<CheckboxPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "CheckboxContext": {
                    "description": "Defines current options in Checkbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current checked state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "CheckboxSlots": {
                    "description": "Defines valid slots in Checkbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// State of the checkbox.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        }
                    ]
                },
                "CheckboxEmits": {
                    "description": "Defines valid emits in Checkbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "CheckboxPassThroughOptionType": {
                    "values": "CheckboxPassThroughAttributes | (options: CheckboxPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "checkbox/style/CheckboxStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "CheckboxStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "chip": {
        "description": "Chip represents people using icons, labels and images.\n\n[Live Demo](https://www.primevue.org/chip)",
        "components": {
            "default": {
                "description": "Chip represents people using icons, labels and images.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ChipPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ChipProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the image's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label' DOM element."
                        },
                        {
                            "name": "removeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the removeIcon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ChipPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ChipState": {
                    "description": "Defines current inline state in Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ChipProps": {
                    "description": "Defines valid properties in Chip component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the text to display."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the icon to display.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the image to display."
                        },
                        {
                            "name": "removable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display a remove icon."
                        },
                        {
                            "name": "removeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the remove element.",
                            "deprecated": "since v3.27.0. Use 'removeicon' slot."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ChipPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ChipSlots": {
                    "description": "Defines valid slots in Chip component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Content can easily be customized with the default slot instead of using the built-in modes."
                        },
                        {
                            "name": "icon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "removeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClick</span>: <span class=\"doc-option-parameter-type line-through\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Remove icon click event</span>\n\t <span class=\"ml-3 doc-option-parameter-name line-through\">onKeydown</span>: <span class=\"doc-option-parameter-type line-through\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Remove icon keydown event</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Remove icon click event</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">keydownCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Remove icon keydown event</span>\n}",
                                    "description": "remove icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom remove icon template of chip component."
                        }
                    ]
                },
                "ChipEmits": {
                    "description": "Defines valid properties in Chip component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is removed."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ChipPassThroughOptionType": {
                    "values": "ChipPassThroughAttributes | (options: ChipPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "chip/style/ChipStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "chips": {
        "description": "Chips groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/chips/)",
        "components": {
            "default": {
                "description": "Chips is used to enter multiple values on an input field.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipsProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ChipsState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ChipsAddEvent": {
                    "description": "Custom add event.",
                    "relatedProp": "ChipsEmits.add",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Added/Removed item value."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ChipsRemoveEvent"
                },
                "ChipsRemoveEvent": {
                    "description": "Custom remove event.",
                    "relatedProp": "ChipsEmits.remove",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Added/Removed item value."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "ChipsAddEvent"
                },
                "ChipsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ChipsProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "token",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the token's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the remove token icon's DOM element."
                        },
                        {
                            "name": "inputToken",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input token's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "ChipsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ChipsPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ChipsState": {
                    "description": "Defines current inline state in Chips component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "inputValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current input value as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current focused item index state as a number."
                        }
                    ],
                    "methods": []
                },
                "ChipsProps": {
                    "description": "Defines valid properties in Chips component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of entries allowed."
                        },
                        {
                            "name": "addOnBlur",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to add an item when the input loses focus."
                        },
                        {
                            "name": "allowDuplicate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to allow duplicate values or not."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Separator char to add an item when pressed in addition to the enter key."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focus input to match a label defined for the chips."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component.",
                            "deprecated": "since v3.26.0. Use 'pt' property instead."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in chip remove action.",
                            "deprecated": "since v3.27.0. Use 'removetokenicon' slot."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ChipsPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ChipsSlots": {
                    "description": "Defines valid slots in Chips slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "chip",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n }",
                                    "description": "chip slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip template."
                        },
                        {
                            "name": "removetokenicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the token.</span>\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClick</span>: <span class=\"doc-option-parameter-type line-through\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Remove token icon function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Remove token icon function.</span>\n}",
                                    "description": "remove token icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom remove token icon template."
                        }
                    ]
                },
                "ChipsEmits": {
                    "description": "Defines valid emits in Chips component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "add",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ChipsAddEvent",
                                    "description": "Custom add event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is added."
                        },
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ChipsRemoveEvent",
                                    "description": "Custom remove event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a chip is removed."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ChipsPassThroughOptionType": {
                    "values": "ChipsPassThroughAttributes | (options: ChipsPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "chips/style/ChipsStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ChipsStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "colorpicker": {
        "description": "ColorPicker groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/colorpicker/)",
        "components": {
            "default": {
                "description": "ColorPicker groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColorPickerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ColorPickerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ColorPickerState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "ColorPickerEmits.change",
                    "props": [
                        {
                            "name": "event",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected color value."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ColorPickerProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "selector",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the selector's DOM element."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the color's DOM element."
                        },
                        {
                            "name": "colorHandle",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the color handler's DOM element."
                        },
                        {
                            "name": "hue",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hue's DOM element."
                        },
                        {
                            "name": "hueHandle",
                            "optional": false,
                            "readonly": false,
                            "type": "ColorPickerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hue handler's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ColorPickerPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ColorPickerState": {
                    "description": "Defines current inline state in ColorPicker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerProps": {
                    "description": "Defines valid properties in ColorPicker component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "defaultColor",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "ff0000",
                            "description": "Initial color to display when value is not defined."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display as an overlay or not."
                        },
                        {
                            "name": "format",
                            "optional": true,
                            "readonly": false,
                            "type": "\"rgb\" | \"hex\" | \"hsb\"",
                            "default": "hex",
                            "description": "Format to use in value binding, supported formats are 'hex', 'rgb' and 'hsb'."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ColorPickerPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ColorPickerSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ColorPickerEmits": {
                    "description": "Defines valid emits in ColorPicker component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ColorPickerChangeEvent",
                                    "description": "Custom add event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a color is selected."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when input is cleared by the user."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when input is cleared by the user."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ColorPickerPassThroughOptionType": {
                    "values": "ColorPickerPassThroughAttributes | (options: ColorPickerPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ColorPickerPassThroughTransitionType": {
                    "values": "TransitionProps | (options: ColorPickerPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "colorpicker/style/ColorPickerStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColorPickerStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "column": {
        "description": "Column component defines various options to specify corresponding features.\nIt is a helper component for DataTable and TreeTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "Column is a helper component for Column and TreeTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColumnPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ColumnSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTablePassThroughOptions",
                            "default": "",
                            "description": "Defines parent instance."
                        }
                    ],
                    "methods": []
                },
                "ColumnFilterModelType": {
                    "description": "Filter model metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of filterModel."
                        },
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Match mode of filterModel."
                        }
                    ],
                    "methods": []
                },
                "ColumnFilterMatchModeOptions": {
                    "description": "Filter match modes for specific columns.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "ColumnLoadingOptions": {
                    "description": "Custom column loading metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "cellIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Cell index"
                        },
                        {
                            "name": "cellFirst",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the cell is first."
                        },
                        {
                            "name": "cellLast",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the cell is last."
                        },
                        {
                            "name": "cellEven",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the cell is even."
                        },
                        {
                            "name": "cellOdd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is odd."
                        },
                        {
                            "name": "column",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnNode",
                            "default": "",
                            "description": "Column instance"
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Column field"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Item index"
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Items count"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is last."
                        },
                        {
                            "name": "even",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is even."
                        },
                        {
                            "name": "odd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is odd."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "VirtualScrollerLoaderOptions"
                },
                "ColumnPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ColumnProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "headerCell",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header cell's DOM element."
                        },
                        {
                            "name": "columnResizer",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column resizer's DOM element."
                        },
                        {
                            "name": "headerContent",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header content's DOM element."
                        },
                        {
                            "name": "headerTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header title's DOM element."
                        },
                        {
                            "name": "sort",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the sort's DOM element."
                        },
                        {
                            "name": "sortIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the sort icon's DOM element."
                        },
                        {
                            "name": "sortBadge",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the sort badge's DOM element."
                        },
                        {
                            "name": "headerCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header checkbox's DOM element."
                        },
                        {
                            "name": "columnFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column filter's DOM element."
                        },
                        {
                            "name": "filterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter input's DOM element."
                        },
                        {
                            "name": "filterMenuButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter menu button's DOM element."
                        },
                        {
                            "name": "filterMenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter menu icon's DOM element."
                        },
                        {
                            "name": "headerFilterClearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header filter clear button's DOM element."
                        },
                        {
                            "name": "filterClearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter clear icon's DOM element."
                        },
                        {
                            "name": "filterOverlay",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter overlay's DOM element."
                        },
                        {
                            "name": "filterRowItems",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter row items' DOM element."
                        },
                        {
                            "name": "filterRowItem",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter row item's DOM element."
                        },
                        {
                            "name": "filterSeparator",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter separator's DOM element."
                        },
                        {
                            "name": "filterOperator",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter operator's DOM element."
                        },
                        {
                            "name": "filterOperatorDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<ColumnSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "filterConstraints",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter constraints' DOM element."
                        },
                        {
                            "name": "filterConstraint",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter constraint's DOM element."
                        },
                        {
                            "name": "filterMatchModeDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<ColumnSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "filterRemove",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter remove button container's DOM element."
                        },
                        {
                            "name": "filterRemoveButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<ColumnSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "filterAddRule",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter add rule's DOM element."
                        },
                        {
                            "name": "filterAddRuleButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<ColumnSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "filterButtonbar",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter buttonbar's DOM element."
                        },
                        {
                            "name": "filterClearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<ColumnSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "filterApplyButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<ColumnSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "bodyCell",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the body cell's DOM element."
                        },
                        {
                            "name": "rowGroupToggler",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rowgroup toggler's DOM element."
                        },
                        {
                            "name": "rowGroupTogglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rowgroup toggler icon's DOM element."
                        },
                        {
                            "name": "columnTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column title's DOM element."
                        },
                        {
                            "name": "rowRadioButton",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the radiobutton's DOM element."
                        },
                        {
                            "name": "rowCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "CheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the checkbox's DOM element."
                        },
                        {
                            "name": "rowToggler",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rowtoggler's DOM element."
                        },
                        {
                            "name": "rowTogglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rowtoggler icon's DOM element."
                        },
                        {
                            "name": "rowEditorInitButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row editor init button's DOM element."
                        },
                        {
                            "name": "rowEditorInitIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row editor init icon's DOM element."
                        },
                        {
                            "name": "rowEditorSaveButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row editor save button's DOM element."
                        },
                        {
                            "name": "rowEditorSaveIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row editor save icon's DOM element."
                        },
                        {
                            "name": "rowEditorCancelButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row editor cancel button's DOM element."
                        },
                        {
                            "name": "rowEditorCancelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row editor cancel icon's DOM element."
                        },
                        {
                            "name": "footerCell",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer cell's DOM element."
                        },
                        {
                            "name": "bodyCellContent",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the body cell content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ColumnPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ColumnState": {
                    "description": "Defines current inline state in Column component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_editing",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "styleObject",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Current style of the body cell."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current filter overlay visible as a boolean."
                        },
                        {
                            "name": "defaultMatchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter match mode."
                        },
                        {
                            "name": "defaultOperator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter operator."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "rowGroupHeaderStyleObject",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Current style of the rowgroup header."
                        }
                    ],
                    "methods": []
                },
                "ColumnProps": {
                    "description": "Defines valid properties in Column component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "columnKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of a column if field property is not defined."
                        },
                        {
                            "name": "field",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property represented by the column."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name to use in sorting, defaults to field."
                        },
                        {
                            "name": "filterField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name to use in filtering, defaults to field."
                        },
                        {
                            "name": "dataType",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of data. It's value is related to PrimeVue.filterMatchModeOptions config."
                        },
                        {
                            "name": "sortable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if a column is sortable."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header content of the column."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Footer content of the column."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of header, body and footer cells."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of header, body and footer cells."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column header."
                        },
                        {
                            "name": "headerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column header."
                        },
                        {
                            "name": "bodyStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column body."
                        },
                        {
                            "name": "bodyClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column body."
                        },
                        {
                            "name": "footerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column footer."
                        },
                        {
                            "name": "footerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column footer."
                        },
                        {
                            "name": "showFilterMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display the filter overlay."
                        },
                        {
                            "name": "showFilterOperator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, match all and match any operator selector is displayed."
                        },
                        {
                            "name": "showClearButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Displays a button to clear the column filtering."
                        },
                        {
                            "name": "showApplyButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Displays a button to apply the column filtering."
                        },
                        {
                            "name": "showFilterMatchModes",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the match modes selector."
                        },
                        {
                            "name": "showAddButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, a button is displayed to add more rules."
                        },
                        {
                            "name": "filterMatchModeOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnFilterMatchModeOptions[]",
                            "default": "",
                            "description": "An array of label-value pairs to override the global match mode options."
                        },
                        {
                            "name": "maxConstraints",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "2",
                            "description": "Maximum number of constraints for a column filter."
                        },
                        {
                            "name": "excludeGlobalFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to exclude from global filtering or not."
                        },
                        {
                            "name": "filterHeaderStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column filter header in row filter display."
                        },
                        {
                            "name": "filterHeaderClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column filter header in row filter display."
                        },
                        {
                            "name": "filterMenuStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the column filter overlay."
                        },
                        {
                            "name": "filterMenuClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the column filter overlay."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "",
                            "description": "Defines column based selection mode."
                        },
                        {
                            "name": "expander",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays an icon to toggle row expansion."
                        },
                        {
                            "name": "colspan",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of columns to span for grouping."
                        },
                        {
                            "name": "rowspan",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to span for grouping."
                        },
                        {
                            "name": "rowReorder",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether this column displays an icon to reorder the rows."
                        },
                        {
                            "name": "rowReorderIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the drag handle to reorder rows.",
                            "deprecated": "since v3.27.0. Use 'rowreordericon' slot."
                        },
                        {
                            "name": "reorderableColumn",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if the column itself can be reordered with dragging."
                        },
                        {
                            "name": "rowEditor",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, column displays row editor controls."
                        },
                        {
                            "name": "frozen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the column is fixed in horizontal scrolling."
                        },
                        {
                            "name": "alignFrozen",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "left",
                            "description": "Position of a frozen column, valid values are left and right."
                        },
                        {
                            "name": "exportable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the column is included in data export."
                        },
                        {
                            "name": "exportHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Custom export header of the column to be exported as CSV."
                        },
                        {
                            "name": "exportFooter",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Custom export footer of the column to be exported as CSV."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "hidden",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the column is rendered."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ColumnPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ColumnContext": {
                    "description": "Defines current options in Column component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the column."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current checked state of row as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of row as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of row as a boolean."
                        },
                        {
                            "name": "sorted",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current sort state of the column as a boolean."
                        },
                        {
                            "name": "frozen",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current frozen state of the column as a boolean."
                        },
                        {
                            "name": "resizable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current resizable state of the column as a boolean."
                        },
                        {
                            "name": "size",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current size state of the table."
                        },
                        {
                            "name": "showGridlines",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current gridlines state of the table as a boolean."
                        },
                        {
                            "name": "highlighted",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current highlighted state of the filter row item as a boolean."
                        },
                        {
                            "name": "hidden",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current hidden state of the filter clear button of a column as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state of the filter menu of a column as a boolean."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the filter menu of a column as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ColumnSlots": {
                    "description": "Defines valid slots in Column component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "body",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row node data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">column</span>: <span class=\"doc-option-parameter-type\">ColumnNode</span>, <span class=\"doc-option-parameter-type\">// Column node.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">frozenRow</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the row is frozen.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">editorInitCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Editor init callback function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">rowTogglerCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Row toggler callback unction</span>\n}",
                                    "description": "body slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom body template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">column</span>: <span class=\"doc-option-parameter-type\">ColumnNode</span>, <span class=\"doc-option-parameter-type\">// Column node.</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">column</span>: <span class=\"doc-option-parameter-type\">ColumnNode</span>, <span class=\"doc-option-parameter-type\">// Column node.</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "editor",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">column</span>: <span class=\"doc-option-parameter-type\">ColumnNode</span>, <span class=\"doc-option-parameter-type\">// Column node.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">frozenRow</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the row is frozen.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">editorSaveCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">editorCancelCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n}",
                                    "description": "editor slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom editor template."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">filterModel</span>: <span class=\"doc-option-parameter-type\">ColumnFilterModelType</span>, <span class=\"doc-option-parameter-type\">// Filter metadata</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">filterCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">applyFilter</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function (closes the overlay)</span>\n}",
                                    "description": "filter slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter template."
                        },
                        {
                            "name": "filterheader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">filterModel</span>: <span class=\"doc-option-parameter-type\">ColumnFilterModelType</span>, <span class=\"doc-option-parameter-type\">// Filter metadata</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">filterCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n}",
                                    "description": "filter header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter header template."
                        },
                        {
                            "name": "filterfooter",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">filterModel</span>: <span class=\"doc-option-parameter-type\">ColumnFilterModelType</span>, <span class=\"doc-option-parameter-type\">// Filter metadata</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">filterCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n}",
                                    "description": "filter footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter footer template."
                        },
                        {
                            "name": "filterclear",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">filterModel</span>: <span class=\"doc-option-parameter-type\">ColumnFilterModelType</span>, <span class=\"doc-option-parameter-type\">// Filter metadata</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">filterCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n}",
                                    "description": "filter clear slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter clear template."
                        },
                        {
                            "name": "filterapply",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">filterModel</span>: <span class=\"doc-option-parameter-type\">ColumnFilterModelType</span>, <span class=\"doc-option-parameter-type\">// Filter metadata</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">filterCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Callback function</span>\n}",
                                    "description": "filter apply slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter apply template."
                        },
                        {
                            "name": "loading",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">column</span>: <span class=\"doc-option-parameter-type\">ColumnNode</span>, <span class=\"doc-option-parameter-type\">// Column node.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">field</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Column field.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">frozenRow</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the row is frozen.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">loadingOptions</span>: <span class=\"doc-option-parameter-type\">ColumnLoadingOptions</span>, <span class=\"doc-option-parameter-type\">// Loading options.</span>\n }",
                                    "description": "loading slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading template."
                        },
                        {
                            "name": "rowtogglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the row toggler icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">rowExpanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current row expanded state.</span>\n }",
                                    "description": "row toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row toggler icon template."
                        },
                        {
                            "name": "rowcheckboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current check state.</span>\n }",
                                    "description": "header row icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row checkbox icon template."
                        },
                        {
                            "name": "roweditoriniticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row editor init icon template."
                        },
                        {
                            "name": "roweditorsaveicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row editor save icon template."
                        },
                        {
                            "name": "roweditorcancelicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row editor cancel icon template."
                        },
                        {
                            "name": "filtericon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter icon template."
                        },
                        {
                            "name": "filterclearicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter clear icon template."
                        },
                        {
                            "name": "filterremoveicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter remove icon template."
                        },
                        {
                            "name": "filteraddicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter add icon template."
                        },
                        {
                            "name": "sorticon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the sort icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">sorted</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current sort state.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">sortOrder</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Current sort order state.</span>\n }",
                                    "description": "sort icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom sort icon template."
                        },
                        {
                            "name": "headercheckboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current check state.</span>\n }",
                                    "description": "header checkbox icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header checkbox icon template."
                        },
                        {
                            "name": "rowreordericon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom row reorder icon template."
                        }
                    ]
                },
                "ColumnEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ColumnPassThroughOptionType": {
                    "values": "ColumnPassThroughAttributes | (options: ColumnPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ColumnNode": {
                    "values": "default & Object"
                }
            }
        }
    },
    "column/style/ColumnStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColumnStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "columngroup": {
        "description": "Columns can be grouped at header and footer sections by defining a ColumnGroup component.\nIt is a helper component for DataTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "It is a helper component for DataTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColumnGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnGroupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ColumnGroupContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ColumnGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ColumnGroupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ColumnGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ColumnGroupProps": {
                    "description": "Defines valid properties in ColumnGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"footer\" | \"header\"",
                            "default": "",
                            "description": "Type of column group"
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ColumnGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ColumnGroupContext": {
                    "description": "Defines current options in ColumnGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current type of the column group."
                        },
                        {
                            "name": "scrollable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current scrollable state of column group as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ColumnGroupSlots": {
                    "description": "Defines valid slots in ColumnGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ColumnGroupEmits": {
                    "description": "Defines valid emits in ColumnGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ColumnGroupPassThroughOptionType": {
                    "values": "ColumnGroupPassThroughAttributes | (options: ColumnGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "columngroup/style/ColumnGroupStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ColumnGroupStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "config/PrimeVue": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "usePrimeVue": {
                    "name": "usePrimeVue",
                    "parameters": [],
                    "returnType": "Object"
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PrimeVueConfiguration": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ripple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": ""
                        },
                        {
                            "name": "locale",
                            "optional": true,
                            "readonly": false,
                            "type": "PrimeVueLocaleOptions",
                            "default": ""
                        },
                        {
                            "name": "filterMatchModeOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "zIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "PrimeVueZIndexOptions",
                            "default": ""
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PrimeVuePTOptions>",
                            "default": ""
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": ""
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "csp",
                            "optional": true,
                            "readonly": false,
                            "type": "PrimeVueCSPOptions",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "PrimeVueZIndexOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": ""
                        },
                        {
                            "name": "overlay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": ""
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": ""
                        },
                        {
                            "name": "tooltip",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "PrimeVueCSPOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "nonce",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "PrimeVuePTOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "accordion",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<AccordionPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "accordiontab",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<AccordionTabPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "autocomplete",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<AutoCompletePassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "avatar",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<AvatarPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "avatargroup",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<AvatarGroupPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<BadgePassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "blockui",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<BlockUIPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "breadcrumb",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<BreadcrumbPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ButtonPassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "calendar",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<CalendarPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "card",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<CardPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "carousel",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<CarouselPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "cascadeselect",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<CascadeSelectPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "chart",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ChartPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "checkbox",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<CheckboxPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "chip",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ChipPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "chips",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ChipsPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "colorpicker",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ColorPickerPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "column",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ColumnPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "columngroup",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ColumnGroupPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "confirmdialog",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ConfirmDialogPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "confirmpopup",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ConfirmPopupPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "contextmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ContextMenuPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "datatable",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<DataTablePassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "dataview",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<DataViewPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "dataviewlayoutoptions",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<DataViewLayoutOptionsPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "deferredcontent",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<DeferredContentPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "divider",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<DividerPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "dialog",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<DialogPassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "dock",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<DockPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "dropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<DropdownPassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "dynamicdialog",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<DialogPassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "editor",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<EditorPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "fieldset",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<FieldsetPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "fileupload",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<FileUploadPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "galleria",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<GalleriaPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ImagePassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "inlinemessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<InlineMessagePassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "inplace",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<InplacePassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "inputmask",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<InputMaskPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "inputnumber",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<InputNumberPassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "inputswitch",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<InputSwitchPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "inputtext",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<InputTextPassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "knob",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<KnobPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "listbox",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ListboxPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "megamenu",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<MegaMenuPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<MenuPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "menubar",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<MenubarPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<MessagePassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "multiselect",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<MultiSelectPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "orderlist",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<OrderListPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "organizationchart",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<OrganizationChartPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "overlaypanel",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<OverlayPanelPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<PaginatorPassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<PanelPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "panelmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<PanelMenuPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "password",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<PasswordPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "picklist",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<PickListPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "progressbar",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ProgressBarPassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "progressspinner",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ProgressSpinnerPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "radiobutton",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<RadioButtonPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "rating",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<RatingPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "row",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<RowPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "scrollpanel",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ScrollPanelPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "scrolltop",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ScrollTopPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "sidebar",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<SidebarPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "skeleton",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<SkeletonPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "slider",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<SliderPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "speeddial",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<SpeedDialPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "selectbutton",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<SelectButtonPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "splitbutton",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<SplitButtonPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "splitter",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<SplitterPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "splitterpanel",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<SplitterPanelPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "steps",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<StepsPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "tabmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TabMenuPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "tabpanel",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TabPanelPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "tabview",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TabViewPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "tag",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TagPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "terminal",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TerminalPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "textarea",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TextareaPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "tieredmenu",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TieredMenuPassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "timeline",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TimelinePassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "toast",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ToastPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "togglebutton",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ToggleButtonPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "toolbar",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<ToolbarPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "tree",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TreePassThroughOptions<any>>",
                            "default": ""
                        },
                        {
                            "name": "treeselect",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TreeSelectPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "tristatecheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TriStateCheckboxPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "treetable",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<TreeTablePassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "virtualscroller",
                            "optional": true,
                            "readonly": false,
                            "type": "DefaultPassThrough<VirtualScrollerPassThroughOptions>",
                            "default": ""
                        },
                        {
                            "name": "directives",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "default": ""
                        },
                        {
                            "name": "global",
                            "optional": true,
                            "readonly": false,
                            "type": "Object",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "PrimeVueLocaleAriaOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "trueLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "falseLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "nullLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "star",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "stars",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "selectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "unselectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "close",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "previous",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "next",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "navigation",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "scrollTop",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "moveUp",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "moveTop",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "moveDown",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "moveBottom",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "moveToTarget",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "moveToSource",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "moveAllToTarget",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "moveAllToSource",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "pageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "firstPageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "lastPageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "nextPageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "prevPageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "rowsPerPageLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "jumpToPageDropdownLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "jumpToPageInputLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "selectRow",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "unselectRow",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "expandRow",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "collapseRow",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "showFilterMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "hideFilterMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "filterOperator",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "filterConstraint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "editRow",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "saveEdit",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "cancelEdit",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "listView",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "gridView",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "slide",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "slideNumber",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "zoomImage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "zoomIn",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "zoomOut",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "rotateRight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "rotateLeft",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "PrimeVueLocaleOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "startsWith",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "contains",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "notContains",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "endsWith",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "equals",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "notEquals",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "noFilter",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "lt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "lte",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "gt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "gte",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dateIs",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dateIsNot",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dateBefore",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "dateAfter",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "clear",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "apply",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "matchAll",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "matchAny",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "addRule",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "removeRule",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "reject",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "choose",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "upload",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "cancel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "completed",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "pending",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "fileSizeTypes",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": ""
                        },
                        {
                            "name": "dayNames",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": ""
                        },
                        {
                            "name": "dayNamesShort",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": ""
                        },
                        {
                            "name": "dayNamesMin",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": ""
                        },
                        {
                            "name": "monthNames",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": ""
                        },
                        {
                            "name": "monthNamesShort",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": ""
                        },
                        {
                            "name": "chooseYear",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "chooseMonth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "chooseDate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "prevDecade",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "nextDecade",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "prevYear",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "nextYear",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "prevMonth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "nextMonth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "prevHour",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "nextHour",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "prevMinute",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "nextMinute",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "prevSecond",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "nextSecond",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "am",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "pm",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "today",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "weekHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "firstDayOfWeek",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": ""
                        },
                        {
                            "name": "showMonthAfterYear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "dateFormat",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "weak",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "medium",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "strong",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "passwordPrompt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "searchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "emptySearchMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "aria",
                            "optional": true,
                            "readonly": false,
                            "type": "PrimeVueLocaleAriaOptions",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PrimeVueChangeTheme": {
                    "values": "{}"
                }
            }
        }
    },
    "confirmationoptions": {
        "description": "[Live Demo](https://www.primevue.org/confirmdialog/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmationOptions": {
                    "description": "Confirmation Service options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "default": "",
                            "description": "Element to align the overlay."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header text of the dialog."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Message of the confirmation."
                        },
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\" | \"topleft\" | \"topright\" | \"bottomleft\" | \"bottomright\"",
                            "default": "center",
                            "description": "Position of the dialog."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display next to the message."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when dialog is visible."
                        },
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "reject",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onShow",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "onHide",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "acceptLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the accept button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "rejectLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the reject button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "acceptIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the accept button."
                        },
                        {
                            "name": "rejectIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the reject button."
                        },
                        {
                            "name": "acceptClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the accept button."
                        },
                        {
                            "name": "rejectClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the reject button."
                        },
                        {
                            "name": "defaultFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Element to receive the focus when the dialog gets visible, valid values are \"accept\" and \"reject\"."
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "confirmationservice-useconfirm": {
        "description": "[Live Demo](https://www.primevue.org/confirmdialog/)",
        "model": {
            "ConfirmationServiceMethods": {
                "description": "Confirmation Service methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "require",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": false,
                                    "type": "ConfirmationOptions",
                                    "description": "Confirmation Object"
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the dialog using the confirmation object options."
                        },
                        {
                            "name": "close",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the dialog without invoking accept or reject callbacks."
                        }
                    ]
                }
            }
        }
    },
    "confirmdialog": {
        "description": "ConfirmDialog uses a Dialog UI with confirmDialog method or <ConfirmDialog> tag.\n\n[Live Demo](https://www.primevue.org/confirmdialog)",
        "components": {
            "default": {
                "description": "ConfirmDialog uses a Dialog UI with confirmDialog method or <ConfirmDialog> tag.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmDialogPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmDialogProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmDialogState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmDialogProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmDialogState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ConfirmDialogProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header title's DOM element."
                        },
                        {
                            "name": "icons",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header icons' DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close button's component."
                        },
                        {
                            "name": "closeButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close button icon's component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the message's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "rejectButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<ConfirmDialogSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "acceptButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<ConfirmDialogSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogState": {
                    "description": "Defines current inline state in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "confirmation",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current confirmation message."
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogBreakpoints": {
                    "description": "Breakpoint metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogProps": {
                    "description": "Defines valid properties in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmDialogBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables dragging to change the position using header."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ConfirmDialogPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ConfirmDialogSlots": {
                    "description": "Defines valid slots in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "message",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">ConfirmationOptions</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n }",
                                    "description": "message slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message template."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon template</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "accepticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "rejecticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClose</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Close dialog function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name line-through\">onAccept</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Accept function of the component</span>\n\t <span class=\"ml-3 doc-option-parameter-name line-through\">onReject</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Reject function of the component</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close dialog function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">acceptCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Accept function of the component</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">rejectCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Reject function of the component</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "ConfirmDialogEmits": {
                    "description": "Defines valid emits in ConfirmDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ConfirmDialogPassThroughOptionType": {
                    "values": "ConfirmDialogPassThroughAttributes | (options: ConfirmDialogPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "confirmdialog/style/ConfirmDialogStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmDialogStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "confirmpopup": {
        "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.\n\n[Live Demo](https://www.primevue.org/confirmpopup)",
        "components": {
            "default": {
                "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmPopupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmPopupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmPopupState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmPopupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmPopupState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ConfirmPopupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the message's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "rejectButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<ConfirmPopupSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "acceptButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<ConfirmPopupSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ConfirmPopupPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupState": {
                    "description": "Defines current inline state in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "confirmation",
                            "optional": false,
                            "readonly": false,
                            "type": "ConfirmationOptions",
                            "default": "",
                            "description": "Current confirmation message."
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupProps": {
                    "description": "Defines valid properties in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Optional key to match the key of the confirmation, useful to target a specific confirm dialog instance."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ConfirmPopupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ConfirmPopupSlots": {
                    "description": "Defines valid slots in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "message",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">ConfirmationOptions</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n }",
                                    "description": "message slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message template."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon template</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "accepticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "rejecticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onAccept</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Accept function of the component</span>\n\t <span class=\"ml-3 doc-option-parameter-name line-through\">onReject</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Reject function of the component</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">acceptCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Accept function of the component</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">rejectCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Reject function of the component</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "ConfirmPopupEmits": {
                    "description": "Defines valid emits in ConfirmPopup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ConfirmPopupPassThroughOptionType": {
                    "values": "ConfirmPopupPassThroughAttributes | (options: ConfirmPopupPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ConfirmPopupPassThroughTransitionType": {
                    "values": "TransitionProps | (options: ConfirmPopupPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "confirmpopup/style/ConfirmPopupStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ConfirmPopupStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "contextmenu": {
        "description": "ContextMenu displays an overlay menu on right click of its target. Note that components like DataTable has special integration with ContextMenu.\nRefer to documentation of the individual documentation of the with context menu support.\n\n[Live Demo](https://www.primevue.org/contextmenu/)",
        "components": {
            "default": {
                "description": "ContextMenu displays an overlay menu on right click of its target. Note that components like DataTable has special integration with ContextMenu.\nRefer to documentation of the individual documentation of the with context menu support.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the menu."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the menu."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the menu."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ContextMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ContextMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ContextMenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "submenu",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ContextMenuPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ContextMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ContextMenuFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item index"
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item level"
                        },
                        {
                            "name": "parentKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Parent key info"
                        }
                    ],
                    "methods": []
                },
                "ContextMenuState": {
                    "description": "Defines current inline state in ContextMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedItemInfo",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuFocusedItemInfo",
                            "default": "",
                            "description": "Current focused item info."
                        },
                        {
                            "name": "activeItemPath",
                            "optional": false,
                            "readonly": false,
                            "type": "ContextMenuFocusedItemInfo[]",
                            "default": "",
                            "description": "Active item path."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "submenuVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current submenu visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ContextMenuContext": {
                    "description": "Defines current options in ContextMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem"
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ContextMenuRouterBindProps": {
                    "description": "Defines valid router binding props in ContextMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        },
                        {
                            "name": "submenuicon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Submenuicon elemnt binding"
                        }
                    ],
                    "methods": []
                },
                "ContextMenuProps": {
                    "description": "Defines valid properties in ContextMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "global",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Attaches the menu to document instead of a particular item."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path.",
                            "deprecated": "since v3.40.0."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ContextMenuPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ContextMenuSlots": {
                    "description": "Defines valid slots in ContextMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">ContextMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        },
                        {
                            "name": "submenuicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is active</span>\n }",
                                    "description": "submenuicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom submenu icon template."
                        }
                    ]
                },
                "ContextMenuEmits": {
                    "description": "Defines valid emits in ContextMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is hidden."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ContextMenuPassThroughOptionType": {
                    "values": "ContextMenuPassThroughAttributes | (options: ContextMenuPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ContextMenuPassThroughTransitionType": {
                    "values": "TransitionProps | (options: ContextMenuPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "contextmenu/style/ContextMenuStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ContextMenuStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "datatable": {
        "description": "DataTable displays data in tabular format.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "DataTable displays data in tabular format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "exportCSV",
                            "parameters": [
                                {
                                    "name": "options",
                                    "type": "DataTableExportCSVOptions",
                                    "description": "Export options."
                                },
                                {
                                    "name": "data",
                                    "type": "any[]",
                                    "description": "Custom exportable data. This param can be used on lazy dataTable."
                                }
                            ],
                            "returnType": "void",
                            "description": "Exports the data to CSV format."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataTablePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DataTableSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "DataTableExportFunctionOptions": {
                    "description": "Custom datatable export metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data"
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Column Field"
                        }
                    ],
                    "methods": []
                },
                "DataTableFilterMetaData": {
                    "description": "Custom datatable filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filter value"
                        },
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Filter match mode"
                        }
                    ],
                    "methods": []
                },
                "DataTableOperatorFilterMetaData": {
                    "description": "Custom datatable operator filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "operator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter operator"
                        },
                        {
                            "name": "constraints",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMetaData[]",
                            "default": "",
                            "description": "Array of filter meta datas."
                        }
                    ],
                    "methods": []
                },
                "DataTableFilterMeta": {
                    "description": "Custom datatable filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string | DataTableFilterMetaData | DataTableOperatorFilterMetaData"
                        }
                    ],
                    "methods": []
                },
                "DataTableSortMeta": {
                    "description": "Custom datatable sort meta.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Column field"
                        },
                        {
                            "name": "order",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Column sort order"
                        }
                    ],
                    "methods": []
                },
                "DataTableExpandedRows": {
                    "description": "Custom datatable expanded rows.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "methods": []
                },
                "DataTableEditingRows": {
                    "description": "Custom datatable editing rows.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean"
                        }
                    ],
                    "methods": []
                },
                "DataTableExportCSVOptions": {
                    "description": "Custom datatable export csv metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selectionOnly",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to export only selection data."
                        }
                    ],
                    "methods": []
                },
                "DataTableSortEvent": {
                    "description": "Custom sort event.",
                    "relatedProp": "DataTableEmits.sort",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTablePageEvent,DataTableFilterEvent"
                },
                "DataTablePageEvent": {
                    "description": "Custom pagination event.",
                    "relatedProp": "DataTableEmits.page",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total page count"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableSortEvent"
                },
                "DataTableFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "DataTableEmits.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "filteredValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filtered collection (non-lazy only)"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableSortEvent"
                },
                "DataTableRowClickEvent": {
                    "description": "Custom row click event.",
                    "relatedProp": "DataTableEmits['row-click']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowDoubleClickEvent,DataTableRowContextMenuEvent"
                },
                "DataTableRowDoubleClickEvent": {
                    "description": "Custom row double click event.",
                    "relatedProp": "DataTableEmits['row-dblclick']]",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowClickEvent"
                },
                "DataTableRowContextMenuEvent": {
                    "description": "Custom row context menu event.",
                    "relatedProp": "DataTableEmits['row-contextmenu']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowClickEvent"
                },
                "DataTableRowSelectEvent": {
                    "description": "Custom row select event.",
                    "relatedProp": "DataTableEmits['row-select']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index"
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the selection, valid values are 'row', 'radio' or 'checkbox'."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowUnselectEvent"
                },
                "DataTableRowUnselectEvent": {
                    "description": "Custom row unselect event.",
                    "relatedProp": "DataTableEmits['row-unselect']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row data"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Row index"
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the selection, valid values are 'row', 'radio' or 'checkbox'."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowSelectEvent"
                },
                "DataTableRowSelectAllEvent": {
                    "description": "Custom row select all event.",
                    "relatedProp": "DataTableEmits['row-select-all']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected dataset"
                        }
                    ],
                    "methods": []
                },
                "DataTableRowUnselectAllEvent": {
                    "description": "Custom row unselect all event.",
                    "relatedProp": "DataTableEmits['row-unselect-all']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        }
                    ],
                    "methods": []
                },
                "DataTableSelectAllChangeEvent": {
                    "description": "Custom row select all change event.",
                    "relatedProp": "DataTableEmits['select-all-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether all data is selected."
                        }
                    ],
                    "methods": []
                },
                "DataTableColumnResizeEndEvent": {
                    "description": "Custom column resize end event.",
                    "relatedProp": "DataTableEmits['column-resize-end']",
                    "props": [
                        {
                            "name": "element",
                            "optional": false,
                            "readonly": false,
                            "type": "HTMLElement",
                            "default": "",
                            "description": "DOM element of the resized column."
                        },
                        {
                            "name": "delta",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Change in column width"
                        }
                    ],
                    "methods": []
                },
                "DataTableColumnReorderEvent": {
                    "description": "Custom row column reorder event.",
                    "relatedProp": "DataTableEmits['column-reorder']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "dragIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dragged column"
                        },
                        {
                            "name": "dropIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dropped column"
                        }
                    ],
                    "methods": []
                },
                "DataTableRowReorderEvent": {
                    "description": "Custom row reorder event.",
                    "relatedProp": "DataTableEmits['row-reorder']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "dragIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dragged row"
                        },
                        {
                            "name": "dropIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the dropped row"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Reordered value"
                        }
                    ],
                    "methods": []
                },
                "DataTableRowExpandEvent": {
                    "description": "Custom row expand event.",
                    "relatedProp": "DataTableEmits['row-expand']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Expanded row data"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowCollapseEvent"
                },
                "DataTableRowCollapseEvent": {
                    "description": "Custom row collapse event.",
                    "relatedProp": "DataTableEmits['row-expand']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Expanded row data"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowExpandEvent"
                },
                "DataTableCellEditInitEvent": {
                    "description": "Custom cell edit init event.",
                    "relatedProp": "DataTableEmits['cell-edit-init']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableCellEditCancelEvent"
                },
                "DataTableCellEditCancelEvent": {
                    "description": "Custom cell edit cancel event.",
                    "relatedProp": "DataTableEmits['cell-edit-cancel']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableCellEditInitEvent"
                },
                "DataTableCellEditCompleteEvent": {
                    "description": "Custom cell edit complete event.",
                    "relatedProp": "DataTableEmits['cell-edit-complete']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Field value of row data to edit."
                        },
                        {
                            "name": "newValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Field value of new row data after editing."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of completion such as 'enter', 'outside' or 'tab'."
                        }
                    ],
                    "methods": []
                },
                "DataTableRowEditInitEvent": {
                    "description": "Custom row edit init event.",
                    "relatedProp": "DataTableEmits['row-edit-init']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "DataTableRowEditSaveEvent,DataTableRowEditCancelEvent"
                },
                "DataTableRowEditSaveEvent": {
                    "description": "Custom row edit save event.",
                    "relatedProp": "DataTableEmits['row-edit-save']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowEditInitEvent"
                },
                "DataTableRowEditCancelEvent": {
                    "description": "Custom row edit cancel event.",
                    "relatedProp": "DataTableEmits['row-edit-cancel']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Row data to edit."
                        },
                        {
                            "name": "newData",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "New row data after editing."
                        },
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field name of the row data."
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the row data to edit."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "DataTableRowEditInitEvent"
                },
                "DataTableStateEvent": {
                    "description": "Custom state event.",
                    "relatedProp": "DataTableEmits['state-save']",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | DataTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "columWidths",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Comma separated list of column widths"
                        },
                        {
                            "name": "columnOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Order of the columns"
                        },
                        {
                            "name": "expandedRows",
                            "optional": false,
                            "readonly": false,
                            "type": "any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "Instances of rows in expanded state"
                        },
                        {
                            "name": "expandedRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Keys of rows in expanded state"
                        },
                        {
                            "name": "expandedRowGroups",
                            "optional": false,
                            "readonly": false,
                            "type": "any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "Instances of rows in expanded state"
                        },
                        {
                            "name": "selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected rows"
                        },
                        {
                            "name": "selectionKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Keys of selected rows"
                        }
                    ],
                    "methods": []
                },
                "DataTablePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DataTableProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "loadingOverlay",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading overlay's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<DataTableSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Paginator component."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "table",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "virtualScrollerSpacer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the virtual scroller spacer's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "thead",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thead's DOM element."
                        },
                        {
                            "name": "headerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header row's DOM element."
                        },
                        {
                            "name": "tbody",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the tbody's DOM element."
                        },
                        {
                            "name": "rowGroupHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rowgroup header's DOM element."
                        },
                        {
                            "name": "rowGroupHeaderCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rowgroup header cell's DOM element."
                        },
                        {
                            "name": "bodyRow",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the body row's DOM element."
                        },
                        {
                            "name": "rowExpansion",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row expansion's DOM element."
                        },
                        {
                            "name": "rowExpansionCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row expansion cell's DOM element."
                        },
                        {
                            "name": "rowGroupFooter",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rowgroup footer's DOM element."
                        },
                        {
                            "name": "rowGroupFooterCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rowgroup footer cell's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "emptyMessageCell",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message cell's DOM element."
                        },
                        {
                            "name": "tfoot",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the tfoot's DOM element."
                        },
                        {
                            "name": "footerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer row's DOM element."
                        },
                        {
                            "name": "resizeHelper",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the resize helper's DOM element."
                        },
                        {
                            "name": "reorderIndicatorUp",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the reorder indicator up's DOM element."
                        },
                        {
                            "name": "reorderIndicatorDown",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the reorder indicator down's DOM element."
                        },
                        {
                            "name": "columnGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the ColumnGroup helper components."
                        },
                        {
                            "name": "row",
                            "optional": true,
                            "readonly": false,
                            "type": "RowPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the Row helper components."
                        },
                        {
                            "name": "column",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the Column helper components."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTablePassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "DataTablePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DataTableState": {
                    "description": "Defines current inline state in DataTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of first record as a number."
                        },
                        {
                            "name": "d_rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current number of rows to display in new page as a number."
                        },
                        {
                            "name": "d_sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Current sort field."
                        },
                        {
                            "name": "d_sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current order to sort the data by default."
                        },
                        {
                            "name": "d_multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableSortMeta[]",
                            "default": "",
                            "description": "Current sortmeta objects to sort the data."
                        },
                        {
                            "name": "d_groupRowsSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableSortMeta",
                            "default": "",
                            "description": "Current group sortmeta objects to sort the data."
                        },
                        {
                            "name": "d_selectionKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current keys of selected rows."
                        },
                        {
                            "name": "d_expandedRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current keys of rows in expanded state."
                        },
                        {
                            "name": "d_columnOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Current order of the columns."
                        },
                        {
                            "name": "d_editingRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current keys of editing rows."
                        },
                        {
                            "name": "d_editingMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Current editing meta data."
                        },
                        {
                            "name": "d_filters",
                            "optional": false,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Current filters object."
                        },
                        {
                            "name": "d_editing",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current editing as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DataTableContext": {
                    "description": "Defines current options in DataTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the row."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selectable state of row as a boolean."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selected state of row as a boolean."
                        },
                        {
                            "name": "stripedRows",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current stripedRows state of row as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DataTableProps": {
                    "description": "Defines valid properties in DataTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first row to be displayed."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are 'top','bottom' or 'both'."
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. It can be customized using the template property using the predefined keys.\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state. Available placeholders are the following;\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The icon to show while indicating data load is in progress.",
                            "deprecated": "since v3.27.0. Use 'loadingicon' slot."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or a getter function of a row data used for sorting by default"
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "nullSortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Determines how null values are sorted."
                        },
                        {
                            "name": "defaultSortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Default sort order of an unsorted column."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableSortMeta[]",
                            "default": "",
                            "description": "An array of SortMeta objects to sort the data."
                        },
                        {
                            "name": "sortMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "single",
                            "description": "Defines whether sorting works on single column or on multiple columns."
                        },
                        {
                            "name": "removableSort",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can have an un-sorted state."
                        },
                        {
                            "name": "filters",
                            "optional": true,
                            "readonly": false,
                            "type": "DataTableFilterMeta",
                            "default": "",
                            "description": "Filters object with key-value pairs to define the filters."
                        },
                        {
                            "name": "filterDisplay",
                            "optional": true,
                            "readonly": false,
                            "type": "\"menu\" | \"row\"",
                            "default": "",
                            "description": "Layout of the filter elements."
                        },
                        {
                            "name": "globalFilterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Fields for global filter"
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row in single mode or an array of values in multiple mode."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "",
                            "description": "Specifies the selection mode."
                        },
                        {
                            "name": "compareSelectionBy",
                            "optional": true,
                            "readonly": false,
                            "type": "\"equals\" | \"deepEquals\"",
                            "default": "deepEquals",
                            "description": "Algorithm to define if a row is selected."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines whether metaKey is requred or not for the selection. When true metaKey needs to be pressed to select or unselect an item and\nwhen set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "contextMenu",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Enables context menu integration."
                        },
                        {
                            "name": "contextMenuSelection",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected row instance with the ContextMenu."
                        },
                        {
                            "name": "selectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<boolean>",
                            "default": "",
                            "description": "Whether all data is selected."
                        },
                        {
                            "name": "rowHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, background of the rows change on hover."
                        },
                        {
                            "name": "csvSeparator",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ",",
                            "description": "Character to use as the csv separator."
                        },
                        {
                            "name": "exportFilename",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "download",
                            "description": "Name of the exported file."
                        },
                        {
                            "name": "exportFunction",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "resizableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be resized using drag and drop."
                        },
                        {
                            "name": "columnResizeMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"expand\" | \"fit\"",
                            "default": "fit",
                            "description": "Defines whether the overall table width."
                        },
                        {
                            "name": "reorderableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be reordered using drag and drop."
                        },
                        {
                            "name": "expandedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "A collection of row data display as expanded."
                        },
                        {
                            "name": "expandedRowIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the row toggler to display the row as expanded.",
                            "deprecated": "since v3.27.0. Use 'rowtogglericon' slot."
                        },
                        {
                            "name": "collapsedRowIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the row toggler to display the row as collapsed.",
                            "deprecated": "since v3.27.0. Use 'rowtogglericon' slot."
                        },
                        {
                            "name": "rowGroupMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"rowspan\" | \"subheader\"",
                            "default": "",
                            "description": "Defines the row group mode."
                        },
                        {
                            "name": "groupRowsBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string | string[] | Function",
                            "default": "",
                            "description": "One or more field names to use in row grouping."
                        },
                        {
                            "name": "expandableRowGroups",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the row groups can be expandable."
                        },
                        {
                            "name": "expandedRowGroups",
                            "optional": true,
                            "readonly": false,
                            "type": "any[] | DataTableExpandedRows",
                            "default": "",
                            "description": "An array of group field values whose groups would be rendered as expanded."
                        },
                        {
                            "name": "stateStorage",
                            "optional": true,
                            "readonly": false,
                            "type": "\"local\" | \"session\"",
                            "default": "session",
                            "description": "Defines where a stateful table keeps its state."
                        },
                        {
                            "name": "stateKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of a stateful table to use in state storage."
                        },
                        {
                            "name": "editMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"cell\" | \"row\"",
                            "default": "",
                            "description": "Defines the incell editing mode."
                        },
                        {
                            "name": "editingRows",
                            "optional": true,
                            "readonly": false,
                            "type": "any[] | DataTableEditingRows",
                            "default": "",
                            "description": "A collection of rows to represent the current editing data in row edit mode."
                        },
                        {
                            "name": "rowClass",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "rowStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, enables horizontal and/or vertical scrolling."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"flex\">",
                            "default": "",
                            "description": "Height of the scroll viewport in fixed pixels or the 'flex' keyword for a dynamic size."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it.\nNote: Currently only vertical orientation mode is supported."
                        },
                        {
                            "name": "frozenValue",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[]",
                            "default": "",
                            "description": "Items of the frozen part in scrollable DataTable."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary when using stack responsive layout."
                        },
                        {
                            "name": "showGridlines",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show grid lines between cells."
                        },
                        {
                            "name": "stripedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "highlightOnSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Highlights automatically the first item."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the table."
                        },
                        {
                            "name": "tableStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the table element."
                        },
                        {
                            "name": "tableClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the table element."
                        },
                        {
                            "name": "tableProps",
                            "optional": true,
                            "readonly": false,
                            "type": "TableHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the TableHTMLAttributes to table element inside the component."
                        },
                        {
                            "name": "filterInputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable filter input element inside the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DataTablePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DataTableSlots": {
                    "description": "Defines valid slots in DataTable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "paginatorstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator start template."
                        },
                        {
                            "name": "paginatorend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator end template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "groupheader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index</span>\n }",
                                    "description": "group header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom group header template."
                        },
                        {
                            "name": "groupfooter",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index</span>\n }",
                                    "description": "group footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom group footer template."
                        },
                        {
                            "name": "loading",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading template."
                        },
                        {
                            "name": "expansion",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">data</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Row data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Row index</span>\n }",
                                    "description": "expansion slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom expansion template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "reorderindicatorupicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom reorder indicator up icon template."
                        },
                        {
                            "name": "reorderindicatordownicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom reorder indicator down icon template."
                        },
                        {
                            "name": "rowgrouptogglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current rowgroup's expanded state.</span>\n }",
                                    "description": "rowgroup toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom rowgroup toggler icon template."
                        },
                        {
                            "name": "paginatorfirstpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator first page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator first page link icon template."
                        },
                        {
                            "name": "paginatorprevpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator prev page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator previous page link icon template."
                        },
                        {
                            "name": "paginatornextpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator next page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator next page link icon template."
                        },
                        {
                            "name": "paginatorlastpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator last page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator last page link icon template."
                        },
                        {
                            "name": "paginatorrowsperpagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator rows per page dropdown icon.</span>\n }",
                                    "description": "paginatorrowsperpagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginatorrowsperpagedropdownicon template."
                        },
                        {
                            "name": "paginatorjumptopagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator jump to page dropdown icon.</span>\n }",
                                    "description": "paginatorjumptopagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginatorjumptopagedropdownicon template."
                        }
                    ]
                },
                "DataTableEmits": {
                    "description": "Defines valid emits in Datatable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        },
                        {
                            "name": "update:sortField",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortField changes."
                        },
                        {
                            "name": "update:sortOrder",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortOrder changes."
                        },
                        {
                            "name": "update:multiSortMeta",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | null | DataTableSortMeta[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the multiSortMeta changes."
                        },
                        {
                            "name": "update:selection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection changes."
                        },
                        {
                            "name": "update:contextMenuSelection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the contextMenuSelection changes."
                        },
                        {
                            "name": "update:expandedRows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[] | DataTableExpandedRows",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expandedRows changes."
                        },
                        {
                            "name": "update:expandedRowGroups",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[] | DataTableExpandedRows",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expandedRowGroups changes."
                        },
                        {
                            "name": "update:filters",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "DataTableFilterMeta",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the filters changes."
                        },
                        {
                            "name": "update:editingRows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[] | DataTableEditingRows",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the editingRows changes."
                        },
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTablePageEvent",
                                    "description": "Custom page event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on pagination. Sort and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "sort",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableSortEvent",
                                    "description": "Custom sort event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on sort. Page and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Event to emit after filtering, not triggered in lazy mode."
                        },
                        {
                            "name": "value-change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[]",
                                    "description": "Value displayed by the table."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke after filtering, sorting, pagination and cell editing to pass the rendered value."
                        },
                        {
                            "name": "row-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowClickEvent",
                                    "description": "Custom row click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is clicked."
                        },
                        {
                            "name": "row-dblclick",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowDoubleClickEvent",
                                    "description": "Custom row double click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is double clicked."
                        },
                        {
                            "name": "row-contextmenu",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowContextMenuEvent",
                                    "description": "Custom row context menu event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is selected with a ContextMenu."
                        },
                        {
                            "name": "row-select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowSelectEvent",
                                    "description": "Custom row select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is selected."
                        },
                        {
                            "name": "row-select-all",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowSelectAllEvent",
                                    "description": "Custom row select all event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when header checkbox is checked."
                        },
                        {
                            "name": "row-unselect-all",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowUnselectAllEvent",
                                    "description": "Custom row unselect all event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when header checkbox is unchecked."
                        },
                        {
                            "name": "row-unselect",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowUnselectEvent",
                                    "description": "Custom row unselect event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is unselected."
                        },
                        {
                            "name": "select-all-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableSelectAllChangeEvent",
                                    "description": "Custom select all change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all data is selected."
                        },
                        {
                            "name": "column-resize-end",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableColumnResizeEndEvent"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is resized."
                        },
                        {
                            "name": "column-reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableColumnReorderEvent",
                                    "description": "Custom column reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is reordered."
                        },
                        {
                            "name": "row-reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowReorderEvent",
                                    "description": "Custom row reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is reordered."
                        },
                        {
                            "name": "row-expand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowExpandEvent",
                                    "description": "Custom row expand event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is expanded."
                        },
                        {
                            "name": "row-collapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowCollapseEvent",
                                    "description": "Custom row collapse event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row is collapsed."
                        },
                        {
                            "name": "rowgroup-expand",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowExpandEvent",
                                    "description": "Custom row expand event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row group is expanded."
                        },
                        {
                            "name": "rowgroup-collapse",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowCollapseEvent",
                                    "description": "Custom row collapse event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a row group is collapsed."
                        },
                        {
                            "name": "cell-edit-init",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellEditInitEvent",
                                    "description": "Custom cell edit init."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when cell edit is initiated."
                        },
                        {
                            "name": "cell-edit-complete",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellEditCompleteEvent",
                                    "description": "Custom cell edit complete event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when cell edit is completed."
                        },
                        {
                            "name": "cell-edit-cancel",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableCellEditCancelEvent",
                                    "description": "Custom cell edit cancel event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when cell edit is cancelled with escape key."
                        },
                        {
                            "name": "row-edit-init",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditInitEvent",
                                    "description": "Custom row edit init event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when row edit is initiated."
                        },
                        {
                            "name": "row-edit-save",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditSaveEvent",
                                    "description": "Custom row edit save event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when row edit is saved."
                        },
                        {
                            "name": "row-edit-cancel",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableRowEditCancelEvent",
                                    "description": "Custom row edit cancel event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when row edit is cancelled."
                        },
                        {
                            "name": "state-restore",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableStateEvent",
                                    "description": "Custom state event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Invoked when a stateful table saves the state."
                        },
                        {
                            "name": "state-save",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataTableStateEvent",
                                    "description": "Custom state event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Invoked when a stateful table restores the state."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DataTablePassThroughOptionType": {
                    "values": "DataTablePassThroughAttributes | (options: DataTablePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "DataTablePassThroughTransitionType": {
                    "values": "TransitionProps | (options: DataTablePassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "datatable/style/DataTableStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataTableStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "dataview": {
        "description": "DataView displays data in grid or list layout with pagination and sorting features.\n\n[Live Demo](https://www.primevue.org/dataview/)",
        "components": {
            "default": {
                "description": "DataView displays data in grid or list layout with pagination and sorting features.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataViewPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DataViewSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "DataViewPageEvent": {
                    "description": "Custom page event.",
                    "relatedProp": "DataViewEmits.page",
                    "props": [
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total number of pages"
                        }
                    ],
                    "methods": []
                },
                "DataViewPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DataViewProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<DataViewSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Paginator component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "DataViewPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DataViewState": {
                    "description": "Defines current inline state in DataView component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of first record as a number."
                        },
                        {
                            "name": "d_rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current number of rows to display in new page as a number."
                        }
                    ],
                    "methods": []
                },
                "DataViewProps": {
                    "description": "Defines valid properties in DataView component. In addition to these, all properties of HTMLDivElement can be used in this component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"grid\" | \"list\"",
                            "default": "list",
                            "description": "Layout of the items, valid values are 'list' and 'grid'."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first record to render."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are 'top','bottom' or 'both'."
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. It can be customized using the template property using the predefined keys,\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state.\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or a getter function of data to use in sorting by default."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "dataKey",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string",
                            "default": "",
                            "description": "Name of the data that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DataViewPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DataViewSlots": {
                    "description": "Defines valid slots in DataView component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "empty",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">layout</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Layout of the items.</span>\n }",
                                    "description": "empty slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "paginatorstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator start template."
                        },
                        {
                            "name": "paginatorend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator end template."
                        },
                        {
                            "name": "list",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n }",
                                    "description": "list slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom list template."
                        },
                        {
                            "name": "grid",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n }",
                                    "description": "list slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom list template."
                        }
                    ]
                },
                "DataViewEmits": {
                    "description": "Defines valid slots in DataView component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        },
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DataViewPageEvent",
                                    "description": "Custom page event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when page changes, the event object contains information about the new state."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DataViewPassThroughOptionType": {
                    "values": "DataViewPassThroughAttributes | (options: DataViewPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "dataview/style/DataViewStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataViewStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "dataviewlayoutoptions": {
        "description": "The helper DataViewLayoutOptions component can be used to switch between the modes however this component is optional and you may use your own UI to switch modes as well.\n\n[Live Demo](https://www.primevue.org/dataview/)",
        "components": {
            "default": {
                "description": "The helper DataViewLayoutOptions component can be used to switch between the modes however this component is optional and you may use your own UI to switch modes as well.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataViewLayoutOptionsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DataViewLayoutOptionsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DataViewLayoutOptionsProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "listButton",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list button's DOM element."
                        },
                        {
                            "name": "listIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list icon's DOM element."
                        },
                        {
                            "name": "gridButton",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the grid button's DOM element."
                        },
                        {
                            "name": "gridIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DataViewLayoutOptionsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the grid icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "DataViewLayoutOptionsPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DataViewLayoutOptionsState": {
                    "description": "Defines current inline state in DataViewLayoutOptions component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "isListButtonPressed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current list button pressed state as a boolean."
                        },
                        {
                            "name": "isGridButtonPressed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current grid button pressed state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DataViewLayoutOptionsProps": {
                    "description": "Defines valid properties in DataViewLayoutOptions component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DataViewLayoutOptionsPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DataViewLayoutOptionsSlots": {
                    "description": "Defines valid slots in DataViewLayoutOptions component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "listicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom list icon template."
                        },
                        {
                            "name": "gridicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom grid icon template."
                        }
                    ]
                },
                "DataViewLayoutOptionsEmits": {
                    "description": "Defines valid emits in DataViewLayoutOptions component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DataViewLayoutOptionsPassThroughOptionType": {
                    "values": "DataViewLayoutOptionsPassThroughAttributes | (options: DataViewLayoutOptionsPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "dataviewlayoutoptions/style/DataViewLayoutOptionsStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DataViewLayoutOptionsStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "deferredcontent": {
        "description": "DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.\n\n[Live Demo](https://www.primevue.org/deferredcontent/)",
        "components": {
            "default": {
                "description": "DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DeferredContentPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DeferredContentProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DeferredContentState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DeferredContentPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DeferredContentProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DeferredContentPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "DeferredContentPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DeferredContentState": {
                    "description": "Defines current inline state in DeferredContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "loaded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current loaded state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DeferredContentProps": {
                    "description": "Defines valid props in DeferredContent component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DeferredContentPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DeferredContentSlots": {
                    "description": "Defines valid slots in DeferredContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        }
                    ]
                },
                "DeferredContentEmits": {
                    "description": "Defines valid emits in DeferredContent component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "load",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when deferred content is loaded."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DeferredContentPassThroughOptionType": {
                    "values": "DeferredContentPassThroughAttributes | (options: DeferredContentPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "deferredcontent/style/DeferredContentStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DeferredContentStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "dialog": {
        "description": "Dialog is a container to display content in an overlay window.\n\n[Live Demo](https://www.primevue.org/dialog)",
        "components": {
            "default": {
                "description": "Dialog is a container to display content in an overlay window.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DialogPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DialogProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DialogState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DialogPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DialogProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the header title's DOM element."
                        },
                        {
                            "name": "icons",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the header icons' DOM element."
                        },
                        {
                            "name": "maximizableButton",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the maximizable button's DOM element."
                        },
                        {
                            "name": "maximizableIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the maximizable icon's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the close button's component."
                        },
                        {
                            "name": "closeButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the close button icon's component."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogPassThroughTransitionType<T>",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "DialogPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DialogState": {
                    "description": "Defines current inline state in Dialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "containerVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state of the container as a boolean."
                        },
                        {
                            "name": "maximized",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current maximized state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DialogBreakpoints": {
                    "description": "Custom breakpoint metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "DialogProps": {
                    "description": "Defines valid properties in Dialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Title content of the dialog."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Footer content of the dialog."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the dialog."
                        },
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if background should be blocked when dialog is displayed."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style of the content section."
                        },
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the content section."
                        },
                        {
                            "name": "contentProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "rtl",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled dialog is displayed in RTL direction."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Adds a close icon to the header to hide the dialog."
                        },
                        {
                            "name": "dismissableMask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if clicking the modal background should hide the dialog."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the dialog."
                        },
                        {
                            "name": "showHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the header or not."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when dialog is visible."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\" | \"topleft\" | \"topright\" | \"bottomleft\" | \"bottomright\"",
                            "default": "center",
                            "description": "Position of the dialog."
                        },
                        {
                            "name": "maximizable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dialog can be displayed full screen."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "draggable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables dragging to change the position using header."
                        },
                        {
                            "name": "keepInViewPort",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Keeps dialog in the viewport when dragging."
                        },
                        {
                            "name": "minX",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0.",
                            "description": "Minimum value for the left coordinate of dialog in dragging."
                        },
                        {
                            "name": "minY",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Minimum value for the top coordinate of dialog in dragging."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the dialog gets attached."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style of the dynamic dialog."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dialog close button.",
                            "deprecated": "since v3.27.0. Use 'closeicon' slot."
                        },
                        {
                            "name": "maximizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dialog maximize button when dialog is not maximized.",
                            "deprecated": "since v3.27.0. Use 'maximizeicon' slot."
                        },
                        {
                            "name": "minimizeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dialog maximize button when dialog is minimized.",
                            "deprecated": "since v3.27.0. Use 'minimizeicon' slot."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DialogPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DialogSlots": {
                    "description": "Defines valid slots in Dialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the close icon</span>\n }",
                                    "description": "close icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "maximizeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">maximized</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Maximized state as a boolean</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the maximize icon</span>\n }",
                                    "description": "maximize icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom maximize icon template of dialog."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClose</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Close dialog function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name line-through\">onMaximize</span>: <span class=\"doc-option-parameter-type line-through\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Maximize/minimize dialog function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close dialog function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">maximizeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Maximize/minimize dialog function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "DialogEmits": {
                    "description": "Defines valid emits in Dialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:visible",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the visible changes."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog is hidden."
                        },
                        {
                            "name": "after-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke after dialog is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when dialog is shown."
                        },
                        {
                            "name": "maximize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when a dialog gets maximized."
                        },
                        {
                            "name": "unmaximize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when a dialog gets unmaximized."
                        },
                        {
                            "name": "dragend",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when a dialog drag completes."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DialogPassThroughOptionType": {
                    "values": "DialogPassThroughAttributes | (options: DialogPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "DialogPassThroughTransitionType": {
                    "values": "TransitionProps | (options: DialogPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "dialog/style/DialogStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DialogStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "dialogservice-usedialog": {
        "description": "[Live Demo](https://www.primevue.org/dynamicdialog/)",
        "model": {
            "DialogServiceMethods": {
                "description": "Dynamic Dialog components methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "open",
                            "parameters": [
                                {
                                    "name": "content",
                                    "optional": false,
                                    "type": "any",
                                    "description": "Dynamic component for content template"
                                },
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": "DynamicDialogOptions",
                                    "description": "DynamicDialog Object"
                                }
                            ],
                            "returnType": "DynamicDialogInstance",
                            "description": "Displays the dialog using the dynamic dialog object options."
                        }
                    ]
                }
            }
        }
    },
    "divider": {
        "description": "Divider is used to separate contents.\n\n[Live Demo](https://primevue.org/divider)",
        "components": {
            "default": {
                "description": "Divider is used to separate contents.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DividerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DividerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DividerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DividerProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DividerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DividerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "DividerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DividerProps": {
                    "description": "Defines valid properties in Divider component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "align",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "",
                            "description": "Alignment of the content."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the orientation, valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"dashed\" | \"dotted\" | \"solid\"",
                            "default": "solid",
                            "description": "Border style type."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DividerPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DividerSlots": {
                    "description": "Defines valid slots in Divider slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        }
                    ]
                },
                "DividerEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DividerPassThroughOptionType": {
                    "values": "DividerPassThroughAttributes | (options: DividerPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "divider/style/DividerStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DividerStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "dock": {
        "description": "Dock is a navigation component consisting of menuitems.\n\n[Live Demo](https://www.primevue.org/dock/)",
        "components": {
            "default": {
                "description": "Dock is a navigation component consisting of menuitems.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DockPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DockProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DockState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "DockContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DockPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DockProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "DockPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "DockPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DockState": {
                    "description": "Defines current inline state in Dock component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "currentIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index as a number."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current focused item index as a number."
                        }
                    ],
                    "methods": []
                },
                "DockContext": {
                    "description": "Defines current options in Dock component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the menuitem."
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DockTooltipOptions": {
                    "description": "Defines tooltip options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "event",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"focus\" | \"hover\"",
                            "default": "",
                            "description": "Event to show the tooltip, valid values are hover and focus."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of element."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DockRouterBindProps": {
                    "description": "Defines valid router binding props in Dock component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        }
                    ],
                    "methods": []
                },
                "DockProps": {
                    "description": "Defines valid properties in Dock component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the action items."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of element."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path.",
                            "deprecated": "since v3.40.0."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "DockTooltipOptions",
                            "default": "",
                            "description": "Whether to display the tooltip on items. The modifiers of Tooltip can be used like an object in it. Valid keys are 'event' and 'position'."
                        },
                        {
                            "name": "menuId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the menu."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DockPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DockSlots": {
                    "description": "Defines valid slots in Dock component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Custom content for item.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">DockRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item content."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Custom content for icon.</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon content."
                        }
                    ]
                },
                "DockEmits": {
                    "description": "Defines valid emits in Dock component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DockPassThroughOptionType": {
                    "values": "DockPassThroughAttributes | (options: DockPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "dock/style/DockStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DockStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "dropdown": {
        "description": "Dropdown also known as Select, is used to choose an item from a collection of options.\n\n[Live Demo](https://www.primevue.org/dropdown/)",
        "components": {
            "default": {
                "description": "Dropdown also known as Select, is used to choose an item from a collection of options.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DropdownPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "DropdownProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "DropdownState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "DropdownContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "DropdownChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "DropdownEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "DropdownFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "DropdownEmits.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "DropdownPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "DropdownProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the clear icon's DOM element."
                        },
                        {
                            "name": "trigger",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the trigger' DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "filterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the filter container's DOM element."
                        },
                        {
                            "name": "filterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the filter input's DOM element."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the filter icon's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "itemGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the item group's DOM element."
                        },
                        {
                            "name": "itemGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the item group label's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "itemLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the item label's DOM element."
                        },
                        {
                            "name": "checkIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the check icon's DOM element."
                        },
                        {
                            "name": "blankIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the bank icon's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "hiddenFirstFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden first focusable element's DOM element."
                        },
                        {
                            "name": "hiddenFilterResult",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden filter result's DOM element."
                        },
                        {
                            "name": "hiddenEmptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden empty message's DOM element."
                        },
                        {
                            "name": "hiddenSelectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden selected message's DOM element."
                        },
                        {
                            "name": "hiddenLastFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the hidden last focusable element's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughTransitionType<any>",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "DropdownPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "DropdownState": {
                    "description": "Defines current inline state in Dropdown component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current focused item index as a number."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter value state as a string."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DropdownContext": {
                    "description": "Defines current options in Dropdown component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selection state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "DropdownProps": {
                    "description": "Defines valid properties in Dropdown component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays a filter input at header."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"endsWith\" | \"startsWith\" | \"contains\">",
                            "default": "contains",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "filterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "editable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, custom value instead of predefined options can be entered using the editable input field."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Default text to display when no option is selected."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "showClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes | InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement/HTMLSpanElement to the focusable input element inside the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "filterInputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the filter input inside the component."
                        },
                        {
                            "name": "clearIconProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLElement to the clear icon inside the component.",
                            "deprecated": "since v3.26.0. Use 'pt' peroperty."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the dropdown is in loading state."
                        },
                        {
                            "name": "clearIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in clear button.",
                            "deprecated": "since v3.27.0. Use 'clearicon' slot."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dropdown.",
                            "deprecated": "since v3.27.0. Use 'dropdownicon' slot."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in filter input.",
                            "deprecated": "since v3.27.0. Use 'filtericon' slot."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in loading state.",
                            "deprecated": "since v3.27.0. Use 'loadingicon' slot."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when hiding the dropdown."
                        },
                        {
                            "name": "resetFilterOnClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when clicking on the clear icon."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "autoFilterFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the filter element when the overlay panel is shown."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "highlightOnSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the selected option will be add highlight class."
                        },
                        {
                            "name": "checkmark",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the selected option will be shown with a check mark."
                        },
                        {
                            "name": "filterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<DropdownPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DropdownSlots": {
                    "description": "Defines valid slots in Dropdown component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">placeholder</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Placeholder prop value</span>\n }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        },
                        {
                            "name": "indicator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template.",
                            "deprecated": "since v3.27.0. Use 'dropdownicon or loadingicon' slots."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template of panel."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template of panel."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option group slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option group template."
                        },
                        {
                            "name": "emptyfilter",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty filter template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// An array of objects to display for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">styleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">contentRef</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">el</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Referance of the content</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">getItemOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Options of the items</span>\n}",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "clearicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the clear icon</span>\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClick</span>: <span class=\"doc-option-parameter-type line-through\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Clear icon click function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">clearCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Clear icon click function.</span>\n}",
                                    "description": "clear icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom clear icon template."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the dropdown icon</span>\n }",
                                    "description": "dropdown icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom dropdown icon template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon</span>\n }",
                                    "description": "loading icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "filtericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the filter icon</span>\n }",
                                    "description": "filter icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter icon template."
                        }
                    ]
                },
                "DropdownEmits": {
                    "description": "Defines valid emits in Dropdown component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DropdownChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "DropdownFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filter input."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "DropdownPassThroughOptionType": {
                    "values": "DropdownPassThroughAttributes | (options: DropdownPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "DropdownPassThroughTransitionType": {
                    "values": "TransitionProps | (options: DropdownPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "dropdown/style/DropdownStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DropdownStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "dynamicdialog": {
        "description": "DynamicDialogs can be created dynamically with any component as the content using a DialogService.\n\n[Live Demo](https://primevue.org/dynamicdialog)",
        "components": {
            "default": {
                "description": "DynamicDialogs can be created dynamically with any component as the content using a DialogService.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DynamicDialogProps": {
                    "description": "Defines valid properties in DynamicDialog component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "DynamicDialogEmits": {
                    "description": "Defines valid emits in DynamicDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "DynamicDialogSlots": {
                    "description": "Defines valid slots in DynamicDialog component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "dynamicdialog/style/DynamicDialogStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DynamicDialogStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "dynamicdialogoptions": {
        "description": "[Live Demo](https://www.primevue.org/dynamicdialog/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "DynamicDialogTemplates": {
                    "description": "Custom dialog templates.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom footer template."
                        }
                    ],
                    "methods": []
                },
                "DynamicDialogCloseOptions": {
                    "description": "Dynamic Dialog close method options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom data object"
                        },
                        {
                            "name": "type",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"config-close\" | \"dialog-close\"",
                            "default": "",
                            "description": "Close type"
                        }
                    ],
                    "methods": []
                },
                "DynamicDialogOptions": {
                    "description": "Custom Dynamic Dialog options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": true,
                            "readonly": false,
                            "type": "DialogProps",
                            "default": "",
                            "description": "Dialog Props"
                        },
                        {
                            "name": "templates",
                            "optional": true,
                            "readonly": false,
                            "type": "DynamicDialogTemplates",
                            "default": "",
                            "description": "Dialog Slots"
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom data object"
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [
                        {
                            "name": "onClose",
                            "parameters": [
                                {
                                    "name": "options",
                                    "optional": true,
                                    "type": "DynamicDialogCloseOptions"
                                }
                            ],
                            "returnType": "void",
                            "description": "Closes the dialog."
                        }
                    ]
                },
                "DynamicDialogInstance": {
                    "description": "Custom Dynamic Dialog options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "content",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Dynamic component for content template"
                        },
                        {
                            "name": "options",
                            "optional": false,
                            "readonly": false,
                            "type": "DynamicDialogOptions",
                            "default": "",
                            "description": "Instance options"
                        },
                        {
                            "name": "data",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Custom data object"
                        },
                        {
                            "name": "close",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "editor": {
        "description": "Editor groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/editor/)",
        "components": {
            "default": {
                "description": "Editor groups a collection of contents in tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "EditorPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "EditorProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "EditorState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "EditorTextChangeEvent": {
                    "description": "Custom text change event.",
                    "relatedProp": "EditorEmits['text-change']",
                    "props": [
                        {
                            "name": "htmlValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current value as html."
                        },
                        {
                            "name": "textValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current value as text."
                        },
                        {
                            "name": "delta",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Representation of the change."
                        },
                        {
                            "name": "source",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Source of change. Will be either 'user' or 'api'."
                        },
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Text editor instance."
                        }
                    ],
                    "methods": []
                },
                "EditorSelectionChangeEvent": {
                    "description": "Custom selection change event.",
                    "relatedProp": "EditorEmits['selection-change']",
                    "props": [
                        {
                            "name": "htmlValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current value as html."
                        },
                        {
                            "name": "textValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current value as text."
                        },
                        {
                            "name": "range",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Representation of the selection boundaries."
                        },
                        {
                            "name": "oldRange",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Representation of the previous selection boundaries."
                        },
                        {
                            "name": "source",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Source of change. Will be either 'user' or 'api'."
                        },
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Text editor instance."
                        }
                    ],
                    "methods": []
                },
                "EditorLoadEvent": {
                    "description": "Custom load event.",
                    "relatedProp": "EditorEmits.load",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Text editor instance."
                        }
                    ],
                    "methods": []
                },
                "EditorPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "EditorProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "toolbar",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toolbar's DOM element."
                        },
                        {
                            "name": "formats",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the formats' DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option's DOM element."
                        },
                        {
                            "name": "bold",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the bold's DOM element."
                        },
                        {
                            "name": "italic",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the italic's DOM element."
                        },
                        {
                            "name": "underline",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the underline's DOM element."
                        },
                        {
                            "name": "color",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the color's DOM element."
                        },
                        {
                            "name": "background",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the background's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "select",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the select's DOM element."
                        },
                        {
                            "name": "link",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the link's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the image's DOM element."
                        },
                        {
                            "name": "codeBlock",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the code block's DOM element."
                        },
                        {
                            "name": "clean",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the clean's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "EditorPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "EditorPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "EditorState": {
                    "description": "Defines current inline state in Editor component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "reRenderColorKey",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Current rerendered color key as a number."
                        }
                    ],
                    "methods": []
                },
                "EditorProps": {
                    "description": "Defines valid properties in Editor component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the content."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when editor is empty."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to instantiate the editor to readonly mode."
                        },
                        {
                            "name": "formats",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Whitelist of formats to display, see  <a target=\"_blank\" href=\"https://quilljs.com/docs/formats/\">here</a>  for available options."
                        },
                        {
                            "name": "editorStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the container."
                        },
                        {
                            "name": "modules",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Modules configuration, see  <a target=\"_blank\" href=\"https://quilljs.com/docs/modules/\">here</a>  for available options."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<EditorPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "EditorSlots": {
                    "description": "Defines valid slots in Editor slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "toolbar",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "EditorEmits": {
                    "description": "Defines valid emits in Editor component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "text-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "EditorTextChangeEvent",
                                    "description": "Custom text change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when text of editor changes."
                        },
                        {
                            "name": "selection-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "EditorSelectionChangeEvent",
                                    "description": "Custom selection change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection of the text changes."
                        },
                        {
                            "name": "load",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "EditorLoadEvent",
                                    "description": "Custom load event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the quill modules are loaded."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "EditorPassThroughOptionType": {
                    "values": "EditorPassThroughAttributes | (options: EditorPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "editor/style/EditorStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "EditorStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "fieldset": {
        "description": "Fieldset is a grouping component with the optional content toggle feature.\n\n[Live Demo](https://www.primevue.org/fieldset/)",
        "components": {
            "default": {
                "description": "Fieldset is a grouping component with the optional content toggle feature.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FieldsetPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FieldsetProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "FieldsetState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "FieldsetToggleEvent": {
                    "description": "Custom toggle event.",
                    "relatedProp": "FieldsetEmits.toggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Collapsed state as a boolean"
                        }
                    ],
                    "methods": []
                },
                "FieldsetPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "FieldsetProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "legend",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the legend's DOM element."
                        },
                        {
                            "name": "toggler",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toggler's DOM element."
                        },
                        {
                            "name": "togglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toggler icon's DOM element."
                        },
                        {
                            "name": "legendTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the legend title's DOM element."
                        },
                        {
                            "name": "toggleableContent",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toggleable content's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "FieldsetPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "FieldsetPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "FieldsetState": {
                    "description": "Defines current inline state in Fieldset component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_collapsed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current collapsed state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "FieldsetProps": {
                    "description": "Defines valid properties in Fieldset component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "legend",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header text of the fieldset."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, content can toggled by clicking the legend."
                        },
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the default visibility state of the content."
                        },
                        {
                            "name": "toggleButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "AnchorHTMLAttributes",
                            "default": "",
                            "description": "Used to pass the custom value to read for the AnchorHTMLAttributes inside the component.",
                            "deprecated": "since v3.26.0. Use 'pt' property instead."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<FieldsetPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "FieldsetSlots": {
                    "description": "Defines valid slots in Fieldset slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "legend",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "togglericon",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "FieldsetEmits": {
                    "description": "Defines valid emits in Fildset component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:collapsed",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the collapsed changes."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FieldsetToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab gets expanded or collapsed."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FieldsetPassThroughOptionType": {
                    "values": "FieldsetPassThroughAttributes | (options: FieldsetPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "FieldsetPassThroughTransitionType": {
                    "values": "TransitionProps | (options: FieldsetPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "fieldset/style/FieldsetStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FieldsetStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "fileupload": {
        "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.\n\n[Live Demo](https://www.primevue.org/fileupload/)",
        "components": {
            "default": {
                "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FileUploadPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FileUploadProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "FileUploadState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "FileUploadSelectEvent": {
                    "description": "Custom select event.",
                    "relatedProp": "FileUploadEmits.select",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "List of selected files."
                        }
                    ],
                    "methods": []
                },
                "FileUploadBeforeUploadEvent": {
                    "description": "Custom before upload event.",
                    "relatedProp": "FileUploadEmits['before-upload']",
                    "props": [
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        },
                        {
                            "name": "formData",
                            "optional": false,
                            "readonly": false,
                            "type": "FormData",
                            "default": "",
                            "description": "FormData object."
                        }
                    ],
                    "methods": []
                },
                "FileUploadProgressEvent": {
                    "description": "Custom progress event.",
                    "relatedProp": "FileUploadEmits.progress",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "progress",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Calculated progress value."
                        }
                    ],
                    "methods": []
                },
                "FileUploadUploadEvent": {
                    "description": "Custom upload event.",
                    "relatedProp": "FileUploadEmits.upload",
                    "props": [
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File | File[]",
                            "default": "",
                            "description": "Files that are not uploaded."
                        }
                    ],
                    "methods": []
                },
                "FileUploadUploaderEvent": {
                    "description": "Custom uploader event.",
                    "relatedProp": "FileUploadEmits.uploader",
                    "props": [
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File | File[]",
                            "default": "",
                            "description": "List of selected files."
                        }
                    ],
                    "methods": []
                },
                "FileUploadErrorEvent": {
                    "description": "Custom error event.",
                    "relatedProp": "FileUploadEmits.error",
                    "props": [
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File | File[]",
                            "default": "",
                            "description": "Files that are not uploaded."
                        }
                    ],
                    "methods": []
                },
                "FileUploadBeforeSendEvent": {
                    "description": "Custom before send event.",
                    "relatedProp": "FileUploadEmits['before-send']",
                    "props": [
                        {
                            "name": "xhr",
                            "optional": false,
                            "readonly": false,
                            "type": "XMLHttpRequest",
                            "default": "",
                            "description": "XmlHttpRequest instance."
                        },
                        {
                            "name": "formData",
                            "optional": false,
                            "readonly": false,
                            "type": "FormData",
                            "default": "",
                            "description": "FormData object."
                        }
                    ],
                    "methods": []
                },
                "FileUploadRemoveEvent": {
                    "description": "Custom remove event.",
                    "relatedProp": "FileUploadEmits.remove",
                    "props": [
                        {
                            "name": "file",
                            "optional": false,
                            "readonly": false,
                            "type": "File",
                            "default": "",
                            "description": "Removed file."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "default": "",
                            "description": "Remaining files to be uploaded."
                        }
                    ],
                    "methods": []
                },
                "FileUploadRemoveUploadedFile": {
                    "description": "Custom remove upload file event.",
                    "relatedProp": "FileUploadEmits['remove-uploaded-file']",
                    "props": [
                        {
                            "name": "file",
                            "optional": false,
                            "readonly": false,
                            "type": "File",
                            "default": "",
                            "description": "Removed file."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "File[]",
                            "default": "",
                            "description": "Remaining files to be uploaded."
                        }
                    ],
                    "methods": []
                },
                "FileUploadPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "FileUploadProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "buttonbar",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the buttonbar's DOM element."
                        },
                        {
                            "name": "chooseButton",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the choose button's DOM element."
                        },
                        {
                            "name": "chooseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the choose icon's DOM element."
                        },
                        {
                            "name": "chooseButtonLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the choose button label's DOM element."
                        },
                        {
                            "name": "uploadButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<FileUploadPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the upload button's DOM element."
                        },
                        {
                            "name": "cancelButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<FileUploadPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the cancel button's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "progressbar",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the progressbar's DOM element."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptions<FileUploadPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the messages' DOM element."
                        },
                        {
                            "name": "file",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the file's DOM element."
                        },
                        {
                            "name": "thumbnail",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnail's DOM element."
                        },
                        {
                            "name": "details",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the details's DOM element."
                        },
                        {
                            "name": "fileName",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the fileName's DOM element."
                        },
                        {
                            "name": "fileSize",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the fileSize's DOM element."
                        },
                        {
                            "name": "badge",
                            "optional": true,
                            "readonly": false,
                            "type": "BadgePassThroughOptions<FileUploadPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Badge component."
                        },
                        {
                            "name": "actions",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the actions's DOM element."
                        },
                        {
                            "name": "removeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<FileUploadPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the remove button's DOM element."
                        },
                        {
                            "name": "empty",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "uploadIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "FileUploadPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the upload icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "FileUploadPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "FileUploadState": {
                    "description": "Defines current inline state in FileUpload component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "uploadedFileCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Current uploaded file count state as a number."
                        },
                        {
                            "name": "files",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current files."
                        },
                        {
                            "name": "messages",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current messages."
                        },
                        {
                            "name": "progress",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current progress state as a number."
                        },
                        {
                            "name": "uploadedFiles",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current uploaded files."
                        }
                    ],
                    "methods": []
                },
                "FileUploadProps": {
                    "description": "Defines valid properties in FileUpload component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the request parameter to identify the files at backend."
                        },
                        {
                            "name": "url",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Remote url to upload the files."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"basic\" | \"advanced\"",
                            "default": "advanced",
                            "description": "Defines the UI of the component, possible values are 'advanced' and 'basic'."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to select multiple files at once from file dialog."
                        },
                        {
                            "name": "accept",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Pattern to restrict the allowed file types such as 'image/*'."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Disables the upload functionality."
                        },
                        {
                            "name": "auto",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, upload begins automatically after selection is completed."
                        },
                        {
                            "name": "maxFileSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum file size allowed in bytes."
                        },
                        {
                            "name": "invalidFileSizeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ": Invalid file size, file size should be smaller than {1.}",
                            "description": "Message of the invalid fize size."
                        },
                        {
                            "name": "invalidFileLimitMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Maximum number of files to be uploaded is {0.}",
                            "description": "Message to display when number of files to be uploaded exceeeds the limit."
                        },
                        {
                            "name": "invalidFileTypeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0}: Invalid file type.'",
                            "description": "Message of the invalid fize type."
                        },
                        {
                            "name": "fileLimit",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of files that can be uploaded."
                        },
                        {
                            "name": "withCredentials",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates."
                        },
                        {
                            "name": "previewWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "50",
                            "description": "Width of the image thumbnail in pixels."
                        },
                        {
                            "name": "chooseLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the choose button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "uploadLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the upload button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "cancelLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "Cancel",
                            "description": "Label of the cancel button. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "customUpload",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to use the default upload or a manual implementation defined in uploadHandler callback. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "showUploadButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the upload button."
                        },
                        {
                            "name": "showCancelButton",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the cancel button."
                        },
                        {
                            "name": "chooseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the choose button.",
                            "deprecated": "since v3.27.0. Use 'chooseicon' slot."
                        },
                        {
                            "name": "uploadIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the upload button.",
                            "deprecated": "since v3.27.0. Use 'updateicon' slot."
                        },
                        {
                            "name": "cancelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the cancel button.",
                            "deprecated": "since v3.27.0. Use 'cancelicon' slot."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<FileUploadPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "FileUploadSlots": {
                    "description": "Defines valid slots in FileUpload slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">files</span>: <span class=\"doc-option-parameter-type\">File</span>, <span class=\"doc-option-parameter-type\">// Files to upload.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">uploadedFiles</span>: <span class=\"doc-option-parameter-type\">File</span>, <span class=\"doc-option-parameter-type\">// Uploaded files.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">chooseCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Choose function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">uploadCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Upload function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">clearCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Clear function</span>\n}",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header content template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">files</span>: <span class=\"doc-option-parameter-type\">File</span>, <span class=\"doc-option-parameter-type\">// Files to upload.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">uploadedFiles</span>: <span class=\"doc-option-parameter-type\">File</span>, <span class=\"doc-option-parameter-type\">// Uploaded files.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">removeUploadedFileCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Function to remove an uploaded file.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">removeFileCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Function to remove a file.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">progress</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Uploaded progress as number.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">messages</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Status messages about upload process.</span>\n }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom uploaded content template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content when there is no selected file."
                        },
                        {
                            "name": "chooseicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom choose icon template."
                        },
                        {
                            "name": "uploadicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom upload icon template."
                        },
                        {
                            "name": "cancelicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom cancel icon template."
                        },
                        {
                            "name": "fileremoveicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">file</span>: <span class=\"doc-option-parameter-type\">File</span>, <span class=\"doc-option-parameter-type\">// File to upload.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// The index of file</span>\n }",
                                    "description": "fileremoveicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom remove icon template for each file."
                        }
                    ]
                },
                "FileUploadEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "select",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadSelectEvent",
                                    "description": "Custom select event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when files are selected."
                        },
                        {
                            "name": "before-upload",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadBeforeUploadEvent",
                                    "description": "Custom before upload event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before file upload begins to customize the request such as post parameters before the files."
                        },
                        {
                            "name": "progress",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadProgressEvent",
                                    "description": "Custom progress event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when files are being uploaded."
                        },
                        {
                            "name": "upload",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadUploadEvent",
                                    "description": "Custom upload event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when file upload is complete."
                        },
                        {
                            "name": "uploader",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadUploaderEvent",
                                    "description": "Custom uploader event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke to implement a custom upload."
                        },
                        {
                            "name": "error",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadErrorEvent",
                                    "description": "Custom error event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke if file upload fails."
                        },
                        {
                            "name": "before-send",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadBeforeSendEvent",
                                    "description": "Custom before send event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke before file send begins to customize the request such as adding headers."
                        },
                        {
                            "name": "clear",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when files in queue are removed without uploading."
                        },
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadRemoveEvent",
                                    "description": "Custom remove event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a singe file is removed from the list."
                        },
                        {
                            "name": "removeUploadedFile",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "FileUploadRemoveUploadedFile",
                                    "description": "Custom uploaded file remove event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a single uploaded file is removed from the uploaded file list."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FileUploadPassThroughOptionType": {
                    "values": "FileUploadPassThroughAttributes | (options: FileUploadPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "fileupload/style/FileUploadStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FileUploadStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "floatlabel": {
        "description": "FloatLabel appears on top of the input field when focused.\n\n[Live Demo](https://www.primevue.org/inputtext/)",
        "components": {
            "default": {
                "description": "FloatLabel appears on top of the input field when focused.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FloatLabelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "FloatLabelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "FloatLabelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "FloatLabelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FloatLabelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "FloatLabelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "FloatLabelProps": {
                    "description": "Defines valid properties in FloatLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<FloatLabelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "FloatLabelSlots": {
                    "description": "Defines valid slots in FloatLabel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "FloatLabelEmits": {
                    "description": "Defines valid emits in FloatLabel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FloatLabelPassThroughOptionType": {
                    "values": "FloatLabelPassThroughAttributes | (options: FloatLabelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "FloatLabelPassThroughTransitionType": {
                    "values": "TransitionProps | (options: FloatLabelPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "floatlabel/style/FloatLabelStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FloatLabelStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "focustrap": {
        "description": "Focus Trap keeps focus within a certain DOM element while tabbing.\n\n[Live Demo](https://primevue.org/focustrap)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FocusTrapOptions": {
                    "description": "Defines options of FocusTrap.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the directive should be disabled."
                        },
                        {
                            "name": "autoFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When When disabled, focustrap will not focus by default."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<FocusTrapDirectivePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "FocusTrapDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "FocusTrapOptions.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "FocusTrapDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "firstFocusableElement",
                            "optional": true,
                            "readonly": false,
                            "type": "FocusTrapDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the first focusable element's DOM element."
                        },
                        {
                            "name": "lastFocusableElement",
                            "optional": true,
                            "readonly": false,
                            "type": "FocusTrapDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the last focusable element's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "DirectiveHooks<any, any>",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "FocusTrapDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "FocusTrapDirectiveBinding": {
                    "description": "Binding of FocusTrap directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "FocusTrapOptions",
                            "default": "",
                            "description": "Value of the FocusTrap."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "FocusTrapDirectivePassThroughOptionType": {
                    "values": "FocusTrapDirectivePassThroughAttributes | null | undefined"
                }
            }
        }
    },
    "focustrap/style/FocusTrapStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "FocusTrapStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "galleria": {
        "description": "Galleria is an advanced content gallery component.\n\n[Live Demo](https://www.primevue.org/galleria/)",
        "components": {
            "default": {
                "description": "Galleria is an advanced content gallery component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "GalleriaPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "GalleriaProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "GalleriaState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "GalleriaContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "GalleriaResponsiveOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "breakpoint",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Breakpoint for responsive mode. Exp;"
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The number of visible items on breakpoint."
                        }
                    ],
                    "methods": []
                },
                "GalleriaPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "GalleriaProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close icon's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "itemWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item wrapper's DOM element."
                        },
                        {
                            "name": "itemContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item container's DOM element."
                        },
                        {
                            "name": "previousItemButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous item button's DOM element."
                        },
                        {
                            "name": "previousItemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous item icon's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "nextItemButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next item button's DOM element."
                        },
                        {
                            "name": "nextItemIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next item icon's DOM element."
                        },
                        {
                            "name": "caption",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the caption's DOM element."
                        },
                        {
                            "name": "indicators",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicators's DOM element."
                        },
                        {
                            "name": "indicator",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicator's DOM element."
                        },
                        {
                            "name": "indicatorButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the indicator button's DOM element."
                        },
                        {
                            "name": "thumbnailWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnail wrapper's DOM element."
                        },
                        {
                            "name": "thumbnailContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnail container's DOM element."
                        },
                        {
                            "name": "previousThumbnailButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous thumbnail button's DOM element."
                        },
                        {
                            "name": "previousThumbnailIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous thumbnail icon's DOM element."
                        },
                        {
                            "name": "thumbnailItemsContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnail items container's DOM element."
                        },
                        {
                            "name": "thumbnailItems",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnail items' DOM element."
                        },
                        {
                            "name": "thumbnailItem",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnail item's DOM element."
                        },
                        {
                            "name": "thumbnailItemContent",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thumbnail item content's DOM element."
                        },
                        {
                            "name": "nextThumbnailButton",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next thumbnail button's DOM element."
                        },
                        {
                            "name": "nextThumbnailIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next thumbnail icon's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "GalleriaPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "GalleriaState": {
                    "description": "Defines current inline state in Galleria component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "containerVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current container visible state as a boolean."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style id of the component."
                        },
                        {
                            "name": "activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item as a number."
                        },
                        {
                            "name": "numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "3",
                            "description": "Number of items per page as a number."
                        },
                        {
                            "name": "slideShowActive",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current slide active state as a boolean."
                        },
                        {
                            "name": "d_numVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "3",
                            "description": "Number of items per page as a number."
                        },
                        {
                            "name": "d_oldNumVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "3",
                            "description": "Old number of items per page as a number."
                        },
                        {
                            "name": "d_activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Current active item index as a number."
                        },
                        {
                            "name": "d_oldActiveItemIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "The previous active item index as a number."
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "totalShiftedItems",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Total shifted items' count as a number."
                        }
                    ],
                    "methods": []
                },
                "GalleriaContext": {
                    "description": "Defines current inline options in Galleria component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "highlighted",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current highlighted state of the indicator as a boolean."
                        }
                    ],
                    "methods": []
                },
                "GalleriaProps": {
                    "description": "Defines valid properties in Galleria component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first item."
                        },
                        {
                            "name": "fullScreen",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display the component on fullscreen."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the mask on fullscreen mode."
                        },
                        {
                            "name": "numVisible",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "3",
                            "description": "Number of items per page."
                        },
                        {
                            "name": "responsiveOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "GalleriaResponsiveOptions[]",
                            "default": "",
                            "description": "An array of options for responsive design."
                        },
                        {
                            "name": "showItemNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display navigation buttons in item section."
                        },
                        {
                            "name": "showThumbnailNavigators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display navigation buttons in thumbnail container."
                        },
                        {
                            "name": "showItemNavigatorsOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display navigation buttons on item hover."
                        },
                        {
                            "name": "changeItemOnIndicatorHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, item is changed on indicator hover."
                        },
                        {
                            "name": "circular",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite."
                        },
                        {
                            "name": "autoPlay",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Items are displayed with a slideshow in autoPlay mode."
                        },
                        {
                            "name": "transitionInterval",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4000",
                            "description": "Time in milliseconds to scroll items."
                        },
                        {
                            "name": "showThumbnails",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display thumbnail container."
                        },
                        {
                            "name": "thumbnailsPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of thumbnails."
                        },
                        {
                            "name": "verticalThumbnailViewPortHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "300px",
                            "description": "Height of the viewport in vertical thumbnail."
                        },
                        {
                            "name": "showIndicators",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display indicator container."
                        },
                        {
                            "name": "showIndicatorsOnItem",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, indicator container is displayed on item container."
                        },
                        {
                            "name": "indicatorsPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of indicators."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "maskClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the mask on fullscreen mode."
                        },
                        {
                            "name": "containerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component on fullscreen mode. Otherwise, the 'style' property can be used."
                        },
                        {
                            "name": "containerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component on fullscreen mode. Otherwise, the 'class' property can be used."
                        },
                        {
                            "name": "containerProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the container element on fullscreen mode."
                        },
                        {
                            "name": "prevButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the previous navigation button."
                        },
                        {
                            "name": "nextButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the next navigation button."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaRoledescription",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that description for the role of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<GalleriaPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "GalleriaSlots": {
                    "description": "Defines valid slots in Galleria slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item instance</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "caption",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item instance</span>\n }",
                                    "description": "caption slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom caption template."
                        },
                        {
                            "name": "indicator",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the indicator item</span>\n }",
                                    "description": "indicator slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        },
                        {
                            "name": "thumbnail",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item instance</span>\n }",
                                    "description": "thumbnail slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom thumbnail template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "previousitemicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom navigator previous item icon template."
                        },
                        {
                            "name": "nextitemicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom navigator next item icon template."
                        },
                        {
                            "name": "previousthumbnailicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom thumbnail previous icon template."
                        },
                        {
                            "name": "nextthumbnailicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom thumbnail next item template."
                        }
                    ]
                },
                "GalleriaEmits": {
                    "description": "Defines valid emits in Galleria component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:activeIndex",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "Index of new active item."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the active index changes."
                        },
                        {
                            "name": "update:visible",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the visible changes."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "GalleriaPassThroughOptionType": {
                    "values": "GalleriaPassThroughAttributes | (options: GalleriaPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "GalleriaPassThroughTransitionType": {
                    "values": "TransitionProps | (options: GalleriaPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "galleria/style/GalleriaStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "GalleriaStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "iconfield": {
        "description": "IconField wraps an input and an icon.\n\n[Live Demo](https://www.primevue.org/inputtext/)",
        "components": {
            "default": {
                "description": "IconField is used to select a boolean value.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "IconFieldPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "IconFieldProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "IconFieldPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "IconFieldProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "IconFieldPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "IconFieldPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "IconFieldProps": {
                    "description": "Defines valid properties in IconField component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "iconPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "right",
                            "description": "Position of the icon"
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<IconFieldPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "IconFieldSlots": {
                    "description": "Defines valid slots in IconField component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot for content."
                        }
                    ]
                },
                "IconFieldEmits": {
                    "description": "Defines valid emits in IconField component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "IconFieldPassThroughOptionType": {
                    "values": "IconFieldPassThroughAttributes | (options: IconFieldPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "iconfield/style/IconField": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "IconFieldStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "icons/angledoubledown": {},
    "icons/angledoubleleft": {},
    "icons/angledoubleright": {},
    "icons/angledoubleup": {},
    "icons/angledown": {},
    "icons/angleleft": {},
    "icons/angleright": {},
    "icons/angleup": {},
    "icons/arrowdown": {},
    "icons/arrowup": {},
    "icons/ban": {},
    "icons/bars": {},
    "icons/blank": {},
    "icons/calendar": {},
    "icons/check": {},
    "icons/chevrondown": {},
    "icons/chevronleft": {},
    "icons/chevronright": {},
    "icons/chevronup": {},
    "icons/exclamationtriangle": {},
    "icons/eye": {},
    "icons/eyeslash": {},
    "icons/filter": {},
    "icons/filterslash": {},
    "icons": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "IconProps": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "spin",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "IconSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "IconEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        }
    },
    "icons/infocircle": {},
    "icons/minus": {},
    "icons/pencil": {},
    "icons/plus": {},
    "icons/refresh": {},
    "icons/search": {},
    "icons/searchminus": {},
    "icons/searchplus": {},
    "icons/sortalt": {},
    "icons/sortamountdown": {},
    "icons/sortamountupalt": {},
    "icons/spinner": {},
    "icons/star": {},
    "icons/starfill": {},
    "icons/thlarge": {},
    "icons/times": {},
    "icons/timescircle": {},
    "icons/trash": {},
    "icons/undo": {},
    "icons/upload": {},
    "icons/windowmaximize": {},
    "icons/windowminimize": {},
    "image": {
        "description": "Displays an image with preview and tranformation options. For multiple image, see Galleria.\n\n[Live Demo](https://www.primevue.org/image/)",
        "components": {
            "default": {
                "description": "Displays an image with preview and tranformation options. For multiple image, see Galleria.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when the preview overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when the preview overlay is hidden."
                        },
                        {
                            "name": "error",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Triggered when an error occurs while loading an image file."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ImagePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ImageProps",
                            "default": "",
                            "description": "ˆ\nDefines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ImageState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ImagePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ImageProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "image",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the image's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "toolbar",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toolbar's DOM element."
                        },
                        {
                            "name": "rotateRightButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rotate right button's DOM element."
                        },
                        {
                            "name": "rotateRightIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rotate right icon's DOM element."
                        },
                        {
                            "name": "rotateLeftButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rotate left button's DOM element."
                        },
                        {
                            "name": "rotateLeftIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the rotate left icon's DOM element."
                        },
                        {
                            "name": "zoomOutButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the zoom out button's DOM element."
                        },
                        {
                            "name": "zoomOutIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the zoom out icon's DOM element."
                        },
                        {
                            "name": "zoomInButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the zoom in button's DOM element."
                        },
                        {
                            "name": "zoomInIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the zoom in icon's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close icon's DOM element."
                        },
                        {
                            "name": "previewContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the preview container's DOM element."
                        },
                        {
                            "name": "preview",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the preview's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ImagePassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ImagePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ImageState": {
                    "description": "Defines current inline state in Image component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "maskVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Mask visible state as a boolean."
                        },
                        {
                            "name": "previewVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Preview visible state as a boolean."
                        },
                        {
                            "name": "rotate",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Rotate state as a number."
                        },
                        {
                            "name": "scale",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Scale state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ImageProps": {
                    "description": "Defines valid properties in Image component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "preview",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Controls the preview functionality."
                        },
                        {
                            "name": "imageStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the image element."
                        },
                        {
                            "name": "imageClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the image element."
                        },
                        {
                            "name": "indicatorIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Custom indicator icon.",
                            "deprecated": "since v3.27.0. Use 'indicator' slot."
                        },
                        {
                            "name": "zoomInDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Disable the zoom-in button"
                        },
                        {
                            "name": "zoomOutDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Disable the zoom-out button"
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ImagePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ImageSlots": {
                    "description": "Defines valid slots in Image slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "indicator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        },
                        {
                            "name": "refresh",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom refresh template."
                        },
                        {
                            "name": "undo",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom undo template."
                        },
                        {
                            "name": "zoomout",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom zoomout template."
                        },
                        {
                            "name": "zoomin",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom zoomin template."
                        },
                        {
                            "name": "close",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close template."
                        },
                        {
                            "name": "image",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the image element.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">style</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style of the image element.</span>\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onError</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Image error function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">errorCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Preview click function.</span>\n}",
                                    "description": "image slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom image template."
                        },
                        {
                            "name": "preview",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the preview image element.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">style</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style of the preview image element.</span>\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClick</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Preview click function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">previewCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Preview click function.</span>\n}",
                                    "description": "preview slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom preview template."
                        }
                    ]
                },
                "ImageEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ImagePassThroughOptionType": {
                    "values": "ImagePassThroughAttributes | (options: ImagePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ImagePassThroughTransitionType": {
                    "values": "TransitionProps | (options: ImagePassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "image/style/ImageStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ImageStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "inlinemessage": {
        "description": "InlineMessage component is useful in cases where a single message needs to be displayed related to an element such as forms. It has one property, severity of the message.\n\n[Live Demo](https://www.primevue.org/inlinemessage/)",
        "components": {
            "default": {
                "description": "InlineMessage component is useful in cases where a single message needs to be displayed related to an element such as forms. It has one property, severity of the message.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InlineMessagePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InlineMessageProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InlineMessageState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InlineMessagePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InlineMessageProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InlineMessagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "InlineMessagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "InlineMessagePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the text's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InlineMessagePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InlineMessageState": {
                    "description": "Defines current inline state in InlineMessage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "InlineMessageProps": {
                    "description": "Defines valid properties in InlineMessage component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"error\" | \"success\" | \"secondary\" | \"info\" | \"contrast\" | \"warn\">",
                            "default": "info",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Display a custom icon for the message.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InlineMessagePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InlineMessageSlots": {
                    "description": "Defines valid slots in InlineMessage slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default custom slot."
                        },
                        {
                            "name": "icon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message icon template."
                        }
                    ]
                },
                "InlineMessageEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InlineMessagePassThroughOptionType": {
                    "values": "InlineMessagePassThroughAttributes | (options: InlineMessagePassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "inlinemessage/style/InlineMessageStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InlineMessageStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "inplace": {
        "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.\n\n[Live Demo](https://www.primevue.org/inplace)",
        "components": {
            "default": {
                "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplacePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InplaceSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InplaceState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "InplacePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InplaceProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the display's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "InplacePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<InplaceSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InplacePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InplaceState": {
                    "description": "Defines current inline state in Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "InplaceProps": {
                    "description": "Defines valid properties in Inplace component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a button to switch back to display mode."
                        },
                        {
                            "name": "active",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the content is displayed or not."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the close button.",
                            "deprecated": "since v3.27.0. Use 'closeicon' slot."
                        },
                        {
                            "name": "displayProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to display container."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the close button."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InplacePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InplaceSlots": {
                    "description": "Defines valid slots in Inplace component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "display",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom display template."
                        },
                        {
                            "name": "content",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        }
                    ]
                },
                "InplaceEmits": {
                    "description": "Defines valid emits in Inplace component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:active",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the active changes."
                        },
                        {
                            "name": "open",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when inplace is opened."
                        },
                        {
                            "name": "close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when inplace is closed."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InplacePassThroughOptionType": {
                    "values": "InplacePassThroughAttributes | (options: InplacePassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "inplace/style/InplaceStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InplaceStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "inputgroup": {
        "description": "InputGroup displays text, icon, buttons and other content can be grouped next to an input.\n\n[Live Demo](https://www.primevue.org/inputgroup/)",
        "components": {
            "default": {
                "description": "InputGroup displays text, icon, buttons and other content can be grouped next to an input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputGroupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputGroupProps": {
                    "description": "Defines valid properties in InputGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputGroupSlots": {
                    "description": "Defines valid slots in InputGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom default template."
                        }
                    ]
                },
                "InputGroupEmits": {
                    "description": "Defines valid emits in InputGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputGroupPassThroughOptionType": {
                    "values": "InputGroupPassThroughAttributes | (options: InputGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "inputgroup/style/InputGroupStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputGroupStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "inputgroupaddon": {
        "description": "InputGroupAddon displays text, icon, buttons and other content can be grouped next to an input.\n\n[Live Demo](https://www.primevue.org/inputgroup/)",
        "components": {
            "default": {
                "description": "InputGroupAddon displays text, icon, buttons and other content can be grouped next to an input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputGroupAddonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputGroupAddonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputGroupAddonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputGroupAddonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputGroupAddonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputGroupAddonProps": {
                    "description": "Defines valid properties in InputGroupAddon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputGroupAddonPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputGroupAddonSlots": {
                    "description": "Defines valid slots in InputGroupAddon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom default template."
                        }
                    ]
                },
                "InputGroupAddonEmits": {
                    "description": "Defines valid emits in InputGroupAddon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputGroupAddonPassThroughOptionType": {
                    "values": "InputGroupAddonPassThroughAttributes | (options: InputGroupAddonPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "inputgroupaddon/style/InputGroupAddonStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputGroupAddonStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "inputicon": {
        "description": "InputIcon displays an icon.\n\n[Live Demo](https://www.primevue.org/inputgroup/)",
        "components": {
            "default": {
                "description": "InputIcon displays text, icon, buttons and other content can be grouped next to an input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputIconPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputIconPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputIconProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputIconPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputIconPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputIconProps": {
                    "description": "Defines valid properties in InputIcon component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputIconPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputIconSlots": {
                    "description": "Defines valid slots in InputIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom default template."
                        }
                    ]
                },
                "InputIconEmits": {
                    "description": "Defines valid emits in InputIcon component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputIconPassThroughOptionType": {
                    "values": "InputIconPassThroughAttributes | (options: InputIconPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "inputicon/style/InputIcoonStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputIconStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "inputmask": {
        "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.\n\n[Live Demo](https://www.primevue.org/inputmask/)",
        "components": {
            "default": {
                "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputMaskPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputMaskProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "InputMaskContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputMaskPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputMaskProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputMaskPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputMaskPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputMaskContext": {
                    "description": "Defines current options in InputMask component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current filled state of the component as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the component as a boolean."
                        }
                    ],
                    "methods": []
                },
                "InputMaskProps": {
                    "description": "Defines valid properties in InputMask component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "slotChar",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "_",
                            "description": "Placeholder character in mask, default is underscore."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Mask pattern."
                        },
                        {
                            "name": "autoClear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Clears the incomplete value on blur."
                        },
                        {
                            "name": "unmask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if model sets the raw unmasked value to bound value or the formatted mask value."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the items are clickable or not."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputMaskPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputMaskSlots": {
                    "description": "Defines valid slots in InputMask component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InputMaskEmits": {
                    "description": "Defines valid emits in InputMask component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "keypress",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "paste",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "complete",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "keydown",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a key is pressed."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputMaskPassThroughOptionType": {
                    "values": "InputMaskPassThroughAttributes | (options: InputMaskPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "inputmask/style/InputMaskStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputMaskStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "inputnumber": {
        "description": "InputNumber is an input component to provide numerical input.\n\n[Live Demo](https://www.primevue.org/inputnumber/)",
        "components": {
            "default": {
                "description": "InputNumber is an input component to provide numerical input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputNumberPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputNumberProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputNumberState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputNumberSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputNumberProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputNumberState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "InputNumberInputEvent": {
                    "description": "Custom input event.",
                    "relatedProp": "InputNumberEmits.input",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | number",
                            "default": "",
                            "description": "New value"
                        }
                    ],
                    "methods": []
                },
                "InputNumberBlurEvent": {
                    "description": "Custom blur event.",
                    "relatedProp": "InputNumberEmits.blur",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Input value"
                        }
                    ],
                    "methods": []
                },
                "InputNumberPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputNumberProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptions<InputNumberSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "buttonGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the button group's DOM element."
                        },
                        {
                            "name": "incrementButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<InputNumberSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "decrementButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<InputNumberSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputNumberPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputNumberState": {
                    "description": "Defines current inline state in InputNumber component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_modelValue",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value state as a number."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "InputNumberProps": {
                    "description": "Defines valid properties in InputNumber component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<number>",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "format",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to format the value."
                        },
                        {
                            "name": "showButtons",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays spinner buttons."
                        },
                        {
                            "name": "buttonLayout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\" | \"stacked\"",
                            "default": "stacked",
                            "description": "Layout of the buttons."
                        },
                        {
                            "name": "incrementButtonClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the increment button."
                        },
                        {
                            "name": "decrementButtonClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the decrement button."
                        },
                        {
                            "name": "incrementButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the increment button.",
                            "deprecated": "since v3.27.0. Use 'incrementbuttonicon' slot."
                        },
                        {
                            "name": "decrementButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the decrement button.",
                            "deprecated": "since v3.27.0. Use 'decrementbuttonicon' slot."
                        },
                        {
                            "name": "locale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to be used in formatting."
                        },
                        {
                            "name": "localeMatcher",
                            "optional": true,
                            "readonly": false,
                            "type": "\"best fit\" | \"lookup\"",
                            "default": "best fit",
                            "description": "The locale matching algorithm to use. Possible values are 'lookup' and 'best fit'; the default is 'best fit'.\nSee [Locale Negotation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_negotiation) for details."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"decimal\" | \"currency\"",
                            "default": "decimal",
                            "description": "Defines the behavior of the component."
                        },
                        {
                            "name": "prefix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display before the value."
                        },
                        {
                            "name": "suffix",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to display after the value."
                        },
                        {
                            "name": "currency",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The currency to use in currency formatting. Possible values are the [ISO 4217 currency codes](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency), such as 'USD' for the US dollar, 'EUR' for the euro, or 'CNY' for the Chinese RMB.\nThere is no default value; if the style is 'currency', the currency property must be provided."
                        },
                        {
                            "name": "currencyDisplay",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "symbol",
                            "description": "How to display the currency in currency formatting. Possible values are 'symbol' to use a localized currency symbol such as €, 'code' to use the ISO currency code, 'name' to use a localized currency name such as 'dollar'."
                        },
                        {
                            "name": "useGrouping",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators."
                        },
                        {
                            "name": "minFractionDigits",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0;\nthe default for currency formatting is the number of minor unit digits provided by the [ISO 4217 currency code](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) list (2 if the list doesn't provide that information)."
                        },
                        {
                            "name": "maxFractionDigits",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3;\nthe default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the [ISO 4217 currency code](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) list (2 if the list doesn't provide that information)."
                        },
                        {
                            "name": "roundingMode",
                            "optional": true,
                            "readonly": false,
                            "type": "RoundingMode",
                            "default": "",
                            "description": "How decimals should be rounded.\nThe default value is  `\"halfExpand\"` , [further information](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode)."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "allowEmpty",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Determines whether the input field is empty."
                        },
                        {
                            "name": "highlightOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Highlights automatically the input value."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focus input to match a label defined for the chips."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "incrementButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to increment button inside the component."
                        },
                        {
                            "name": "decrementButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to decrement button inside the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputNumberPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputNumberSlots": {
                    "description": "Defines valid slots in InputNumber component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "incrementbuttonicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom increment button icon template."
                        },
                        {
                            "name": "decrementbuttonicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom decrement button icon template."
                        }
                    ]
                },
                "InputNumberEmits": {
                    "description": "Defines valid emits in InputNumber component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "input",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputNumberInputEvent",
                                    "description": "Custom input event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the value is entered."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Focus event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on focus of input field."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "InputNumberBlurEvent",
                                    "description": "Blur event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on blur of input field."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RoundingMode": {
                    "values": "\"ceil\" | \"floor\" | \"expand\" | \"trunc\" | \"halfCeil\" | \"halfFloor\" | \"halfExpand\" | \"halfTrunc\" | \"halfEven\""
                },
                "InputNumberPassThroughOptionType": {
                    "values": "InputNumberPassThroughAttributes | (options: InputNumberPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "inputnumber/style/InputNumberStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputNumberStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "inputotp": {
        "description": "InputOtp is used to enter one time passwords.\n\n[Live Demo](https://www.primevue.org/inputotp/)",
        "components": {
            "default": {
                "description": "InputOtp  is used to enter one time passwords.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputOtpPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputOtpProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputOtpState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputOtpSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputOtpProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "InputOtpState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "InputOtpPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputOtpProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputOtpPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptions<InputOtpSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputOtpPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputOtpState": {
                    "description": "Defines current inline state in InputOtp component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "tokens",
                            "optional": false,
                            "readonly": false,
                            "type": "string[] | number[]",
                            "default": "",
                            "description": "Array of input tokens"
                        }
                    ],
                    "methods": []
                },
                "InputOtpTemplateAttrsOptions": {
                    "description": "InputOtp attr options",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Input token value"
                        }
                    ],
                    "methods": []
                },
                "InputOtpTemplateEvents": {
                    "description": "InputOtp templating events",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "input",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "keydown",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "focus",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "blur",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "paste",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "InputOtpProps": {
                    "description": "Defines valid properties in InputOtp component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | boolean",
                            "default": "false",
                            "description": "Specifies whether a inputotp should be checked or not."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "length",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4",
                            "description": "Number of characters to initiate."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Mask pattern."
                        },
                        {
                            "name": "integerOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field is integer-only."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputOtpPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputOtpSlots": {
                    "description": "",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name\">events</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; InputOtpTemplateEvents</span>, <span class=\"doc-option-parameter-type\">// Events of the component</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">attrs</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; InputOtpTemplateAttrsOptions</span>, <span class=\"doc-option-parameter-type\">// Attributes of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the input field</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        }
                    ]
                },
                "InputOtpEmits": {
                    "description": "Defines valid emits in InputOtp component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputOtpPassThroughOptionType": {
                    "values": "InputOtpPassThroughAttributes | (options: InputOtpPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "inputotp/style/InputOtpStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputOtpStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "inputswitch": {
        "description": "InputSwitch is used to select a boolean value.\n\n[Live Demo](https://www.primevue.org/inputswitch/)",
        "components": {
            "default": {
                "description": "InputSwitch is used to select a boolean value.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputSwitchPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputSwitchProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "InputSwitchContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputSwitchPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputSwitchProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputSwitchPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "InputSwitchPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "slider",
                            "optional": true,
                            "readonly": false,
                            "type": "InputSwitchPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the slider's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputSwitchPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputSwitchProps": {
                    "description": "Defines valid properties in InputSwitch component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | boolean",
                            "default": "false",
                            "description": "Specifies whether a inputswitch should be checked or not."
                        },
                        {
                            "name": "trueValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "true",
                            "description": "Value in checked state."
                        },
                        {
                            "name": "falseValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "false",
                            "description": "Value in unchecked state."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputSwitchPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "InputSwitchContext": {
                    "description": "Defines current options in InputSwitch component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current checked state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "InputSwitchSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InputSwitchEmits": {
                    "description": "Defines valid emits in InputSwitch component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputSwitchPassThroughOptionType": {
                    "values": "InputSwitchPassThroughAttributes | (options: InputSwitchPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "inputswitch/style/InputSwitchStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputSwitchStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "inputtext": {
        "description": "InputText renders a text field to enter data.\n\n[Live Demo](https://www.primevue.org/inputtext/)",
        "components": {
            "default": {
                "description": "InputText renders a text field to enter data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputTextPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "InputTextProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "InputTextContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "InputTextPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "InputTextProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "InputTextPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "InputTextContext": {
                    "description": "Defines current options in InputText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current filled state of the component as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the component as a boolean."
                        }
                    ],
                    "methods": []
                },
                "InputTextProps": {
                    "description": "Defines valid properties in InputText component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<InputTextPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "InputHTMLAttributes"
                },
                "InputTextSlots": {
                    "description": "Defines valid slots in InputText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "InputTextEmits": {
                    "description": "Defines valid emits in InputText component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "InputTextPassThroughOptionType": {
                    "values": "InputTextPassThroughAttributes | (options: InputTextPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "inputtext/style/InputTextStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "InputTextStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "knob": {
        "description": "Knob is a form component to define number inputs with a dial.\n\n[Live Demo](https://www.primevue.org/knob/)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "KnobPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "KnobProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "KnobState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "KnobPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "KnobProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "svg",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the svg's DOM element."
                        },
                        {
                            "name": "range",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the range's DOM element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the value' DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "KnobPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "KnobPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "KnobState": {
                    "description": "Defines current inline state in Knob component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "radius",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "40",
                            "description": "Current radius state as a number."
                        },
                        {
                            "name": "midX",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "50",
                            "description": "Current middle x axis state as a number."
                        },
                        {
                            "name": "midY",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "50",
                            "description": "Current middle y axis state as a number."
                        },
                        {
                            "name": "minRadians",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current minimum radian state as a number."
                        },
                        {
                            "name": "maxRadians",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current maximum radian state as a number."
                        }
                    ],
                    "methods": []
                },
                "KnobProps": {
                    "description": "Defines valid properties in Knob component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Size of the component in pixels."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component value cannot be edited."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "valueColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--primary-color, Black)",
                            "description": "Background of the value."
                        },
                        {
                            "name": "rangeColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--surface-border, LightGray)",
                            "description": "Background color of the range."
                        },
                        {
                            "name": "textColor",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "var(--text-color-secondary, Black)",
                            "description": "Color of the value text."
                        },
                        {
                            "name": "strokeWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "14",
                            "description": "Width of the knob stroke."
                        },
                        {
                            "name": "showValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the show the value inside the knob."
                        },
                        {
                            "name": "valueTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{value}'",
                            "description": "Template string of the value."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Used to define a string that labels the element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<KnobPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "KnobSlots": {
                    "description": "Defines valid slots in Knob component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "KnobEmits": {
                    "description": "Defines valid emits in Knob component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the value changes."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "KnobPassThroughOptionType": {
                    "values": "KnobPassThroughAttributes | (options: KnobPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "knob/style/KnobStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "KnobStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "listbox": {
        "description": "ListBox is used to select one or more values from a list of items.\n\n[Live Demo](https://www.primevue.org/listbox/)",
        "components": {
            "default": {
                "description": "ListBox is used to select one or more values from a list of items.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ListboxPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ListboxProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ListboxState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ListboxContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ListboxChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "ListboxEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "ListboxFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "ListboxEmits.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "ListboxPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ListboxProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "filterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter container's DOM element."
                        },
                        {
                            "name": "filterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter input's DOM element."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter icon's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "itemGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item group's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the emptyMessage's DOM element."
                        },
                        {
                            "name": "hiddenFirstFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden first focusable element's DOM element."
                        },
                        {
                            "name": "hiddenFilterResult",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden filter result's DOM element."
                        },
                        {
                            "name": "hiddenSelectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden selected message's DOM element."
                        },
                        {
                            "name": "hiddenLastFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "ListboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden last focusable element's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ListboxPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ListboxState": {
                    "description": "Defines current inline state in Listbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter value state as a string."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "-1",
                            "description": "Current focused item index as a number."
                        }
                    ],
                    "methods": []
                },
                "ListboxContext": {
                    "description": "Defines current options in Listbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selection state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ListboxProps": {
                    "description": "Defines valid properties in Listbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "listStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Inline style of inner list element."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, disables the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays a filter input at header."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"endsWith\" | \"startsWith\" | \"contains\">",
                            "default": "contains",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "filterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "filterInputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the filter input inside the component."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused option is selected."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "filterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in filter input.",
                            "deprecated": "since v3.27.0. Use 'filtericon' slot."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ListboxPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ListboxSlots": {
                    "description": "Defines valid slots in Listbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "optiongroup slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom optiongroup template."
                        },
                        {
                            "name": "emptyfilter",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom emptyfilter template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// An array of objects to display for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">styleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">contentRef</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">el</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Referance of the content</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">getItemOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Options of the items</span>\n}",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "filtericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the filter icon</span>\n }",
                                    "description": "filter icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter icon template."
                        }
                    ]
                },
                "ListboxEmits": {
                    "description": "Defines valid emits in Listbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ListboxChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "ListboxFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filter input."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ListboxPassThroughOptionType": {
                    "values": "ListboxPassThroughAttributes | (options: ListboxPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "listbox/style/ListboxStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ListboxStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "megamenu": {
        "description": "MegaMenu is navigation component that displays submenus together.\n\n[Live Demo](https://www.primevue.org/megamenu/)",
        "components": {
            "default": {
                "description": "MegaMenu is navigation component that displays submenus together.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MegaMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MegaMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MegaMenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "grid",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the grid's DOM element."
                        },
                        {
                            "name": "column",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the column's DOM element."
                        },
                        {
                            "name": "submenuHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu header's DOM element."
                        },
                        {
                            "name": "submenu",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu's DOM element."
                        },
                        {
                            "name": "submenuLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu label's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "menubutton",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mobile popup menu button's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the start of the component."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "MegaMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the end of the component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "MegaMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MegaMenuFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item index"
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item level"
                        },
                        {
                            "name": "parentKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Parent key info"
                        }
                    ],
                    "methods": []
                },
                "MegaMenuState": {
                    "description": "Defines current inline state in MegaMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedItemInfo",
                            "optional": false,
                            "readonly": false,
                            "type": "MegaMenuFocusedItemInfo",
                            "default": "",
                            "description": "Current focused item info."
                        },
                        {
                            "name": "activeItem",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem",
                            "default": "",
                            "description": "Active item path."
                        }
                    ],
                    "methods": []
                },
                "MegaMenuContext": {
                    "description": "Defines current options in MegaMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the menuitem."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "MegaMenuRouterBindProps": {
                    "description": "Defines valid router binding props in MegaMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        },
                        {
                            "name": "submenuicon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Submenuicon elemnt binding"
                        }
                    ],
                    "methods": []
                },
                "MegaMenuProps": {
                    "description": "Defines valid properties in MegaMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Defines the orientation."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path.",
                            "deprecated": "since v3.40.0."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MegaMenuPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "MegaMenuSlots": {
                    "description": "Defines valid slots in MegaMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">MegaMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "menubutton",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">id</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Current id state as a string</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Toggle event</span>\n}",
                                    "description": "menu button slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu button template on responsive mode."
                        },
                        {
                            "name": "menubuttonicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu button icon template on responsive mode."
                        },
                        {
                            "name": "submenuicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is active</span>\n }",
                                    "description": "submenuicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom submenu icon template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        }
                    ]
                },
                "MegaMenuEmits": {
                    "description": "Defines valid emits in MegaMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MegaMenuPassThroughOptionType": {
                    "values": "MegaMenuPassThroughAttributes | (options: MegaMenuPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "megamenu/style/MegaMenuStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MegaMenuStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "menu": {
        "description": "Menu is a navigation / command component that supports dynamic and static positioning.\n\n[Live Demo](https://www.primevue.org/menu/)",
        "components": {
            "default": {
                "description": "Menu is a navigation / command component that supports dynamic and static positioning.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the overlay."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "type": "any",
                                    "description": "Target element"
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "submenuHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu header's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the start of the component."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the end of the component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "MenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MenuState": {
                    "description": "Defines current inline state in Menu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Focused option index."
                        },
                        {
                            "name": "selectedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Selected option index."
                        }
                    ],
                    "methods": []
                },
                "MenuContext": {
                    "description": "Defines current options in Menu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the menuitem."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "MenuRouterBindProps": {
                    "description": "Defines valid router binding props in Menu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        }
                    ],
                    "methods": []
                },
                "MenuProps": {
                    "description": "Defines valid properties in Menu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "popup",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path.",
                            "deprecated": "since v3.40.0."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MenuPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "MenuSlots": {
                    "description": "Defines valid slots in Menu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">MenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        },
                        {
                            "name": "submenuheader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n }",
                                    "description": "submenuheader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        }
                    ]
                },
                "MenuEmits": {
                    "description": "Defines valid emits in Menu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MenuPassThroughOptionType": {
                    "values": "MenuPassThroughAttributes | (options: MenuPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "MenuPassThroughTransitionType": {
                    "values": "TransitionProps | (options: MenuPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "menu/style/MenuStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenuStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "menubar": {
        "description": "Menubar is a horizontal menu component.\n\n[Live Demo](https://www.primevue.org/menubar/)",
        "components": {
            "default": {
                "description": "Menubar is a horizontal menu component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenubarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MenubarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MenubarProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mobile menu button's DOM element."
                        },
                        {
                            "name": "menubuttonicon",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mobile menu button icon's DOM element."
                        },
                        {
                            "name": "submenu",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the start of the component."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "MenubarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the end of the component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "MenubarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MenubarFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item index"
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item level"
                        },
                        {
                            "name": "parentKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Parent key info"
                        }
                    ],
                    "methods": []
                },
                "MenubarState": {
                    "description": "Defines current inline state in Menubar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "mobileActive",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current mobile menu active state as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedItemInfo",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarFocusedItemInfo",
                            "default": "",
                            "description": "Current focused item info."
                        },
                        {
                            "name": "activeItemPath",
                            "optional": false,
                            "readonly": false,
                            "type": "MenubarFocusedItemInfo[]",
                            "default": "",
                            "description": "Active item path."
                        }
                    ],
                    "methods": []
                },
                "MenubarContext": {
                    "description": "Defines current options in Menubar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the menuitem."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current level of the menuitem."
                        }
                    ],
                    "methods": []
                },
                "MenubarRouterBindProps": {
                    "description": "Defines valid router binding props in Menubar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        },
                        {
                            "name": "submenuicon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Submenuicon elemnt binding"
                        }
                    ],
                    "methods": []
                },
                "MenubarProps": {
                    "description": "Defines valid properties in Menubar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path.",
                            "deprecated": "since v3.40.0."
                        },
                        {
                            "name": "buttonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the menu button."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MenubarPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "MenubarSlots": {
                    "description": "Defines valid slots in Menubar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">MenubarRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">root</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// State of the root</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "menubutton",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">id</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Current id state as a string</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Toggle event</span>\n}",
                                    "description": "menu button slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu button template on responsive mode."
                        },
                        {
                            "name": "popupicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom popup icon template on responsive mode.",
                            "deprecated": "since v3.42.0. Use 'menubuttonicon' slot instead."
                        },
                        {
                            "name": "menubuttonicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu button icon template on responsive mode."
                        },
                        {
                            "name": "submenuicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">root</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is root</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is active</span>\n }",
                                    "description": "submenuicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom submenu icon template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        }
                    ]
                },
                "MenubarEmits": {
                    "description": "Defines valid emits in Menubar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MenubarPassThroughOptionType": {
                    "values": "MenubarPassThroughAttributes | (options: MenubarPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "menubar/style/MenubarStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenubarStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "menuitem": {
        "description": "PrimeVue menu components share a common api to specify the menuitems and submenus.",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MenuItemCommandEvent": {
                    "description": "Custom command event.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem",
                            "default": "",
                            "description": "Menuitem instance."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MenuItem": {
                    "description": "Defines model of MenuItem API.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an item."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the item."
                        },
                        {
                            "name": "command",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "url",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "External link to navigate when item is clicked."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of children menuitems."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | Function",
                            "default": "false",
                            "description": "A boolean or a function to return a boolean to specify if the item is disabled."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean | Function",
                            "default": "true",
                            "description": "A boolean or a function to return a boolean to specify if the item is visible."
                        },
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Specifies where to open the linked document."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the item as a separator."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the menuitem."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the menuitem."
                        },
                        {
                            "name": "key",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of an item."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "message": {
        "description": "Message groups a collection of contents in tabs.\n\n[Live Demo](https://www.primevue.org/message/)",
        "components": {
            "default": {
                "description": "Messages is used to display inline messages with various severities.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MessagePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MessageProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MessageState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MessagePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MessageProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the text's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the button's DOM element.",
                            "deprecated": "since v3.30.2. Use 'closeButton' option."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "buttonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the button icon's DOM element.",
                            "deprecated": "since v3.30.2. Use 'closeIcon' option."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the button icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "MessagePassThroughTransitionType<T>",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "MessagePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MessageState": {
                    "description": "Defines current inline state in Message component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "MessageProps": {
                    "description": "Defines valid properties in Message component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"error\" | \"success\" | \"secondary\" | \"info\" | \"contrast\" | \"warn\">",
                            "default": "info",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the message can be closed manually using the close icon."
                        },
                        {
                            "name": "sticky",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, message is not removed automatically."
                        },
                        {
                            "name": "life",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "3000",
                            "description": "Delay in milliseconds to close the message automatically."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Display a custom icon for the message."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the message close button.",
                            "deprecated": "since v3.27.0. Use 'closeicon' slot."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the close button."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MessagePassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "MessageSlots": {
                    "description": "Defines valid slots in Message slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default custom slot."
                        },
                        {
                            "name": "messageicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "messageicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message icon template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "closeicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClose</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Close message function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close message function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "MessageEmits": {
                    "description": "Defines valid emits in Message component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a message is closed."
                        },
                        {
                            "name": "life-end",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the message's timeout is over."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MessagePassThroughOptionType": {
                    "values": "MessagePassThroughAttributes | (options: MessagePassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "MessagePassThroughTransitionType": {
                    "values": "TransitionProps | (options: MessagePassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "message/style/MessageStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MessageStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "metergroup": {
        "description": "MeterGroup is a group of process status indicators.\n\n[Live Demo](https://primevue.org/metergroup)",
        "components": {
            "default": {
                "description": "MeterGroup is a group of process status indicators.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterGroupContext",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MeterGroupProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "labellist",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label list's DOM element."
                        },
                        {
                            "name": "labellistitem",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label list item's DOM element."
                        },
                        {
                            "name": "labellisttype",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label list type's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "metercontainer",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the meter container's DOM element."
                        },
                        {
                            "name": "meter",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterGroupPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the meter's DOM element."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MeterGroupContext": {
                    "description": "Defines current options in MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "MeterItem",
                            "default": "",
                            "description": "Current value of the meter item"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the meter item"
                        }
                    ],
                    "methods": []
                },
                "MeterItem": {
                    "description": "Defines valid properties of a meter item.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current label of the meter item."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value of the meter item."
                        },
                        {
                            "name": "color",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current color of the meter item."
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current icon of the meter item."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MeterGroupProps": {
                    "description": "Defines valid properties in MeterGroup component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "MeterItem[]",
                            "default": "",
                            "description": "Current value of the metergroup."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the layout of the component, valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "labelPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"end\" | \"start\"",
                            "default": "end",
                            "description": "Specifies the label position of the component, valid values are 'start' and 'end'."
                        },
                        {
                            "name": "labelOrientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Specifies the label orientation of the component, valid values are 'horizontal' and 'vertical'."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MeterGroupPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "MeterGroupSlots": {
                    "description": "Defines valid slots in MeterGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "label",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">MeterItem</span>, <span class=\"doc-option-parameter-type\">// Current value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">totalPercent</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total percent of the metergroup items</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">percentages</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Array of sequential sum of values of metergroup items</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom label template."
                        },
                        {
                            "name": "meter",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">MeterItem</span>, <span class=\"doc-option-parameter-type\">// Current value of the meter item</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Current index of the meter item</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the meter item</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">orientation</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Current orientation of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">size</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Current width of the meter item</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">totalPercent</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total percent of the metergroup items</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom meter template."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">MeterItem</span>, <span class=\"doc-option-parameter-type\">// Current value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "start",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">MeterItem</span>, <span class=\"doc-option-parameter-type\">// Current value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">totalPercent</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total percent of the metergroup items</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">percentages</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Array of sequential sum of values of metergroup items</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">MeterItem</span>, <span class=\"doc-option-parameter-type\">// Current value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">totalPercent</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Total percent of the metergroup items</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">percentages</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Array of sequential sum of values of metergroup items</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        }
                    ]
                },
                "MeterGroupEmits": {
                    "description": "Defines valid emits in MeterGroup component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupPassThroughOptionType": {
                    "values": "MeterGroupPassThroughAttributes | (options: MeterGroupPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "metergroup/style/MeterGroupStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MeterGroupStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "multiselect": {
        "description": "MultiSelect is used to select multiple items from a collection.\n\n[Live Demo](https://www.primevue.org/multiselect/)",
        "components": {
            "default": {
                "description": "MultiSelect is used to select multiple items from a collection.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "isFocus",
                                    "type": "boolean",
                                    "description": "Decides whether to focus on the component. Default value is false."
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [
                                {
                                    "name": "isFocus",
                                    "type": "boolean",
                                    "description": "Decides whether to focus on the component. Default value is false."
                                }
                            ],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MultiSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "MultiSelectContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "MultiSelectEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "MultiSelectAllChangeEvent": {
                    "description": "Custom all change event.",
                    "relatedProp": "MultiSelectEmits['selectall-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether all data is selected."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectFilterEvent": {
                    "description": "Custom filter event",
                    "relatedProp": "MultiSelectEmits.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "MultiSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "MultiSelectProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "labelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label container's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "token",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the token's DOM element."
                        },
                        {
                            "name": "tokenLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the token label's DOM element."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the remove token icon's DOM element."
                        },
                        {
                            "name": "trigger",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the trigger's DOM element."
                        },
                        {
                            "name": "triggerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the trigger icon's DOM element."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the dropdown icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header checkbox's DOM element."
                        },
                        {
                            "name": "filterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter container's DOM element."
                        },
                        {
                            "name": "filterInput",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter input's DOM element."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the filter icon's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close icon's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "virtualScroller",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the VirtualScroller component."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "itemGroup",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item group's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "itemCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item checkbox's DOM element."
                        },
                        {
                            "name": "option",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the option's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the emptyMessage's DOM element."
                        },
                        {
                            "name": "hiddenInput",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden input's DOM element."
                        },
                        {
                            "name": "hiddenFirstFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden first focusable element's DOM element."
                        },
                        {
                            "name": "hiddenFilterResult",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden filter result's DOM element."
                        },
                        {
                            "name": "hiddenSelectedMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden selected message's DOM element."
                        },
                        {
                            "name": "hiddenLastFocusableEl",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden last focusable element's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "MultiSelectPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "MultiSelectState": {
                    "description": "Defines current inline state in MultiSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current focused item index as a number."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter value state as a string."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectContext": {
                    "description": "Defines current options in MultiSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selection state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectProps": {
                    "description": "Defines valid properties in MultiSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "optionGroupLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option group."
                        },
                        {
                            "name": "optionGroupChildren",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function that refers to the children options of option group."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label to display when there are no selections."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the overlay panel."
                        },
                        {
                            "name": "filterInputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the filter input inside the overlay panel."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the clear button inside the overlay panel."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays a filter input at header."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "filterMatchMode",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"endsWith\" | \"startsWith\" | \"contains\">",
                            "default": "contains",
                            "description": "Defines the filtering algorithm to use when searching the options."
                        },
                        {
                            "name": "filterFields",
                            "optional": true,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Fields used when filtering the options, defaults to optionLabel."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "\"comma\" | \"chip\"",
                            "default": "comma",
                            "description": "Defines how the selected items are displayed."
                        },
                        {
                            "name": "selectedItemsLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Label to display after exceeding max selected labels."
                        },
                        {
                            "name": "maxSelectedLabels",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Decides how many selected item labels to show at most."
                        },
                        {
                            "name": "selectionLimit",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Maximum number of selectable items."
                        },
                        {
                            "name": "showToggleAll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the header checkbox to toggle the selection of all items at once."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the multiselect is in loading state."
                        },
                        {
                            "name": "checkboxIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the checkboxes.",
                            "deprecated": "since v3.27.0. Use 'checkboxicon' slot."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dropdown close button.",
                            "deprecated": "since v3.27.0. Use 'closeicon' slot."
                        },
                        {
                            "name": "dropdownIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the dropdown.",
                            "deprecated": "since v3.27.0. Use 'dropdownicon' slot."
                        },
                        {
                            "name": "filterIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in filter input.",
                            "deprecated": "since v3.27.0. Use 'filtericon' slot."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in loading state.",
                            "deprecated": "since v3.27.0. Use 'loadingicon' slot."
                        },
                        {
                            "name": "removeTokenIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in chip remove action.",
                            "deprecated": "since v3.27.0. Use 'removetokenicon' slot."
                        },
                        {
                            "name": "selectAll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether all data is selected."
                        },
                        {
                            "name": "resetFilterOnHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Clears the filter value when hiding the dropdown."
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element when the overlay panel is shown."
                        },
                        {
                            "name": "autoFilterFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to focus on the filter element when the overlay panel is shown."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "highlightOnSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Highlights automatically the first item."
                        },
                        {
                            "name": "filterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} results are available'",
                            "description": "Text to be displayed in hidden accessible field when filtering returns any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "selectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'{0} items selected'",
                            "description": "Text to be displayed in hidden accessible field when options are selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptySelectionMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No selected item",
                            "description": "Text to be displayed in hidden accessible field when any option is not selected. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyFilterMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when filtering does not return any results. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found'",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<MultiSelectPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "MultiSelectSlots": {
                    "description": "Defines valid slots in MultiSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">placeholder</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Placeholder prop value</span>\n }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        },
                        {
                            "name": "chip",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// A value in the selection</span>\n }",
                                    "description": "chip slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom chip template."
                        },
                        {
                            "name": "indicator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template.",
                            "deprecated": "since v3.27.0. Use 'loadingicon and dropdownicon' slot."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Value of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Displayed options</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option template."
                        },
                        {
                            "name": "optiongroup",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option group slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom option group template."
                        },
                        {
                            "name": "emptyfilter",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom emptyfilter template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// An array of objects to display for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">styleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">contentRef</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">el</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Referance of the content</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">getItemOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Options of the items</span>\n}",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n }",
                                    "description": "loader slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "removetokenicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item of the token.</span>\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClick</span>: <span class=\"doc-option-parameter-type line-through\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">item</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Remove token icon function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">removeCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event, <span class=\"doc-option-parameter-name\">item</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Remove token icon function.</span>\n}",
                                    "description": "removetokenicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom remove token icon template."
                        },
                        {
                            "name": "headercheckboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">allSelected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "header checkbox icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header checkbox icon template."
                        },
                        {
                            "name": "filtericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "filtericon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom filter icon template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "closeicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "itemcheckboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">selected</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Options of the loader items for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "itemcheckboxicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item checkbox icon template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "loading icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "dropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the loading icon.</span>\n }",
                                    "description": "dropdownicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom dropdown icon template."
                        }
                    ]
                },
                "MultiSelectEmits": {
                    "description": "Defines valid emits in MultiSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filter input."
                        },
                        {
                            "name": "selectall-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "MultiSelectAllChangeEvent",
                                    "description": "Custom select all change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all data is selected."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "MultiSelectPassThroughOptionType": {
                    "values": "MultiSelectPassThroughAttributes | (options: MultiSelectPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "MultiSelectPassThroughTransitionType": {
                    "values": "TransitionProps | (options: MultiSelectPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "multiselect/style/MultiSelectStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "MultiSelectStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "orderlist": {
        "description": "OrderList is used to managed the order of a collection.\n\n[Live Demo](https://primevue.org/orderlist)",
        "components": {
            "default": {
                "description": "OrderList is used to sort a collection.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OrderListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "OrderListSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "OrderListState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "OrderListReorderEvent": {
                    "description": "Custom reorder event",
                    "relatedProp": "OrderListEmits.reorder",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Ordered list"
                        },
                        {
                            "name": "direction",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Direction of the change; 'up', 'down', 'bottom', 'top'"
                        }
                    ],
                    "methods": []
                },
                "OrderListSelectionChangeEvent": {
                    "description": "Custom selection change event",
                    "relatedProp": "OrderListEmits['selection-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Ordered list"
                        }
                    ],
                    "methods": []
                },
                "OrderListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "OrderListProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "controls",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the controls' DOM element."
                        },
                        {
                            "name": "moveUpButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<OrderListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "moveTopButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<OrderListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "moveDownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<OrderListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "moveBottomButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<OrderListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "list",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "OrderListPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "OrderListPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrderListState": {
                    "description": "Defines current inline state in OrderList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "d_selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current focused item index as a number."
                        }
                    ],
                    "methods": []
                },
                "OrderListContext": {
                    "description": "Defines current options in OrderList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "OrderListProps": {
                    "description": "Defines valid properties in OrderList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Selected items in the list."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines whether metaKey is requred or not for the selection.\nWhen true metaKey needs to be pressed to select or unselect an item and\nwhen set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "listStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the the list element."
                        },
                        {
                            "name": "responsive",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the list optimizes layout based on screen size."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "stripedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "listProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLAttributes to the list element."
                        },
                        {
                            "name": "moveUpButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move up button inside the component."
                        },
                        {
                            "name": "moveTopButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move top button inside the component."
                        },
                        {
                            "name": "moveDownButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move down button inside the component."
                        },
                        {
                            "name": "moveBottomButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move bottom button inside the component."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive list element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying list element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<OrderListPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "OrderListSlots": {
                    "description": "Defines valid slots in OrderList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the item.</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "controlsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom controls start template."
                        },
                        {
                            "name": "controlsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom controls end template."
                        },
                        {
                            "name": "moveupicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move up icon template."
                        },
                        {
                            "name": "movetopicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move top icon template."
                        },
                        {
                            "name": "movedownicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move down icon template."
                        },
                        {
                            "name": "movebottomicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move bottom icon template."
                        }
                    ]
                },
                "OrderListEmits": {
                    "description": "Defines valid slots in OrderList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "update:selection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection changes."
                        },
                        {
                            "name": "reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "OrderListReorderEvent",
                                    "description": "Custom reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the list is reordered."
                        },
                        {
                            "name": "selection-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "OrderListSelectionChangeEvent",
                                    "description": "Custom selection change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when selection changes."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OrderListPassThroughOptionType": {
                    "values": "OrderListPassThroughAttributes | (options: OrderListPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "OrderListPassThroughTransitionType": {
                    "values": "TransitionProps | (options: OrderListPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "orderlist/style/OrderListStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OrderListStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "organizationchart": {
        "description": "OrganizationChart visualizes hierarchical organization data.\n\n[Live Demo](https://primevue.org/organizationchart)",
        "components": {
            "default": {
                "description": "OrganizationChart visualizes hierarchical organization data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OrganizationChartPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OrganizationChartProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "OrganizationChartState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "OrganizationChartContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartNode": {
                    "description": "Defines valid properties in OrganizationChartNode.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "key",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Unique identifier of the node. (required)"
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the node to match a template."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the node content."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Data represented by the node."
                        },
                        {
                            "name": "selectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether node is selectable when selection is enabled."
                        },
                        {
                            "name": "collapsible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether node is collapsible when node expansion is enabled."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartNode[]",
                            "default": "",
                            "description": "Children nodes array."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartSelectionKeys": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartCollapsedKeys": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "OrganizationChartProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "table",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "body",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the body's DOM element."
                        },
                        {
                            "name": "row",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row' DOM element."
                        },
                        {
                            "name": "cell",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the cell's DOM element."
                        },
                        {
                            "name": "node",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the node's DOM element."
                        },
                        {
                            "name": "nodeToggler",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the nodeToggler's DOM element."
                        },
                        {
                            "name": "nodeTogglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the nodeTogglerIcon's DOM element."
                        },
                        {
                            "name": "lines",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the lines's DOM element."
                        },
                        {
                            "name": "lineCell",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the lineCell's DOM element."
                        },
                        {
                            "name": "lineDown",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the lineDown's DOM element."
                        },
                        {
                            "name": "nodes",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the nodes's DOM element."
                        },
                        {
                            "name": "nodeCell",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the nodeCell's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartState": {
                    "description": "Defines current inline state in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_collapsedKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "OrganizationChartCollapsedKeys",
                            "default": "false",
                            "description": "Current collapsed keys' state."
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartContext": {
                    "description": "Defines current options in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "expanded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus expanded of the node as a boolean."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selectable state of the node as a boolean."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selection state of the node as a boolean."
                        },
                        {
                            "name": "toggleable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current toggleable state of the node as a boolean."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the node as a boolean."
                        },
                        {
                            "name": "lineTop",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current being top line state of the node as a boolean."
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartProps": {
                    "description": "Defines valid properties in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartNode",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "selectionKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartSelectionKeys",
                            "default": "",
                            "description": "A map instance of key-value pairs to represented the selected nodes."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "",
                            "description": "Type of the selection."
                        },
                        {
                            "name": "collapsedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "OrganizationChartCollapsedKeys",
                            "default": "",
                            "description": "A map instance of key-value pairs to represented the collapsed nodes."
                        },
                        {
                            "name": "collapsible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the nodes can be expanded or toggled."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<OrganizationChartPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "OrganizationChartSlots": {
                    "description": "Defines valid slots in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Current node</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "togglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Curent state of the node</span>\n }",
                                    "description": "togglericon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom toggler icon template."
                        }
                    ]
                },
                "OrganizationChartEmits": {
                    "description": "Defines valid emits in OrganizationChart component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:selectionKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "update:collapsedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-collapsed",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "OrganizationChartNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OrganizationChartPassThroughOptionType": {
                    "values": "OrganizationChartPassThroughAttributes | (options: OrganizationChartPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "organizationchart/style/OrganizationChartStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OrganizationChartStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "overlaypanel": {
        "description": "OverlayPanel is a container component positioned as connected to its target.\n\n[Live Demo](https://primevue.org/overlaypanel)",
        "components": {
            "default": {
                "description": "OverlayPanel, also known as Popover, is a container component that can overlay other components on page.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "alignOverlay",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Aligns overlay panel based on the current position of the container."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "type": "any",
                                    "description": "Optional target if event.currentTarget should not be used."
                                }
                            ],
                            "returnType": "void",
                            "description": "Toggles the visibility of the overlay."
                        },
                        {
                            "name": "show",
                            "parameters": [
                                {
                                    "name": "event",
                                    "type": "Event",
                                    "description": "Browser event."
                                },
                                {
                                    "name": "target",
                                    "type": "any",
                                    "description": "Optional target if event.currentTarget should not be used."
                                }
                            ],
                            "returnType": "void",
                            "description": "Shows the overlay."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OverlayPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayPanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "OverlayPanelState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "OverlayPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "OverlayPanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "OverlayPanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "OverlayPanelState": {
                    "description": "Defines current inline state in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "OverlayPanelBreakpoints": {
                    "description": "OverlayPanel breakpoint metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string"
                        }
                    ],
                    "methods": []
                },
                "OverlayPanelProps": {
                    "description": "Defines valid properties in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "dismissable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Enables to hide the overlay when outside is clicked."
                        },
                        {
                            "name": "showCloseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, displays a close icon at top right corner."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "OverlayPanelBreakpoints",
                            "default": "",
                            "description": "Object literal to define widths per screen size."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the overlaypanel close button.",
                            "deprecated": "since v3.27.0. Use 'closeicon' slot."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<OverlayPanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        },
                        {
                            "name": "closeOnEscape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the dialog."
                        }
                    ],
                    "methods": []
                },
                "OverlayPanelSlots": {
                    "description": "Defines valid slots in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClose</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Close overlay panel function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name line-through\">onKeydown</span>: <span class=\"doc-option-parameter-type line-through\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Close button keydown function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close overlay panel function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">keydownCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close button keydown function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "OverlayPanelEmits": {
                    "description": "Defines valid emits in OverlayPanel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "OverlayPanelPassThroughOptionType": {
                    "values": "OverlayPanelPassThroughAttributes | (options: OverlayPanelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "OverlayPanelPassThroughTransitionType": {
                    "values": "TransitionProps | (options: OverlayPanelPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "overlaypanel/style/OverlayPanelStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "OverlayPanelStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "paginator": {
        "description": "Paginator is a generic component to display content in paged format.\n\n[Live Demo](https://primevue.org/paginator)",
        "components": {
            "default": {
                "description": "Paginator is a generic widget to display content in paged format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PaginatorPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "PaginatorSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PaginatorState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "PaginatorPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PaginatorProps.pt",
                    "props": [
                        {
                            "name": "paginatorWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Used to pass attributes to the paginator wrapper's DOM element."
                        },
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the start's DOM element."
                        },
                        {
                            "name": "firstPageButton",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the first page button's DOM element."
                        },
                        {
                            "name": "firstPageIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the first page icon's DOM element."
                        },
                        {
                            "name": "previousPageButton",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the prev page button's DOM element."
                        },
                        {
                            "name": "previousPageIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the prev page icon's DOM element."
                        },
                        {
                            "name": "nextPageButton",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the next page button's DOM element."
                        },
                        {
                            "name": "nextPageIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the next page icon's DOM element."
                        },
                        {
                            "name": "lastPageButton",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the last page button's DOM element."
                        },
                        {
                            "name": "lastPageIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the last page icon's DOM element."
                        },
                        {
                            "name": "pages",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the pages's DOM element."
                        },
                        {
                            "name": "pageButton",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the page button's DOM element."
                        },
                        {
                            "name": "current",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the current's DOM element."
                        },
                        {
                            "name": "rowPerPageDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptions<PaginatorSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "jumpToPageDropdown",
                            "optional": true,
                            "readonly": false,
                            "type": "DropdownPassThroughOptions<PaginatorSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "jumpToPageInput",
                            "optional": true,
                            "readonly": false,
                            "type": "InputNumberPassThroughOptions<PaginatorSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Dropdown component."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the end's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "PaginatorPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PaginatorState": {
                    "description": "Defines current inline state in Paginator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of first record as a number."
                        },
                        {
                            "name": "d_rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current number of rows to display in new page as a number."
                        }
                    ],
                    "methods": []
                },
                "PaginatorContext": {
                    "description": "Defines current options in Paginator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the button as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PageState": {
                    "description": "Paginator page state metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "pageCount",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total number of pages"
                        }
                    ],
                    "methods": []
                },
                "PaginatorProps": {
                    "description": "Defines valid properties in Paginator component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Number of total records."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Data count to display per page."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Zero-relative number of the first row to be displayed."
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "template",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Template of the paginator, can either be a string or an object with key-value pairs to define templates per breakpoint. Available templates are the following;\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state. Available placeholders are the following;\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "alwaysShow",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the paginator even there is only one page."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PaginatorPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "PaginatorSlots": {
                    "description": "Defines valid slots in Paginator component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "start",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">state</span>: <span class=\"doc-option-parameter-type\">PageState</span>, <span class=\"doc-option-parameter-type\">// Current state</span>\n }",
                                    "description": "start slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">state</span>: <span class=\"doc-option-parameter-type\">PageState</span>, <span class=\"doc-option-parameter-type\">// Current state</span>\n }",
                                    "description": "end slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        },
                        {
                            "name": "firstpagelinkicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom first page link icon template."
                        },
                        {
                            "name": "prevpagelinkicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom previous page link icon template."
                        },
                        {
                            "name": "nextpagelinkicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom finextrst page link icon template."
                        },
                        {
                            "name": "lastpagelinkicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom last page link icon template."
                        },
                        {
                            "name": "rowsperpagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the rowsperpagedropdown icon.</span>\n }",
                                    "description": "rowsperpagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom rowsperpagedropdownicon template."
                        },
                        {
                            "name": "jumptopagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the jumptopagedropdown icon.</span>\n }",
                                    "description": "jumptopagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom jumptopagedropdownicon template."
                        }
                    ]
                },
                "PaginatorEmits": {
                    "description": "Defines valid emits in Paginator component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        },
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PageState",
                                    "description": "New page state."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when page changes, the event object contains information about the new state."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PaginatorPassThroughOptionType": {
                    "values": "PaginatorPassThroughAttributes | (options: PaginatorPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "paginator/style/PaginatorStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PaginatorStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "panel": {
        "description": "Panel is a container with the optional content toggle feature.\n\n[Live Demo](https://www.primevue.org/panel/)",
        "components": {
            "default": {
                "description": "Panel is a container with the optional content toggle feature.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "PanelToggleEvent": {
                    "description": "Custom toggle event.",
                    "relatedProp": "PanelEmits.toggle",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Collapsed state as a boolean"
                        }
                    ],
                    "methods": []
                },
                "PanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "icons",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icons' DOM element."
                        },
                        {
                            "name": "toggler",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toggler's DOM element."
                        },
                        {
                            "name": "togglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the togglericon's DOM element."
                        },
                        {
                            "name": "toggleableContent",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toggleablecontent's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "PanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PanelState": {
                    "description": "Defines current inline state in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_collapsed",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current collapsed state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PanelProps": {
                    "description": "Defines valid properties in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Header text of the panel."
                        },
                        {
                            "name": "toggleable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if content of panel can be expanded and collapsed."
                        },
                        {
                            "name": "collapsed",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines the initial state of panel content."
                        },
                        {
                            "name": "toggleButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass the custom value to read for the button inside the component.",
                            "deprecated": "since v3.26.0. Use 'pt' property instead."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "PanelSlots": {
                    "description": "Defines valid slots in Panel slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">id</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Current id state as a string</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "icons",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icons template."
                        },
                        {
                            "name": "togglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">collapsed</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Collapsed state as a boolean</span>\n }",
                                    "description": "toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom toggler icon template of panel."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        }
                    ]
                },
                "PanelEmits": {
                    "description": "Defines valid emits in Panel component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:collapsed",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the collapsed changes."
                        },
                        {
                            "name": "toggle",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PanelToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a tab toggle."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PanelPassThroughOptionType": {
                    "values": "PanelPassThroughAttributes | (options: PanelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "PanelPassThroughTransitionType": {
                    "values": "TransitionProps | (options: PanelPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "panel/style/PanelStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "panelmenu": {
        "description": "PanelMenu is a hybrid of Accordion and Tree components.\n\n[Live Demo](https://www.primevue.org/panelmenu/)",
        "components": {
            "default": {
                "description": "PanelMenu is a hybrid of Accordion and Tree components.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelMenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelMenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "PanelMenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "PanelMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PanelMenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerContent",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header content's DOM element."
                        },
                        {
                            "name": "headerAction",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header action's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenuIcon's DOM element."
                        },
                        {
                            "name": "headerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header icon's DOM element."
                        },
                        {
                            "name": "headerLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header label's DOM element."
                        },
                        {
                            "name": "toggleableContent",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toggleable content's DOM element."
                        },
                        {
                            "name": "menuContent",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the menu content's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "submenu",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the submenu's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "PanelMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PanelMenuState": {
                    "description": "Defines current inline state in PanelMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "activeItem",
                            "optional": false,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "Active item path."
                        }
                    ],
                    "methods": []
                },
                "PanelMenuContext": {
                    "description": "Defines current options in PanelMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PanelMenuExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "relatedProp": "PanelMenuProps.expandedKeys",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PanelMenuPanelOpenEvent": {
                    "description": "Custom panel open event.",
                    "relatedProp": "PanelMenuEmits['panel-open']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current item."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "PanelMenuPanelCloseEvent"
                },
                "PanelMenuPanelCloseEvent": {
                    "description": "Custom panel close event.",
                    "relatedProp": "PanelMenuEmits['panel-close']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "MouseEvent",
                            "default": "",
                            "description": "Browser mouse event."
                        },
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current item."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PanelMenuPanelOpenEvent"
                },
                "PanelMenuRouterBindProps": {
                    "description": "Defines valid router binding props in PanelMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        },
                        {
                            "name": "submenuicon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Submenuicon elemnt binding"
                        },
                        {
                            "name": "headerIcon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Header icon element binding"
                        },
                        {
                            "name": "headerLabel",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Header label element binding"
                        }
                    ],
                    "methods": []
                },
                "PanelMenuProps": {
                    "description": "Defines valid properties in PanelMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "PanelMenuExpandedKeys",
                            "default": "",
                            "description": "A map of keys to represent the expansion state in controlled mode."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, multiple root menuitems can be activated at the same time."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path.",
                            "deprecated": "since v3.40.0."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PanelMenuPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "PanelMenuSlots": {
                    "description": "Defines valid slots in PanelMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">root</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether there is a root menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current active state of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">PanelMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        },
                        {
                            "name": "submenuicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is active</span>\n }",
                                    "description": "submenuicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom submenu icon template."
                        },
                        {
                            "name": "headericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "header icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header icon template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        }
                    ]
                },
                "PanelMenuEmits": {
                    "description": "Defines valid emits in PanelMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:expandedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expandedKeys changes."
                        },
                        {
                            "name": "panel-open",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PanelMenuPanelOpenEvent",
                                    "description": "Custom panel open event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a panel gets expanded."
                        },
                        {
                            "name": "panel-close",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PanelMenuPanelCloseEvent",
                                    "description": "Custom panel close event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active panel is collapsed by clicking on the header."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PanelMenuPassThroughOptionType": {
                    "values": "PanelMenuPassThroughAttributes | (options: PanelMenuPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "PanelMenuPassThroughTransitionType": {
                    "values": "TransitionProps | (options: PanelMenuPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "panelmenu/style/PanelMenuStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PanelMenuStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "passthrough": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "usePassThrough": {
                    "name": "usePassThrough",
                    "parameters": [
                        {
                            "name": "pt1",
                            "type": "object"
                        },
                        {
                            "name": "pt2",
                            "type": "object"
                        },
                        {
                            "name": "options",
                            "type": "PassThroughOptions"
                        }
                    ],
                    "returnType": "object"
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PassThroughOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "mergeSections",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "mergeProps",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughMergePropsType",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PassThroughMergePropsType": {
                    "values": "(args: any) => undefined | boolean | undefined"
                }
            }
        }
    },
    "passthrough/tailwind": {},
    "password": {
        "description": "Password displays strength indicator for password fields.\n\n[Live Demo](https://www.primevue.org/password/)",
        "components": {
            "default": {
                "description": "Password displays strength indicator for password fields.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PasswordPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "PasswordSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "PasswordPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PasswordProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "InputTextPassThroughOptions<PasswordSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the InputText component."
                        },
                        {
                            "name": "hideIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hide icon's DOM element."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the show icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "meter",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the meter's DOM element."
                        },
                        {
                            "name": "meterLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the meter label's DOM element."
                        },
                        {
                            "name": "info",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the info's DOM element."
                        },
                        {
                            "name": "hiddenAccesible",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden accessible DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "PasswordPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "PasswordPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PasswordState": {
                    "description": "Defines current inline state in Password component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "meter",
                            "optional": false,
                            "readonly": false,
                            "type": "PasswordMeterStateOptions",
                            "default": "",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "infoText",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current info test state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "unmasked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current unmasked state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PasswordMeterStateOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "strength",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current strength of the meter state as a string."
                        },
                        {
                            "name": "width",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current width of the meter state as a string."
                        }
                    ],
                    "methods": []
                },
                "PasswordProps": {
                    "description": "Defines valid properties in Password component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "promptLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text to prompt password entry. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "mediumRegex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})",
                            "description": "Regex for a medium level password."
                        },
                        {
                            "name": "strongRegex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})",
                            "description": "Regex for a strong level password."
                        },
                        {
                            "name": "weakLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text for a weak password. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "mediumLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text for a medium password. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "strongLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text for a strong password. Defaults to PrimeVue Locale configuration."
                        },
                        {
                            "name": "feedback",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show the strength indicator or not."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "toggleMask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show an icon to display the password as plain text."
                        },
                        {
                            "name": "hideIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to hide displaying the password as plain text.",
                            "deprecated": "since v3.27.0. Use 'hideicon' slot."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to show displaying the password as plain text.",
                            "deprecated": "since v3.27.0. Use 'showicon' slot."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text for the input."
                        },
                        {
                            "name": "required",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "panelId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying overlay panel element."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "panelStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the overlay panel."
                        },
                        {
                            "name": "panelProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the overlay panel inside the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PasswordPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "InputHTMLAttributes"
                },
                "PasswordSlots": {
                    "description": "Defines valid slots in Password component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "content",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "hideicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClick</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Hide icon click event</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Hide icon click event</span>\n}",
                                    "description": "hideicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom hide icon template."
                        },
                        {
                            "name": "showicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClick</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Hide icon click event</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Hide icon click event</span>\n}",
                                    "description": "showicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom show icon template."
                        }
                    ]
                },
                "PasswordEmits": {
                    "description": "Defines valid emits in Password component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PasswordPassThroughOptionType": {
                    "values": "PasswordPassThroughAttributes | (options: PasswordPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "PasswordPassThroughTransitionType": {
                    "values": "TransitionProps | (options: PasswordPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "password/style/PasswordStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PasswordStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "picklist": {
        "description": "PickList is used to reorder items between different lists.\n\n[Live Demo](https://primevue.org/picklist)",
        "components": {
            "default": {
                "description": "PickList is used to reorder items between different lists.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PickListPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "PickListSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "PickListState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "PickListReorderEvent": {
                    "description": "Custom reorder event.",
                    "relatedProp": "PickListEmits.reorder",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Ordered list"
                        },
                        {
                            "name": "direction",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Direction of the change; 'up', 'down', 'bottom', 'top'"
                        },
                        {
                            "name": "listIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the list that is ordered, 0 represents the source and 1 represents the target list."
                        }
                    ],
                    "methods": []
                },
                "PickListSelectionChangeEvent": {
                    "description": "Custom selection change event.",
                    "relatedProp": "PickListEmits['selection-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Selected item"
                        }
                    ],
                    "methods": []
                },
                "PickListMoveToTargetEvent": {
                    "description": "Custom move-to-target event.",
                    "relatedProp": "PickListEmits['move-to-target']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "PickListMoveAllToTargetEvent,PickListMoveToSourceEvent,PickListMoveAllToSourceEvent"
                },
                "PickListMoveAllToTargetEvent": {
                    "description": "Custom move-all-to-target event.",
                    "relatedProp": "PickListEmits['move-all-to-target']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PickListMoveToTargetEvent"
                },
                "PickListMoveToSourceEvent": {
                    "description": "Custom move-to-source event.",
                    "relatedProp": "PickListEmits['move-all-to-target']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PickListMoveToTargetEvent"
                },
                "PickListMoveAllToSourceEvent": {
                    "description": "Custom move-all-to-source event.",
                    "relatedProp": "PickListEmits['move-all-to-target']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "items",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Moved items"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "PickListMoveToTargetEvent"
                },
                "PickListPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "PickListProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "sourceControls",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the source controls' DOM element."
                        },
                        {
                            "name": "sourceMoveUpButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "sourceMoveTopButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "sourceMoveDownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "sourceMoveBottomButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "sourceWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the source wrapper's DOM element."
                        },
                        {
                            "name": "sourceHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the source header's DOM element."
                        },
                        {
                            "name": "sourceList",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the source list's DOM element."
                        },
                        {
                            "name": "buttons",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the buttons' DOM element."
                        },
                        {
                            "name": "moveToTargetButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "moveAllToTargetButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "moveToSourceButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "moveAllToSourceButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "targetWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the target wrapper's DOM element."
                        },
                        {
                            "name": "targetHeader",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the target header's DOM element."
                        },
                        {
                            "name": "targetList",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the target list's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the target item's DOM element."
                        },
                        {
                            "name": "targetControls",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the target controls' DOM element."
                        },
                        {
                            "name": "targetMoveUpButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "targetMoveTopButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "targetMoveDownButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "targetMoveBottomButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<PickListSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "PickListPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "PickListPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "PickListFocusedState": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "sourceList",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current source list's focused state as a boolean."
                        },
                        {
                            "name": "targetList",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current target list's focused state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PickListState": {
                    "description": "Defines current inline state in PickList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "d_selection",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "[false, false]",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current focused item index as a number."
                        },
                        {
                            "name": "viewChanged",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current view change state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PickListContext": {
                    "description": "Defines current options in PickList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "PickListProps": {
                    "description": "Defines valid properties in PickList component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any[][]",
                            "default": "",
                            "description": "Value of the component as a multidimensional array."
                        },
                        {
                            "name": "selection",
                            "optional": true,
                            "readonly": false,
                            "type": "any[][]",
                            "default": "",
                            "description": "Selected items in the list as a multidimensional array."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines whether metaKey is requred or not for the selection.\nWhen true metaKey needs to be pressed to select or unselect an item and\nwhen set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "autoOptionFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element."
                        },
                        {
                            "name": "focusOnHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option."
                        },
                        {
                            "name": "listStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the the list element."
                        },
                        {
                            "name": "responsive",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the list optimizes layout based on screen size."
                        },
                        {
                            "name": "breakpoint",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "960px",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled."
                        },
                        {
                            "name": "stripedRows",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors."
                        },
                        {
                            "name": "showSourceControls",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show buttons of source list."
                        },
                        {
                            "name": "showTargetControls",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show buttons of target list."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the list element in tabbing order."
                        },
                        {
                            "name": "targetListProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLAttributes to the target list element."
                        },
                        {
                            "name": "sourceListProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLAttributes to the source list element."
                        },
                        {
                            "name": "moveUpButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move up button inside the component."
                        },
                        {
                            "name": "moveTopButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move top button inside the component."
                        },
                        {
                            "name": "moveDownButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move down button inside the component."
                        },
                        {
                            "name": "moveBottomButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move bottom button inside the component."
                        },
                        {
                            "name": "moveToTargetProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move to target button inside the component."
                        },
                        {
                            "name": "moveAllToTargetProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move all to target button inside the component."
                        },
                        {
                            "name": "moveToSourceProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move to source button inside the component."
                        },
                        {
                            "name": "moveAllToSourceProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the move all to source button inside the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<PickListPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "PickListSlots": {
                    "description": "Defines valid slots in PickList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item of the component</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the item</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "sourceheader",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom source header template."
                        },
                        {
                            "name": "targetheader",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom target header template."
                        },
                        {
                            "name": "sourcecontrolsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom source controls start template."
                        },
                        {
                            "name": "sourcecontrolsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom source controls end template."
                        },
                        {
                            "name": "movecontrolsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move controls start template."
                        },
                        {
                            "name": "movecontrolsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move controls end template."
                        },
                        {
                            "name": "targetcontrolsstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom target controls start template."
                        },
                        {
                            "name": "targetcontrolsend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom target controls end template."
                        },
                        {
                            "name": "moveupicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move up icon template."
                        },
                        {
                            "name": "movetopicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move top icon template."
                        },
                        {
                            "name": "movedownicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move down icon template."
                        },
                        {
                            "name": "movebottomicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move bottom icon template."
                        },
                        {
                            "name": "movetotargeticon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">viewChanged</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether view change.</span>\n }",
                                    "description": "movetotargeticon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move to target icon template."
                        },
                        {
                            "name": "movealltotargeticon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">viewChanged</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether view change.</span>\n }",
                                    "description": "movealltotargeticon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move all to target icon template."
                        },
                        {
                            "name": "movetosourceicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">viewChanged</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether view change.</span>\n }",
                                    "description": "movetosourceicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move to source icon template."
                        },
                        {
                            "name": "movealltosourceicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">viewChanged</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether view change.</span>\n }",
                                    "description": "movealltosourceicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom move all to source icon template."
                        }
                    ]
                },
                "PickListEmits": {
                    "description": "Defines valid emits in PickList component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[][]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "update:selection",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any[][]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection changes."
                        },
                        {
                            "name": "reorder",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListReorderEvent",
                                    "description": "Custom reorder event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the list is reordered."
                        },
                        {
                            "name": "selection-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListSelectionChangeEvent",
                                    "description": "Custom selection change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when one or more items are moved to the other list."
                        },
                        {
                            "name": "move-to-target",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveToTargetEvent",
                                    "description": "Custom move to target event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when one or more items are moved to the target list."
                        },
                        {
                            "name": "move-all-to-target",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveAllToTargetEvent",
                                    "description": "Custom move all to target event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all items are moved to the target list."
                        },
                        {
                            "name": "move-to-source",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveToSourceEvent",
                                    "description": "Custom move to source event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when one or more items are moved to the source list."
                        },
                        {
                            "name": "move-all-to-source",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "PickListMoveAllToSourceEvent",
                                    "description": "Custom move all to source event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when all items are moved to the source list."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PickListPassThroughOptionType": {
                    "values": "PickListPassThroughAttributes | (options: PickListPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "PickListPassThroughTransitionType": {
                    "values": "TransitionProps | (options: PickListPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "picklist/style/PickListStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PickListStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "portal/Portal": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PortalProps": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "PortalAppendToType",
                            "default": "",
                            "description": "A valid query selector or an HTMLElement to specify where the dialog gets attached. Special keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "If disabled, the Portal feature is eliminated and the content is displayed directly."
                        }
                    ],
                    "methods": []
                },
                "PortalSlots": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PortalEmits": {
                    "values": "{}"
                }
            }
        }
    },
    "portal/style/PortalStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "PortalStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "progressbar": {
        "description": "ProgressBar is a process status indicator.\n\n[Live Demo](https://www.primevue.org/progressbar)",
        "components": {
            "default": {
                "description": "\n\n[Live Demo](https://www.primevue.org/progressbar/)\n--- ---\n![PrimeVue](https://primefaces.org/cdn/primevue/images/logo-100.png)",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ProgressBarProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ProgressBarProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the value's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressBarPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ProgressBarProps": {
                    "description": "Defines valid properties in ProgressBar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current value of the progress."
                        },
                        {
                            "name": "mode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"indeterminate\" | \"determinate\"",
                            "default": "determinate",
                            "description": "Defines the mode of the progress"
                        },
                        {
                            "name": "showValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display the progress bar value."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ProgressBarPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ProgressBarSlots": {
                    "description": "Defines valid slots in ProgressBar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content slot."
                        }
                    ]
                },
                "ProgressBarEmits": {
                    "description": "Defines valid emits in ProgressBar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarPassThroughOptionType": {
                    "values": "ProgressBarPassThroughAttributes | (options: ProgressBarPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "progressbar/style/ProgressBarStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressBarStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "progressspinner": {
        "description": "ProgressSpinner is a process status indicator.\n\n[Live Demo](https://www.primevue.org/progressspinner)",
        "components": {
            "default": {
                "description": "ProgressSpinner is a process status indicator.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ProgressSpinnerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ProgressSpinnerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ProgressSpinnerProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "spinner",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the spinner's DOM element."
                        },
                        {
                            "name": "circle",
                            "optional": true,
                            "readonly": false,
                            "type": "ProgressSpinnerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the circle's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ProgressSpinnerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ProgressSpinnerProps": {
                    "description": "Defines valid properties in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "strokeWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "2",
                            "description": "Width of the circle stroke."
                        },
                        {
                            "name": "fill",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Color for the background of the circle."
                        },
                        {
                            "name": "animationDuration",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "2s",
                            "description": "Duration of the rotate animation."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ProgressSpinnerPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ProgressSpinnerSlots": {
                    "description": "Defines valid slots in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "ProgressSpinnerEmits": {
                    "description": "Defines valid emits in ProgressSpinner component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerPassThroughOptionType": {
                    "values": "ProgressSpinnerPassThroughAttributes | (options: ProgressSpinnerPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "progressspinner/style/ProgressSpinnerStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ProgressSpinnerStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "radiobutton": {
        "description": "RadioButton is an extension to standard radio button element with theming.\n\n[Live Demo](https://www.primevue.org/radiobutton/)",
        "components": {
            "default": {
                "description": "RadioButton is an extension to standard radio button element with theming.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "RadioButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "RadioButtonState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "RadioButtonContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "RadioButtonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "box",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the box's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "RadioButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "RadioButtonState": {
                    "description": "Defines current inline state in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "RadioButtonProps": {
                    "description": "Defines valid properties in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the checkbox."
                        },
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value binding of the checkbox."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the input element."
                        },
                        {
                            "name": "binary",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Allows to select a boolean value."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<RadioButtonPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonContext": {
                    "description": "Defines current options in RadioButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current checked state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "RadioButtonSlots": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "RadioButtonEmits": {
                    "description": "Defines valid emits in RadioButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on radio button value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonPassThroughOptionType": {
                    "values": "RadioButtonPassThroughAttributes | (options: RadioButtonPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "radiobutton/style/RadioButtonStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RadioButtonStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "rating": {
        "description": "Rating component is a star based selection input.\n\n[Live Demo](https://www.primevue.org/rating/)",
        "components": {
            "default": {
                "description": "Rating component is a star based selection input.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RatingPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "RatingProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "RatingState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "RatingContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "RatingPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "RatingProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "cancelItem",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the cancel item's DOM element."
                        },
                        {
                            "name": "cancelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the cancel icon's DOM element."
                        },
                        {
                            "name": "item",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the item's DOM element."
                        },
                        {
                            "name": "onIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the on icon's DOM element."
                        },
                        {
                            "name": "offIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the off icon's DOM element."
                        },
                        {
                            "name": "hiddenCancelInputWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden cancel inputW wapper's DOM element."
                        },
                        {
                            "name": "hiddenCancelInput",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden cancel input's DOM element."
                        },
                        {
                            "name": "hiddenItemInputWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden item input wrapper's DOM element."
                        },
                        {
                            "name": "hiddenItemInput",
                            "optional": true,
                            "readonly": false,
                            "type": "RatingPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden item input's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "RatingPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "RatingState": {
                    "description": "Defines current inline state in Rating component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "name state as a number."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "focusedOptionIndex state as a number."
                        }
                    ],
                    "methods": []
                },
                "RatingContext": {
                    "description": "Defines current options in Rating component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the item as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of item as a boolean."
                        }
                    ],
                    "methods": []
                },
                "RatingChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "RatingEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Selected option value"
                        }
                    ],
                    "methods": []
                },
                "RatingProps": {
                    "description": "Defines valid properties in Rating component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Value of the rating."
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the element."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that component is read-only."
                        },
                        {
                            "name": "stars",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of stars."
                        },
                        {
                            "name": "cancel",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "When specified a cancel icon is displayed to allow clearing the value."
                        },
                        {
                            "name": "onIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon for the on state.",
                            "deprecated": "since v3.27.0. Use 'onicon' slot."
                        },
                        {
                            "name": "offIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon for the off state.",
                            "deprecated": "since v3.27.0. Use 'officon' slot."
                        },
                        {
                            "name": "cancelIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon for the cancelable state.",
                            "deprecated": "since v3.27.0. Use 'cancelicon' slot."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<RatingPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "RatingSlots": {
                    "description": "Defines valid slots in Rating component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "cancelicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "cancelicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom cancel icon template."
                        },
                        {
                            "name": "onicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Item value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "on icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom on icon template."
                        },
                        {
                            "name": "officon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Item value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "off icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom off icon template."
                        }
                    ]
                },
                "RatingEmits": {
                    "description": "Defines valid emits in Rating component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "RatingChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a suggestion is selected."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RatingPassThroughOptionType": {
                    "values": "RatingPassThroughAttributes | (options: RatingPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "rating/style/RatingStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RatingStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "ripple": {
        "description": "Ripple directive adds ripple effect to the host element.\n\n[Live Demo](https://primevue.org/ripple)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RippleOptions": {
                    "description": "Defines options of Ripple.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<RippleDirectivePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "RippleDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "RippleOptions.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RippleDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "DirectiveHooks<any, any>",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "RippleDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "RippleDirectiveBinding": {
                    "description": "Binding of Ripple directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "RippleOptions",
                            "default": "",
                            "description": "Value of the Ripple."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RippleDirectivePassThroughOptionType": {
                    "values": "RippleDirectivePassThroughAttributes | null | undefined"
                }
            }
        }
    },
    "ripple/style/RippleStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "AccordionStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "row": {
        "description": "Row component is a helper component used to create grouping structures in DataTable.\n\n[Live Demo](https://www.primevue.org/datatable/)",
        "components": {
            "default": {
                "description": "Row component is a helper component used to create grouping structures in DataTable.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RowPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "RowProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "RowContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "RowPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "undefined.RowProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "RowPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "RowPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "RowProps": {
                    "description": "Defines valid properties in Row component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "RowContext": {
                    "description": "Defines current options in Row component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the row."
                        }
                    ],
                    "methods": []
                },
                "RowSlots": {
                    "description": "Defines valid slots in Row component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "RowEmits": {
                    "description": "Defines valid emits in Row component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "RowPassThroughOptionType": {
                    "values": "RowPassThroughAttributes | (options: RowPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "row/style/RowStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "RowStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "scrollpanel": {
        "description": "ScrollPanel is a cross browser, lightweight and themable alternative to native browser scrollbar.\n\n[Live Demo](https://www.primevue.org/scrollpanel/)",
        "components": {
            "default": {
                "description": "ScrollPanel is a cross browser, lightweight and themable alternative to native browser scrollbar..",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollPanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollPanelState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ScrollPanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "barX",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the horizontal panel's DOM element."
                        },
                        {
                            "name": "barY",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the vertical panel's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelState": {
                    "description": "Defines current inline state in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "orientation",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "vertical",
                            "description": "Current scrollpanel orientation."
                        },
                        {
                            "name": "lastScrollTop",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Latest scroll top position."
                        },
                        {
                            "name": "lastScrollLeft",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Latest scroll left position."
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelProps": {
                    "description": "Defines valid properties in ScrollPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Step factor to scroll the content while pressing the arrow keys."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ScrollPanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelSlots": {
                    "description": "Defines valid slots in Accordion slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "ScrollPanelEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ScrollPanelPassThroughOptionType": {
                    "values": "ScrollPanelPassThroughAttributes | (options: ScrollPanelPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "scrollpanel/style/ScrollPanelStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollPanelStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "scrolltop": {
        "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.\n\n[Live Demo](https://www.primevue.org/scrolltop/)",
        "components": {
            "default": {
                "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollTopPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollTopProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ScrollTopState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ScrollTopPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ScrollTopProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollTopPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollTopPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ScrollTopPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ScrollTopPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ScrollTopState": {
                    "description": "Defines current inline state in ScrollTop component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ScrollTopProps": {
                    "description": "Defines valid properties in ScrollTop component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "target",
                            "optional": true,
                            "readonly": false,
                            "type": "\"window\" | \"parent\"",
                            "default": "window",
                            "description": "Target of the ScrollTop."
                        },
                        {
                            "name": "threshold",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "400",
                            "description": "Defines the threshold value of the vertical scroll position of the target to toggle the visibility."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "behavior",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "smooth",
                            "description": "Defines the scrolling behaviour, 'smooth' adds an animation and 'auto' scrolls with a jump."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ScrollTopPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ScrollTopSlots": {
                    "description": "Defines valid slots in ScrollTop component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "icon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom scrolltop icon template."
                        }
                    ]
                },
                "ScrollTopEmits": {
                    "description": "Defines valid emits in ScrollTop component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ScrollTopPassThroughOptionType": {
                    "values": "ScrollTopPassThroughAttributes | (options: ScrollTopPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ScrollTopPassThroughTransitionType": {
                    "values": "TransitionProps | (options: ScrollTopPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "scrolltop/style/ScrollTopStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ScrollTopStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "selectbutton": {
        "description": "SelectButton is used to choose single or multiple items from a list using buttons.\n\n[Live Demo](https://www.primevue.org/selectbutton/)",
        "components": {
            "default": {
                "description": "SelectButton is used to choose single or multiple items from a list using buttons.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SelectButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectButtonState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "SelectButtonContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SelectButtonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "SelectButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SelectButtonChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "SelectButtonEmits.change",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Single value or an array of values that are selected."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonState": {
                    "description": "Defines current inline state in SelectButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focusedIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "FocusedIndex state as a number."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonContext": {
                    "description": "Defines current options in SelectButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of the item as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the item as a boolean."
                        },
                        {
                            "name": "option",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Available option."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonProps": {
                    "description": "Defines valid properties in SelectButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of selectitems to display as the available options."
                        },
                        {
                            "name": "optionLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the label of an option."
                        },
                        {
                            "name": "optionValue",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined."
                        },
                        {
                            "name": "optionDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined."
                        },
                        {
                            "name": "multiple",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "A property to uniquely identify an option."
                        },
                        {
                            "name": "unselectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether selection can be cleared.",
                            "deprecated": "Use 'allowEmpty' property instead."
                        },
                        {
                            "name": "allowEmpty",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether selection can be cleared."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SelectButtonPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SelectButtonSlots": {
                    "description": "Defines valid slots in SelectButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "option",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">option</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Option instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the option</span>\n }",
                                    "description": "option slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each option."
                        }
                    ]
                },
                "SelectButtonEmits": {
                    "description": "Defines valid emits in SelectButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SelectButtonChangeEvent",
                                    "description": "Custom change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on blur."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SelectButtonPassThroughOptionType": {
                    "values": "SelectButtonPassThroughAttributes | (options: SelectButtonPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "selectbutton/style/SelectButtonStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SelectButtonStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "sidebar": {
        "description": "Sidebar is a panel component displayed as an overlay at the edges of the screen.\n\n[Live Demo](https://primevue.org/sidebar)",
        "components": {
            "default": {
                "description": "Sidebar is a panel component displayed as an overlay.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SidebarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SidebarProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SidebarState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SidebarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SidebarProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header content's DOM element."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close button's DOM element."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the close icon's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "SidebarPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "SidebarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SidebarState": {
                    "description": "Defines current inline state in Sidebar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "containerVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current container visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "SidebarProps": {
                    "description": "Defines valid properties in Sidebar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the dialog."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"top\" | \"bottom\" | \"right\" | \"full\"",
                            "default": "left",
                            "description": "Specifies the position of the sidebar."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Title content of the dialog."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "dismissable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether clicking outside closes the panel."
                        },
                        {
                            "name": "showCloseIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to display a close icon inside the panel."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the sidebar close button.",
                            "deprecated": "since v3.27.0. Use 'closeicon' slot."
                        },
                        {
                            "name": "modal",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to a modal layer behind the sidebar."
                        },
                        {
                            "name": "blockScroll",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when sidebar is visible."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SidebarPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SidebarSlots": {
                    "description": "Defines valid slots in Sidebar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the header title</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the close icon</span>\n }",
                                    "description": "close icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClose</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Close sidebar function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close sidebar function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "SidebarEmits": {
                    "description": "Defines valid emits in Sidebar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when sidebar gets shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when sidebar gets hidden."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SidebarPassThroughOptionType": {
                    "values": "SidebarPassThroughAttributes | (options: SidebarPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "SidebarPassThroughTransitionType": {
                    "values": "TransitionProps | (options: SidebarPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "sidebar/style/SidebarStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SidebarStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "skeleton": {
        "description": "Skeleton is a placeholder to display instead of the actual content.\n\n[Live Demo](https://www.primevue.org/skeleton/)",
        "components": {
            "default": {
                "description": "Skeleton is a placeholder to display instead of the actual content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SkeletonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SkeletonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SkeletonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SkeletonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SkeletonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SkeletonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SkeletonProps": {
                    "description": "Defines valid properties in Skeleton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "shape",
                            "optional": true,
                            "readonly": false,
                            "type": "\"circle\" | \"rectangle\"",
                            "default": "rectangle",
                            "description": "Shape of the element."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Size of the Circle or Square."
                        },
                        {
                            "name": "width",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "100%",
                            "description": "Width of the element."
                        },
                        {
                            "name": "height",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "1rem",
                            "description": "Height of the element."
                        },
                        {
                            "name": "borderRadius",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Border radius of the element, defaults to value from theme."
                        },
                        {
                            "name": "animation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"none\" | \"wave\"",
                            "default": "wave",
                            "description": "Type of the animation."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SkeletonPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SkeletonSlots": {
                    "description": "Defines valid slots in Skeleton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "SkeletonEmits": {
                    "description": "Defines valid emits in Skeleton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SkeletonPassThroughOptionType": {
                    "values": "SkeletonPassThroughAttributes | (options: SkeletonPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "skeleton/style/SkeletonStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SkeletonStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "slider": {
        "description": "Slider is a component to provide input with a drag handle.\n\n[Live Demo](https://www.primevue.org/slider/)",
        "components": {
            "default": {
                "description": "Slider is a component to provide input with a drag handle.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SliderPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SliderProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SliderPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SliderProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "range",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the range's DOM element."
                        },
                        {
                            "name": "handle",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the handle's DOM element."
                        },
                        {
                            "name": "startHandler",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the start handler's DOM element."
                        },
                        {
                            "name": "endHandler",
                            "optional": true,
                            "readonly": false,
                            "type": "SliderPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the end handler's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SliderPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SliderSlideEndEvent": {
                    "description": "Custom slide end event.",
                    "relatedProp": "SliderEmits.slideend",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New value."
                        }
                    ],
                    "methods": []
                },
                "SliderProps": {
                    "description": "Defines valid properties in Slider component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "number | number[]",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "min",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Mininum boundary value."
                        },
                        {
                            "name": "max",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "100",
                            "description": "Maximum boundary value."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the slider."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value."
                        },
                        {
                            "name": "range",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When speficed, allows two boundary values to be picked."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Used to define a string that labels the element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SliderPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SliderSlots": {
                    "description": "Defines valid slots in Slider component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "SliderEmits": {
                    "description": "Defines valid emits in Slider component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number | number[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "slideend",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SliderSlideEndEvent",
                                    "description": "Custom slide end event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when slide ends."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SliderPassThroughOptionType": {
                    "values": "SliderPassThroughAttributes | (options: SliderPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "slider/style/SliderStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SliderStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "speeddial": {
        "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.\n\n[Live Demo](https://www.primevue.org/speeddial/)",
        "components": {
            "default": {
                "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SpeedDialPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SpeedDialState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SpeedDialProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<SpeedDialSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the menu's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the menu item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "actionIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action icon's DOM element."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the mask's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SpeedDialState": {
                    "description": "Defines current inline state in SpeedDial component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "List of items' id."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current visible state as a boolean."
                        },
                        {
                            "name": "isItemClicked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current click state of component as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedOptionIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "-1",
                            "description": "Current focused option index as a number."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialContext": {
                    "description": "Defines current options in SpeedDial component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "hidden",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current hidden state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialTooltipOptions": {
                    "description": "Defines tooltip options.",
                    "relatedProp": "SpeedDialProps.tooltipOptions",
                    "props": [
                        {
                            "name": "event",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"focus\" | \"hover\"",
                            "default": "",
                            "description": "Event to show the tooltip, valid values are hover and focus."
                        },
                        {
                            "name": "position",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | \"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "bottom",
                            "description": "Position of element."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SpeedDialProps": {
                    "description": "Defines valid properties in SpeedDial component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the action items."
                        },
                        {
                            "name": "visible",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies the visibility of the overlay."
                        },
                        {
                            "name": "direction",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\" | \"up\" | \"down\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\"",
                            "default": "up",
                            "description": "Specifies the opening direction of actions."
                        },
                        {
                            "name": "transitionDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "30",
                            "description": "Transition delay step for each action item."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "\"linear\" | \"circle\" | \"semi-circle\" | \"quarter-circle\"",
                            "default": "linear",
                            "description": "Specifies the opening type of actions."
                        },
                        {
                            "name": "radius",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Radius for *circle types."
                        },
                        {
                            "name": "mask",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show a mask element behind the speeddial."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the component is disabled."
                        },
                        {
                            "name": "hideOnClickOutside",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the actions close when clicked outside."
                        },
                        {
                            "name": "buttonClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the button element."
                        },
                        {
                            "name": "maskStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the mask element."
                        },
                        {
                            "name": "maskClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the mask element."
                        },
                        {
                            "name": "showIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Show icon of the button element.",
                            "deprecated": "since v3.27.0. Use 'showicon' slot."
                        },
                        {
                            "name": "hideIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Hide icon of the button element.",
                            "deprecated": "since v3.27.0. Use 'hideicon' slot."
                        },
                        {
                            "name": "rotateAnimation",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defined to rotate showIcon when hideIcon is not present."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the element."
                        },
                        {
                            "name": "tooltipOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "SpeedDialTooltipOptions",
                            "default": "",
                            "description": "Whether to display the tooltip on items. The modifiers of Tooltip can be used like an object in it. Valid keys are 'event' and 'position'."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive list element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying list element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SpeedDialPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SpeedDialSlots": {
                    "description": "Defines valid slots in SpeedDial component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">onClick</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Item click function</span>\n}",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        },
                        {
                            "name": "button",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClick</span>: <span class=\"doc-option-parameter-type line-through\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Button click function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">toggleCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Button click function</span>\n}",
                                    "description": "button slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom button template."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">visible</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Visible state of the item</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        }
                    ]
                },
                "SpeedDialEmits": {
                    "description": "Defines valid emits in SpeedDial component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Fired when the button element clicked."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the actions are visible."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Fired when the actions are hidden."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SpeedDialPassThroughOptionType": {
                    "values": "SpeedDialPassThroughAttributes | (options: SpeedDialPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "speeddial/style/SpeedDialStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SpeedDialStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "splitbutton": {
        "description": "SplitButton groups a set of commands in an overlay with a default command.\n\n[Live Demo](https://www.primevue.org/splitbutton/)",
        "components": {
            "default": {
                "description": "SplitButton groups a set of commands in an overlay with a default command.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitButtonState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SplitButtonSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitButtonState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "SplitButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SplitButtonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "menuButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonPassThroughOptions<SplitButtonSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Button component."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptions<SplitButtonSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the TieredMenu component."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SplitButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SplitButtonState": {
                    "description": "Defines current inline state in SplitButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "isBlocked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current blocked state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "SplitButtonProps": {
                    "description": "Defines valid properties in SplitButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the button."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the icon.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "MenuModel instance to define the overlay items."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached.\nSpecial keywords are 'body' for document body and 'self' for the element itself."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "buttonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the default button."
                        },
                        {
                            "name": "menuButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the menu button."
                        },
                        {
                            "name": "menuButtonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the menu button icon.",
                            "deprecated": "since v3.27.0. Use 'menubuttonicon' slot."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"success\" | \"help\" | \"secondary\" | \"info\" | \"warning\" | \"danger\" | \"contrast\">",
                            "default": "",
                            "description": "Defines the style of the button."
                        },
                        {
                            "name": "raised",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a shadow to indicate elevation."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a circular border radius to the button."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a textual class to the button without a background initially."
                        },
                        {
                            "name": "outlined",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a border class without a background initially."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the button."
                        },
                        {
                            "name": "plain",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Add a plain textual class to the button without a background initially."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SplitButtonPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SplitButtonSlots": {
                    "description": "Defines valid slots in SplitButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Button part of the content can easily be customized with the default slot instead of using the built-in modes."
                        },
                        {
                            "name": "buttoncontent",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Command button part of the content can easily be customized with the button content slot."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom button icon template."
                        },
                        {
                            "name": "menubuttonicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "menubuttonicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu button icon template."
                        },
                        {
                            "name": "menuitemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "menuitemicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom menu item icon template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">TieredMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each menu item."
                        }
                    ]
                },
                "SplitButtonEmits": {
                    "description": "Defines valid emits in SplitButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when main button is clicked."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SplitButtonPassThroughOptionType": {
                    "values": "SplitButtonPassThroughAttributes | (options: SplitButtonPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "splitbutton/style/SplitButtonStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitButtonStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "splitter": {
        "description": "Splitter is utilized to separate and resize panels.\n\n[Live Demo](https://www.primevue.org/splitter/)",
        "components": {
            "default": {
                "description": "Splitter is utilized to separate and resize panels.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SplitterResizeStartEvent": {
                    "description": "Custom resize start event.",
                    "relatedProp": "SplitterEmits.resizestart",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "sizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Sizes of the panels"
                        }
                    ],
                    "methods": []
                },
                "SplitterResizeEvent": {
                    "description": "Custom resize event.",
                    "relatedProp": "SplitterEmits.resize",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "sizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Sizes of the panels"
                        }
                    ],
                    "methods": []
                },
                "SplitterResizeEndEvent": {
                    "description": "Custom resize end event.",
                    "relatedProp": "SplitterEmits.resizeend",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "sizes",
                            "optional": false,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Sizes of the panels"
                        }
                    ],
                    "methods": []
                },
                "SplitterPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "SplitterProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "gutter",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the gutter's DOM element."
                        },
                        {
                            "name": "gutterHandler",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the gutter handler's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SplitterPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SplitterState": {
                    "description": "Defines current inline state in Panel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "prevSize",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Previous size state as a number."
                        }
                    ],
                    "methods": []
                },
                "SplitterContext": {
                    "description": "Defines options in Splitter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "nested",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current nested state of the component."
                        }
                    ],
                    "methods": []
                },
                "SplitterProps": {
                    "description": "Defines valid properties in Splitter component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the panels."
                        },
                        {
                            "name": "gutterSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "4",
                            "description": "Size of the divider in pixels."
                        },
                        {
                            "name": "stateKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Storage identifier of a stateful Splitter."
                        },
                        {
                            "name": "stateStorage",
                            "optional": true,
                            "readonly": false,
                            "type": "\"local\" | \"session\"",
                            "default": "session",
                            "description": "Defines where a stateful splitter keeps its state, valid values are 'session' for sessionStorage and 'local' for localStorage."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Step factor to increment/decrement the size of the panels while pressing the arrow keys."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SplitterPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SplitterSlots": {
                    "description": "Defines valid slots in Splitter slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect SplitterPanel components."
                        }
                    ]
                },
                "SplitterEmits": {
                    "description": "Defines valid emits in Splitter component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "resizestart",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SplitterResizeStartEvent",
                                    "description": "Custom resize start event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when resize starts."
                        },
                        {
                            "name": "resize",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SplitterResizeEvent",
                                    "description": "Custom resize event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke during the resizing process."
                        },
                        {
                            "name": "resizeend",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "SplitterResizeEndEvent",
                                    "description": "Custom resize end event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when resize ends."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SplitterPassThroughOptionType": {
                    "values": "SplitterPassThroughAttributes | (options: SplitterPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "splitter/style/SplitterStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "splitterpanel": {
        "description": "SplitterPanel is a helper component for Splitter component.\n\n[Live Demo](https://www.primevue.org/splitter/)",
        "components": {
            "default": {
                "description": "SplitterPanel is a helper component for Splitter component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterPanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "SplitterPanelContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "undefined.PanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "SplitterPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelContext": {
                    "description": "Defines options in SplitterPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "nested",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current nested state of the panel."
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelProps": {
                    "description": "Defines valid properties in SplitterPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Size of the element relative to 100%."
                        },
                        {
                            "name": "minSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Minimum size of the element relative to 100%."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<SplitterPanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelSlots": {
                    "description": "Defines valid slots in SplitterPanel slots.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "default",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "SplitterPanelEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "SplitterPanelPassThroughOptionType": {
                    "values": "SplitterPanelPassThroughAttributes | (options: SplitterPanelPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "splitterpanel/style/SplitterPanelStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "SplitterPanelStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "stepper": {
        "description": "Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multi-step process.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "components": {
            "default": {
                "description": "Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multi-step process.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "StepperPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "StepperProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "nav",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the nav's DOM element."
                        },
                        {
                            "name": "panelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel container's DOM element."
                        },
                        {
                            "name": "stepperpanel",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the end handler's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StepperPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "StepperState": {
                    "description": "Defines current inline state in Stepper component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_activeStep",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current active index state."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique id for the Stepper component."
                        }
                    ],
                    "methods": []
                },
                "StepperChangeEvent": {
                    "description": "Custom tab change event.",
                    "relatedProp": "StepperEmits['step-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the selected stepper panel"
                        }
                    ],
                    "methods": []
                },
                "StepperProps": {
                    "description": "Defines valid properties in Stepper component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "activeStep",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Active step index of stepper."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the stepper."
                        },
                        {
                            "name": "linear",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the steps are clickable or not."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StepperPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "StepperSlots": {
                    "description": "Defines valid slots in Stepper component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        }
                    ]
                },
                "StepperEmits": {
                    "description": "Defines valid emits in Stepper component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:activeStep",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "step-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "StepperChangeEvent"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active panel is changed."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepperPassThroughOptionType": {
                    "values": "StepperPassThroughAttributes | (options: StepperPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "stepper/style/StepperStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "stepperpanel": {
        "description": "StepperPanel is a helper component for StepperPanel component.\n\n[Live Demo](https://www.primevue.org/stepper/)",
        "components": {
            "default": {
                "description": "StepperPanel is a helper component for Stepper component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperPanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "StepperPanelContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "StepperPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "StepperPanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "number",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the number's DOM element."
                        },
                        {
                            "name": "title",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "toggleableContent",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the toggleable content's DOM element."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "StepperPanelPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StepperPanelPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "StepperPanelProps": {
                    "description": "Defines valid properties in StepperPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Orientation of tab headers."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StepperPanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "StepperPanelContext": {
                    "description": "Defines current options in StepperPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the stepperpanel."
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Count of stepperpanels"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the stepperpanel is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the stepperpanel is last."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the stepperpanel is active."
                        },
                        {
                            "name": "highlighted",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the stepperpanel is highlighted."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the stepperpanel is disabled."
                        }
                    ],
                    "methods": []
                },
                "StepperPanelSlots": {
                    "description": "Defines valid slots in StepperPanel slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the stepperpanel</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current active state of the stepperpanel</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">highlighted</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current highlighted state of the stepperpanel</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the stepperpanel</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">headerClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the stepperpanel</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">numberClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the number content container</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">titleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the title content container</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">clickCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Header click function.</span>\n}"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the stepperpanel</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current active state of the stepperpanel</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">highlighted</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current highlighted state of the stepperpanel</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the stepperpanel</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">clickCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Content click function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">prevCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Content previous panel click function.</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">nextCallback</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">event</span>: Event) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Content next panel click function.</span>\n}"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "separator",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the stepperpanel</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current active state of the stepperpanel</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">highlighted</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current highlighted state of the stepperpanel</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the stepperpanel</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom separator template."
                        }
                    ]
                },
                "StepperPanelEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepperPanelPassThroughOptionType": {
                    "values": "StepperPanelPassThroughAttributes | (options: StepperPanelPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "StepperPanelPassThroughTransitionType": {
                    "values": "TransitionProps | (options: StepperPanelPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "stepperpanel/style/StepperPanelStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepperPanelStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "steps": {
        "description": "Steps components is an indicator for the steps in a wizard workflow. Example below uses nested routes with Steps.\n\n[Live Demo](https://www.primevue.org/steps/)",
        "components": {
            "default": {
                "description": "Steps components is an indicator for the steps in a wizard workflow. Example below uses nested routes with Steps.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepsPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "StepsProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "StepsContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "StepsPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "StepsProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the step's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "StepsPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StepsPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "StepsContext": {
                    "description": "Defines current options in Steps component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "StepsRouterBindProps": {
                    "description": "Defines valid router binding props in Steps component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "step",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        }
                    ],
                    "methods": []
                },
                "StepsProps": {
                    "description": "Defines valid properties in Steps component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the items are clickable or not."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path.",
                            "deprecated": "since v3.40.0."
                        },
                        {
                            "name": "activeStep",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Active step index of menuitem."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StepsPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "StepsSlots": {
                    "description": "Defines valid slots in Steps component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current active state of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Order of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">StepsRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        }
                    ]
                },
                "StepsEmits": {
                    "description": "Defines valid emits in Steps component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "StepsPassThroughOptionType": {
                    "values": "StepsPassThroughAttributes | (options: StepsPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "steps/style/StepsStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StepsStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "styleclass": {
        "description": "StyleClass manages css classes declaratively to during enter/leave animations or just to toggle classes on an element.\n\n[Live Demo](https://primevue.org/styleclass)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StyleClassOptions": {
                    "description": "Defines options of StyleClass.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "selector",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"@next\" | \"@prev\" | \"@parent\" | \"@grandparent\">",
                            "default": "",
                            "description": "Selector to define the target element. Available selectors are '@next', '@prev', '@parent' and '@grandparent'."
                        },
                        {
                            "name": "enterClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed.",
                            "deprecated": "since v3.41.0. Use 'enterFromClass' option instead."
                        },
                        {
                            "name": "enterFromClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "enterActiveClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during enter animation."
                        },
                        {
                            "name": "enterToClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get displayed."
                        },
                        {
                            "name": "leaveClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get hidden.",
                            "deprecated": "since v3.41.0. Use 'leaveFromClass' option instead."
                        },
                        {
                            "name": "leaveFromClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when item begins to get hidden."
                        },
                        {
                            "name": "leaveActiveClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add during leave animation."
                        },
                        {
                            "name": "leaveToClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class to add when leave animation is completed."
                        },
                        {
                            "name": "hideOnOutsideClick",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to trigger leave animation when outside of the element is clicked."
                        },
                        {
                            "name": "toggleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Adds or removes a class when no enter-leave animation is required."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<StyleClassDirectivePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "StyleClassDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) directive options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "DirectiveHooks<any, any>",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "StyleClassDirectiveBinding": {
                    "description": "Binding of StyleClass directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "StyleClassOptions",
                            "default": "",
                            "description": "Value of the StyleClass."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        }
    },
    "styleclass/style/StyleClassStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StyleClassStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "tabmenu": {
        "description": "TabMenu is a navigation component that displays items as tab headers. Example below uses nested routes with TabMenu.\n\n[Live Demo](https://www.primevue.org/tabmenu/)",
        "components": {
            "default": {
                "description": "TabMenu is a navigation component that displays items as tab headers. Example below uses nested routes with TabMenu.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabMenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TabMenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TabMenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TabMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TabMenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "inkbar",
                            "optional": true,
                            "readonly": false,
                            "type": "TabMenuPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the inkbar's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TabMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TabMenuState": {
                    "description": "Defines current inline state in TabMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current active index state as a number."
                        }
                    ],
                    "methods": []
                },
                "TabMenuContext": {
                    "description": "Defines current options in TabMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem"
                        }
                    ],
                    "methods": []
                },
                "TabMenuChangeEvent": {
                    "description": "Custom change event.",
                    "relatedProp": "TabMenuEmits['tab-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the selected tab"
                        }
                    ],
                    "methods": []
                },
                "TabMenuRouterBindProps": {
                    "description": "Defines valid router binding props in TabMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        }
                    ],
                    "methods": []
                },
                "TabMenuProps": {
                    "description": "Defines valid properties in TabMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Defines if active route highlight should match the exact route path.",
                            "deprecated": "since v3.40.0."
                        },
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Active index of menuitem."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TabMenuPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TabMenuSlots": {
                    "description": "Defines valid slots in TabMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Current active state of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">TabMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        }
                    ]
                },
                "TabMenuEmits": {
                    "description": "Defines valid emits in TabMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "tab-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabMenuChangeEvent",
                                    "description": "Custom tab change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is changed."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabMenuPassThroughOptionType": {
                    "values": "TabMenuPassThroughAttributes | (options: TabMenuPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "tabmenu/style/TabMenuStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabMenuStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "tabpanel": {
        "description": "TabPanel is a helper component for TabPanel component.\n\n[Live Demo](https://www.primevue.org/tabview/)",
        "components": {
            "default": {
                "description": "TabPanel is a helper component for TabView component.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabPanelPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabPanelProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TabPanelContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TabPanelPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TabPanelProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "headerAction",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header action's DOM element."
                        },
                        {
                            "name": "headerTitle",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the title's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TabPanelPassThroughAttributes": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TabPanelProps": {
                    "description": "Defines valid properties in TabPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Orientation of tab headers."
                        },
                        {
                            "name": "headerStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab header."
                        },
                        {
                            "name": "headerClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab header."
                        },
                        {
                            "name": "headerProps",
                            "optional": true,
                            "readonly": false,
                            "type": "LiHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLLiElement to the tab header.",
                            "deprecated": "since v3.26.0. Use 'pt' property instead."
                        },
                        {
                            "name": "headerActionProps",
                            "optional": true,
                            "readonly": false,
                            "type": "AnchorHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLAnchorElement to the focusable anchor element inside the tab header.",
                            "deprecated": "since v3.26.0. Use 'pt' property instead."
                        },
                        {
                            "name": "contentStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the tab content."
                        },
                        {
                            "name": "contentClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the tab content."
                        },
                        {
                            "name": "contentProps",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLDivElement to the tab content.",
                            "deprecated": "since v3.26.0. Use 'pt' property instead."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the tab is disabled."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TabPanelPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        }
                    ],
                    "methods": []
                },
                "TabPanelContext": {
                    "description": "Defines current options in TabPanel component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the tab."
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Count of tabs"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is last."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the tab is active."
                        }
                    ],
                    "methods": []
                },
                "TabPanelSlots": {
                    "description": "Defines valid slots in TabPanel slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        }
                    ]
                },
                "TabPanelEmits": {
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabPanelPassThroughOptionType": {
                    "values": "TabPanelPassThroughAttributes | (options: TabPanelPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "tabpanel/style/TabPanelStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabPanelStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "tabview": {
        "description": "TabView is a container component to group content with tabs.\n\n[Live Demo](https://www.primevue.org/tabview/)",
        "components": {
            "default": {
                "description": "TabView is a container component to group content with tabs.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabViewPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TabViewProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TabViewState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TabViewChangeEvent": {
                    "description": "Custom tab change event.",
                    "relatedProp": "TabViewEmits['tab-change']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the selected tab"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "TabViewClickEvent"
                },
                "TabViewClickEvent": {
                    "description": "Custom tab change event.",
                    "relatedProp": "TabViewEmits['tab-click']",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the selected tab"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "TabViewChangeEvent"
                },
                "TabViewPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TabViewProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "navContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the nav container's DOM element."
                        },
                        {
                            "name": "navContent",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the nav content's DOM element."
                        },
                        {
                            "name": "nav",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "inkbar",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the inkbar's DOM element."
                        },
                        {
                            "name": "previousButton",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous button's DOM element."
                        },
                        {
                            "name": "previousIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the previous button icon's DOM element."
                        },
                        {
                            "name": "nextButton",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next button's DOM element."
                        },
                        {
                            "name": "nextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the next button icon's DOM element."
                        },
                        {
                            "name": "panelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TabViewPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "tab",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to TabPanel helper components.",
                            "deprecated": "since v3.30.1. Use 'tabpanel' property instead."
                        },
                        {
                            "name": "tabpanel",
                            "optional": true,
                            "readonly": false,
                            "type": "TabPanelPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to TabPanel helper components."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TabViewPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TabViewState": {
                    "description": "Defines current inline state in TabView component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_activeIndex",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current active index state."
                        },
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique id for the TabView component."
                        },
                        {
                            "name": "isPrevButtonDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Current state of previous button."
                        },
                        {
                            "name": "isNextButtonDisabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current state of the next button."
                        }
                    ],
                    "methods": []
                },
                "TabViewProps": {
                    "description": "Defines valid properties in TabView component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "activeIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the active tab."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, hidden tabs are not rendered at all. Defaults to false that hides tabs with css."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled displays buttons at each side of the tab headers to scroll the tab list."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "selectOnFocus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated."
                        },
                        {
                            "name": "previousButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the previous button.",
                            "deprecated": "since v3.26.0. Use 'pt' property instead."
                        },
                        {
                            "name": "nextButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the next button.",
                            "deprecated": "since v3.26.0. Use 'pt' property instead."
                        },
                        {
                            "name": "prevIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Previous icon of the scrollable tabview.",
                            "deprecated": "since v3.27.0. Use 'previousicon' slot."
                        },
                        {
                            "name": "nextIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Next icon of the scrollable tabview.",
                            "deprecated": "since v3.27.0. Use 'next' slot."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TabViewPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TabViewSlots": {
                    "description": "Defines valid slots in TabView slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default slot to detect TabPanel components."
                        },
                        {
                            "name": "previousicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Previous button icon template for the scrollable component."
                        },
                        {
                            "name": "nexticon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Next button icon template for the scrollable component."
                        }
                    ]
                },
                "TabViewEmits": {
                    "description": "Defines valid emits in TabView component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:activeIndex",
                            "parameters": [
                                {
                                    "name": "index",
                                    "optional": false,
                                    "type": "number",
                                    "description": "Current activeIndex."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the activeIndex changes."
                        },
                        {
                            "name": "tab-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabViewChangeEvent",
                                    "description": "Custom tab change event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is changed."
                        },
                        {
                            "name": "tab-click",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TabViewClickEvent",
                                    "description": "Custom tab click event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when an active tab is clicked."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TabViewPassThroughOptionType": {
                    "values": "TabViewPassThroughAttributes | (options: TabViewPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "tabview/style/TabViewStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TabViewStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "tag": {
        "description": "Tag component is used to categorize content.\n\n[Live Demo](https://www.primevue.org/tag)",
        "components": {
            "default": {
                "description": "Tag component is used to categorize content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TagProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TagPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TagProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "TagPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the value's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TagPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TagProps": {
                    "description": "Defines valid properties in Tag component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value to display inside the tag."
                        },
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"success\" | \"secondary\" | \"info\" | \"warning\" | \"danger\" | \"contrast\">",
                            "default": "",
                            "description": "Severity type of the tag."
                        },
                        {
                            "name": "rounded",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the corners of the tag are rounded."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the tag to display next to the value.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TagPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TagSlots": {
                    "description": "Defines valid slots in Tag component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template"
                        },
                        {
                            "name": "icon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template"
                        }
                    ]
                },
                "TagEmits": {
                    "description": "Defines valid emits in Tag component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TagPassThroughOptionType": {
                    "values": "TagPassThroughAttributes | (options: TagPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "tag/style/TagStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TagStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "terminal": {
        "description": "Terminal is a text based user interface.\n\n[Live Demo](https://www.primevue.org/terminal)",
        "components": {
            "default": {
                "description": "Terminal is a text based user interface.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TerminalPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TerminalProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TerminalState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TerminalPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TerminalProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "welcomeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the welcome message's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "commands",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the commands' DOM element."
                        },
                        {
                            "name": "prompt",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the prompt's DOM element."
                        },
                        {
                            "name": "command",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the command's DOM element."
                        },
                        {
                            "name": "response",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the response's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "commandText",
                            "optional": true,
                            "readonly": false,
                            "type": "TerminalPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the command text's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TerminalPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TerminalState": {
                    "description": "Defines current inline state in Terminal component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "commandText",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current command text as a string."
                        },
                        {
                            "name": "commands",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Current commands as an array."
                        }
                    ],
                    "methods": []
                },
                "TerminalProps": {
                    "description": "Defines valid properties in Terminal component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "welcomeMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Initial text to display on terminal."
                        },
                        {
                            "name": "prompt",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Prompt text for each command."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TerminalPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TerminalSlots": {
                    "description": "Defines valid slots in Terminal component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TerminalEmits": {
                    "description": "Defines valid emits in Terminal component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TerminalPassThroughOptionType": {
                    "values": "TerminalPassThroughAttributes | (options: TerminalPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "terminal/style/TerminalStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TerminalStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "terminalservice": {
        "description": "[Live Demo](https://www.primevue.org/terminal/)",
        "model": {
            "TerminalServiceOptions": {
                "description": "Confirmation Service methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "on",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "undefined | \"command\" | \"response\""
                                },
                                {
                                    "name": "fn",
                                    "optional": false,
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the terminal using the action options."
                        },
                        {
                            "name": "emit",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "undefined | \"command\" | \"response\""
                                },
                                {
                                    "name": "params",
                                    "optional": true,
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emits the terminal using the action options."
                        },
                        {
                            "name": "off",
                            "parameters": [
                                {
                                    "name": "action",
                                    "optional": false,
                                    "type": "undefined | \"command\" | \"response\""
                                },
                                {
                                    "name": "fn",
                                    "optional": false,
                                    "type": "any"
                                }
                            ],
                            "returnType": "void",
                            "description": "Closes the terminal using the action options."
                        }
                    ]
                }
            }
        }
    },
    "textarea": {
        "description": "Textarea is a multi-line text input element.\n\n[Live Demo](https://www.primevue.org/textarea/)",
        "components": {
            "default": {
                "description": "Textarea is a multi-line text input element.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TextareaPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TextareaProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TextareaContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TextareaPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TextareaProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TextareaPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TextareaPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TextareaContext": {
                    "description": "Defines current options in Textarea component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "filled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current filled state of the component as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of the component as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TextareaProps": {
                    "description": "Defines valid properties in Textarea component. In addition to these, all properties of TextareaHTMLAttributes can be used in this component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<string>",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "autoResize",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, height of textarea changes as being typed."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TextareaPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "TextareaHTMLAttributes"
                },
                "TextareaSlots": {
                    "description": "Defines valid slots in Textarea component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                },
                "TextareaEmits": {
                    "description": "Defines valid emits in Textarea component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "update:modelValue",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TextareaPassThroughOptionType": {
                    "values": "TextareaPassThroughAttributes | (options: TextareaPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "textarea/style/TextareaStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TextareaStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "tieredmenu": {
        "description": "TieredMenu displays submenus in nested overlays.\n\n[Live Demo](https://www.primevue.org/menu/)",
        "components": {
            "default": {
                "description": "TieredMenu displays submenus in nested overlays.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Hides the overlay."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TieredMenuPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TieredMenuPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TieredMenuProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "menu",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the list's DOM element."
                        },
                        {
                            "name": "menuitem",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the list item's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "action",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the action's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "submenuIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the submenu icon's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "submenu",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the submenu's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "TieredMenuPassThroughTransitionType<any>",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "TieredMenuPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TieredMenuFocusedItemInfo": {
                    "description": "Defines focused item info",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item index"
                        },
                        {
                            "name": "level",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Active item level"
                        },
                        {
                            "name": "parentKey",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Parent key info"
                        }
                    ],
                    "methods": []
                },
                "TieredMenuState": {
                    "description": "Defines current inline state in TieredMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current id state as a string."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focus state as a boolean."
                        },
                        {
                            "name": "focusedItemInfo",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuFocusedItemInfo",
                            "default": "",
                            "description": "Current focused item info."
                        },
                        {
                            "name": "activeItemPath",
                            "optional": false,
                            "readonly": false,
                            "type": "TieredMenuFocusedItemInfo[]",
                            "default": "",
                            "description": "Active item path."
                        },
                        {
                            "name": "visible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Current visible state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TieredMenuContext": {
                    "description": "Defines current options in TieredMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "item",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current menuitem"
                        },
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the menuitem."
                        },
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state of menuitem as a boolean."
                        },
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state of menuitem as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state of menuitem as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TieredMenuRouterBindProps": {
                    "description": "Defines valid router binding props in TieredMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "action",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Action element binding"
                        },
                        {
                            "name": "icon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Icon element binding"
                        },
                        {
                            "name": "label",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Label element binding"
                        },
                        {
                            "name": "submenuicon",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Submenuicon elemnt binding"
                        }
                    ],
                    "methods": []
                },
                "TieredMenuProps": {
                    "description": "Defines valid properties in TieredMenuMenu component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "model",
                            "optional": true,
                            "readonly": false,
                            "type": "MenuItem[]",
                            "default": "",
                            "description": "An array of menuitems."
                        },
                        {
                            "name": "popup",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "exact",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to apply 'router-link-active-exact' class if route exactly matches the item path.",
                            "deprecated": "since v3.40.0."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TieredMenuPassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TieredMenuSlots": {
                    "description": "Defines valid slots in TieredMenuMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">label</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// Label property of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">props</span>: <span class=\"doc-option-parameter-type\">TieredMenuRouterBindProps</span>, <span class=\"doc-option-parameter-type\">// Binding properties of the menuitem</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">hasSubmenu</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether or not there is a submenu</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content for each item."
                        },
                        {
                            "name": "submenuicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">active</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether item is active</span>\n }",
                                    "description": "submenuicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom submenu icon template."
                        },
                        {
                            "name": "itemicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">MenuItem</span>, <span class=\"doc-option-parameter-type\">// Menuitem instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the item icon element.</span>\n }",
                                    "description": "item icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item icon template."
                        },
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        }
                    ]
                },
                "TieredMenuEmits": {
                    "description": "Defines valid emits in TieredMenuMenu component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the popup is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the popup is hidden."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TieredMenuPassThroughOptionType": {
                    "values": "TieredMenuPassThroughAttributes | (options: TieredMenuPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TieredMenuPassThroughTransitionType": {
                    "values": "TransitionProps | (options: TieredMenuPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "tieredmenu/style/TieredMenuStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TieredMenuStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "timeline": {
        "description": "Timeline visualizes a series of chained events.\n\n[Live Demo](https://primevue.org/timeline)",
        "components": {
            "default": {
                "description": "Timeline visualizes a series of chained events.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TimelinePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TimelineProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TimelineContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TimelinePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TimelineProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "event",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the event's DOM element."
                        },
                        {
                            "name": "opposite",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the opposite's DOM element."
                        },
                        {
                            "name": "separator",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the separator's DOM element."
                        },
                        {
                            "name": "marker",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the marker's DOM element."
                        },
                        {
                            "name": "connector",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the connector's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TimelinePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TimelinePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TimelineContext": {
                    "description": "Defines current options in Timeline component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of the item as a number."
                        }
                    ],
                    "methods": []
                },
                "TimelineProps": {
                    "description": "Defines valid properties in Timeline component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "An array of events to display."
                        },
                        {
                            "name": "align",
                            "optional": true,
                            "readonly": false,
                            "type": "\"alternate\" | \"left\" | \"top\" | \"bottom\" | \"right\"",
                            "default": "left",
                            "description": "Position of the timeline bar relative to the content."
                        },
                        {
                            "name": "layout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"horizontal\" | \"vertical\"",
                            "default": "horizontal",
                            "description": "Orientation of the timeline."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TimelinePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TimelineSlots": {
                    "description": "Defines valid slots in Timeline component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of item</span>\n }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template"
                        },
                        {
                            "name": "opposite",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of item</span>\n }",
                                    "description": "opposite slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom opposite template."
                        },
                        {
                            "name": "marker",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of item</span>\n }",
                                    "description": "marker slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom marker template."
                        },
                        {
                            "name": "connector",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item data</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">index</span>: <span class=\"doc-option-parameter-type\">number</span>, <span class=\"doc-option-parameter-type\">// Index of item</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom connector template."
                        }
                    ]
                },
                "TimelineEmits": {
                    "description": "Defines valid emits in Timeline component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TimelinePassThroughOptionType": {
                    "values": "TimelinePassThroughAttributes | (options: TimelinePassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "timeline/style/TimelineStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TimelineStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "toast": {
        "description": "Toast is used to display messages in an overlay.\n\n[Live Demo](https://www.primevue.org/toast/)",
        "components": {
            "default": {
                "description": "Toast is used to display messages in an overlay.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToastPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ToastProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ToastState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ToastPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ToastProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the message's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the text's DOM element."
                        },
                        {
                            "name": "summary",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the summary's DOM element."
                        },
                        {
                            "name": "detail",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the detail's DOM element."
                        },
                        {
                            "name": "buttonContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the button container's DOM element."
                        },
                        {
                            "name": "button",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the button's DOM element.",
                            "deprecated": "since v3.30.2. Use 'closeButton' option."
                        },
                        {
                            "name": "closeButton",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the button's DOM element."
                        },
                        {
                            "name": "buttonIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the button icon's DOM element.",
                            "deprecated": "since v3.30.2. Use 'closeIcon' option."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the button icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "ToastPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ToastMessageOptions": {
                    "description": "Defines message options in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "severity",
                            "optional": true,
                            "readonly": false,
                            "type": "\"error\" | \"success\" | \"secondary\" | \"info\" | \"contrast\" | \"warn\"",
                            "default": "info",
                            "description": "Severity level of the message."
                        },
                        {
                            "name": "summary",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Summary content of the message."
                        },
                        {
                            "name": "detail",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Detail content of the message."
                        },
                        {
                            "name": "closable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether the message can be closed manually using the close icon."
                        },
                        {
                            "name": "life",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Delay in milliseconds to close the message automatically."
                        },
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Key of the Toast to display the message."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the message."
                        },
                        {
                            "name": "contentStyleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the content."
                        }
                    ],
                    "methods": []
                },
                "ToastBreakpointsType": {
                    "description": "Defines breakpoints type in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ToastState": {
                    "description": "Defines current inline state in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "messages",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current messages."
                        }
                    ],
                    "methods": []
                },
                "ToastProps": {
                    "description": "Defines valid properties in Toast component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "group",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of a message group."
                        },
                        {
                            "name": "position",
                            "optional": true,
                            "readonly": false,
                            "type": "\"center\" | \"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\"",
                            "default": "top-right",
                            "description": "Position of the toast in viewport."
                        },
                        {
                            "name": "autoZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to automatically manage layering."
                        },
                        {
                            "name": "baseZIndex",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Base zIndex value to use in layering."
                        },
                        {
                            "name": "breakpoints",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastBreakpointsType",
                            "default": "",
                            "description": "Object literal to define styles per screen size."
                        },
                        {
                            "name": "closeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the toast close button.",
                            "deprecated": "since v3.27.0. Use 'closeicon' slot."
                        },
                        {
                            "name": "infoIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the toast with info severity.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "warnIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the toast with warn severity.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "errorIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the toast with error severity.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "successIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display in the toast with success severity.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "closeButtonProps",
                            "optional": true,
                            "readonly": false,
                            "type": "ButtonHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLButtonElement to the close button.",
                            "deprecated": "since v3.26.0. Use 'pt' property."
                        },
                        {
                            "name": "message",
                            "optional": true,
                            "readonly": false,
                            "type": "ToastMessageOptions",
                            "default": "",
                            "description": "Used to access message options."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ToastPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ToastSlots": {
                    "description": "Defines valid slot in Toast component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "message",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n }",
                                    "description": "message slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom message template."
                        },
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        },
                        {
                            "name": "closeicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Style class of the close icon</span>\n }",
                                    "description": "close icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom close icon template."
                        },
                        {
                            "name": "container",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">message</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Message of the component</span>\n \t <span class=\"ml-3 doc-option-parameter-name line-through\">onClose</span>: <span class=\"doc-option-parameter-type line-through\">() &rArr; void</span>, <span class=\"doc-option-parameter-type line-through\">// Close toast function</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">closeCallback</span>: <span class=\"doc-option-parameter-type\">() &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Close sidebar function.</span>\n}",
                                    "description": "container slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom container slot."
                        }
                    ]
                },
                "ToastEmits": {
                    "description": "Defines valid emits in Toast component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "close",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessageOptions",
                                    "description": "Toast message."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the toast is closed."
                        },
                        {
                            "name": "life-end",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessageOptions",
                                    "description": "Toast message."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the toast's timeout is over."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToastPassThroughOptionType": {
                    "values": "ToastPassThroughAttributes | (options: ToastPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "ToastPassThroughTransitionType": {
                    "values": "TransitionProps | (options: ToastPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "toast/style/ToastStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToastStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "toastservice-usetoast": {
        "description": "[Live Demo](https://www.primevue.org/toast/)",
        "model": {
            "ToastServiceMethods": {
                "description": "Toast Service methods.",
                "props": {
                    "description": "",
                    "values": []
                },
                "methods": {
                    "description": "",
                    "values": [
                        {
                            "name": "add",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessageOptions",
                                    "description": "Message instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Displays the message in a suitable Toast component."
                        },
                        {
                            "name": "remove",
                            "parameters": [
                                {
                                    "name": "message",
                                    "optional": false,
                                    "type": "ToastMessageOptions",
                                    "description": "Message instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Clears the message."
                        },
                        {
                            "name": "removeGroup",
                            "parameters": [
                                {
                                    "name": "group",
                                    "optional": false,
                                    "type": "string",
                                    "description": "Name of the message group."
                                }
                            ],
                            "returnType": "void",
                            "description": "Clears the messages that belongs to the group."
                        },
                        {
                            "name": "removeAllGroups",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Clears all the messages."
                        }
                    ]
                }
            }
        }
    },
    "togglebutton": {
        "description": "ToggleButton is used to select a boolean value using a button.\n\n[Live Demo](https://www.primevue.org/togglebutton/)",
        "components": {
            "default": {
                "description": "ToggleButton is used to select a boolean value using a button.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ToggleButtonProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "ToggleButtonState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "ToggleButtonContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ToggleButtonProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "box",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the box's DOM element."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "ToggleButtonPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonState": {
                    "description": "Defines current inline state in ToggleButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonContext": {
                    "description": "Defines current options in ToggleButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current highlighted state as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonProps": {
                    "description": "Defines valid properties in ToggleButton component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Value of the component."
                        },
                        {
                            "name": "onIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon for the on state.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "offIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon for the off state.",
                            "deprecated": "since v3.27.0. Use 'icon' slot."
                        },
                        {
                            "name": "onLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "yes",
                            "description": "Label for the on state."
                        },
                        {
                            "name": "offLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "no",
                            "description": "Label for the off state."
                        },
                        {
                            "name": "iconPos",
                            "optional": true,
                            "readonly": false,
                            "type": "\"left\" | \"right\"",
                            "default": "left",
                            "description": "Position of the icon."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the focus input to match a label defined for the chips."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ToggleButtonPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ToggleButtonSlots": {
                    "description": "Defines valid slots in ToggleButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "icon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Current value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Icon style class</span>\n }",
                                    "description": "icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom icon template."
                        }
                    ]
                },
                "ToggleButtonEmits": {
                    "description": "Defines valid emits in ToggleButton component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "boolean",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonPassThroughOptionType": {
                    "values": "ToggleButtonPassThroughAttributes | (options: ToggleButtonPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "togglebutton/style/ToggleButtonStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToggleButtonStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "toolbar": {
        "description": "Toolbar is a grouping component for buttons and other content.\n\n[Live Demo](https://www.primevue.org/toolbar/)",
        "components": {
            "default": {
                "description": "Toolbar is a grouping component for buttons and other content.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "ToolbarProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "ToolbarPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "ToolbarProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "start",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the start's DOM element."
                        },
                        {
                            "name": "center",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the center's DOM element."
                        },
                        {
                            "name": "end",
                            "optional": true,
                            "readonly": false,
                            "type": "ToolbarPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the right's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "ToolbarPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "ToolbarProps": {
                    "description": "Defines valid properties in Toolbar component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<ToolbarPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "ToolbarSlots": {
                    "description": "Defines valid slots in Toolbar slots.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "start",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom start template."
                        },
                        {
                            "name": "center",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom center template."
                        },
                        {
                            "name": "end",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom end template."
                        }
                    ]
                },
                "ToolbarEmits": {
                    "description": "Defines valid emits in Toolbar component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": []
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "ToolbarPassThroughOptionType": {
                    "values": "ToolbarPassThroughAttributes | (options: ToolbarPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "toolbar/style/ToolbarStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "ToolbarStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "tooltip": {
        "description": "Tooltip directive provides advisory information for a component.\n\n[Live Demo](https://primevue.org/tooltip)",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TooltipPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TooltipContext",
                            "default": ""
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TooltipOptions": {
                    "description": "Defines options of Tooltip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Text of the tooltip."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "When present, it adds a custom id to the tooltip."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "When present, it adds a custom class to the tooltip."
                        },
                        {
                            "name": "escape",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "By default the tooltip contents are not rendered as text. Set to false to support html tags in the content."
                        },
                        {
                            "name": "fitContent",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Automatically adjusts the element position when there is not enough space on the selected position."
                        },
                        {
                            "name": "showDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "When present, it adds a custom delay to the tooltip's display."
                        },
                        {
                            "name": "hideDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "When present, it adds a custom delay to the tooltip's hiding."
                        },
                        {
                            "name": "autoHide",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to hide tooltip when hovering over tooltip content."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TooltipDirectivePassThroughOptions>",
                            "default": "",
                            "description": "Uses to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TooltipDirectivePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TooltipOptions.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "text",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the text's DOM element."
                        },
                        {
                            "name": "arrow",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipDirectivePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the arrow's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "DirectiveHooks<any, any>",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TooltipDirectivePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TooltipContext": {
                    "description": "Defines current options in Tooltip directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "top",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current top position state as a boolean."
                        },
                        {
                            "name": "right",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current right position state as a boolean."
                        },
                        {
                            "name": "bottom",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current bottom position state as a boolean."
                        },
                        {
                            "name": "left",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Current left position state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TooltipDirectiveModifiers": {
                    "description": "Defines modifiers of Tooltip.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "right",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Right position for Tooltip."
                        },
                        {
                            "name": "left",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Left position for Tooltip."
                        },
                        {
                            "name": "top",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Top position for Tooltip."
                        },
                        {
                            "name": "bottom",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Bottom position for Tooltip."
                        },
                        {
                            "name": "focus",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Focus event for Tooltip."
                        }
                    ],
                    "methods": []
                },
                "TooltipDirectiveBinding": {
                    "description": "Binding of Tooltip directive.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "string | TooltipOptions",
                            "default": "",
                            "description": "Value of the tooltip."
                        },
                        {
                            "name": "modifiers",
                            "optional": true,
                            "readonly": false,
                            "type": "TooltipDirectiveModifiers",
                            "default": "",
                            "description": "Modifiers of the tooltip."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "Omit<DirectiveBinding, \"modifiers\" | \"value\">"
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TooltipDirectivePassThroughOptionType": {
                    "values": "TooltipDirectivePassThroughAttributes | (options: TooltipPassThroughMethodOptions) => TooltipDirectivePassThroughAttributes | null | undefined"
                }
            }
        }
    },
    "tooltip/style/TooltipStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TooltipStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "tree": {
        "description": "Tree is used to display hierarchical data.\n\n[Live Demo](https://www.primevue.org/tree/)",
        "components": {
            "default": {
                "description": "Tree is used to display hierarchical data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "T",
                            "default": "",
                            "description": "Defines parent instance."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TreeExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeSelectionKeys": {
                    "description": "Custom selection keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "TreeEmits.filter",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Original event"
                        },
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter value"
                        }
                    ],
                    "methods": []
                },
                "TreePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TreeProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "filterContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the filter container's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "searchIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the search icon's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "container",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the container's DOM element."
                        },
                        {
                            "name": "node",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the node's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "toggler",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the toggler's DOM element."
                        },
                        {
                            "name": "togglerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the toggler icon's DOM element."
                        },
                        {
                            "name": "nodeCheckbox",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the checkbox's DOM element."
                        },
                        {
                            "name": "nodeIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the node icon's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "subgroup",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the subgroup's DOM element."
                        },
                        {
                            "name": "loadingOverlay",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the loading overlay's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptionType<T>",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TreePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeState": {
                    "description": "Defines current inline state in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_expandedKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeExpandedKeys",
                            "default": "",
                            "description": "Current expanded keys state."
                        },
                        {
                            "name": "filterValue",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Current filter value state as a string."
                        }
                    ],
                    "methods": []
                },
                "TreeContext": {
                    "description": "Defines current options in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the node."
                        },
                        {
                            "name": "expanded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current expanded state of the node as a boolean."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selected state of the node as a boolean."
                        },
                        {
                            "name": "checked",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current checked state of the node as a boolean."
                        },
                        {
                            "name": "leaf",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current leaf state of the node as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TreeProps": {
                    "description": "Defines valid properties in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeExpandedKeys",
                            "default": "",
                            "description": "A map of keys to represent the expansion state in controlled mode."
                        },
                        {
                            "name": "selectionKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectionKeys",
                            "default": "",
                            "description": "A map of keys to control the selection state."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\"",
                            "default": "",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to display loading indicator."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to display when tree is loading.",
                            "deprecated": "since v3.27.0. Use 'loadingicon' slot."
                        },
                        {
                            "name": "loadingMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"mask\" | \"icon\"",
                            "default": "mask",
                            "description": "Loading mode display."
                        },
                        {
                            "name": "filter",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items."
                        },
                        {
                            "name": "filterBy",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against."
                        },
                        {
                            "name": "filterMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"strict\" | \"lenient\"",
                            "default": "lenient",
                            "description": "Mode for filtering."
                        },
                        {
                            "name": "filterPlaceholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Placeholder text to show when filter input is empty."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "highlightOnSelect",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Highlights automatically the first item."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"flex\">",
                            "default": "",
                            "description": "Height of the scroll viewport in fixed units or the 'flex' keyword for a dynamic size."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Defines a string value that labels an interactive element."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying menu element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TreePassThroughOptions<any>>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TreeSlots": {
                    "description": "Defines valid slots in Tree component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "Function"
                        }
                    ],
                    "methods": [
                        {
                            "name": "default",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Default content slot."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "loadingicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "searchicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "searchicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom search icon template."
                        },
                        {
                            "name": "togglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Tree node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Expanded state of the node</span>\n }",
                                    "description": "togglericon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom toggler icon template."
                        },
                        {
                            "name": "checkboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Check state of the node</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">partialChecked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Partial check state of the node</span>\n }",
                                    "description": "checkboxicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom checkbox icon"
                        }
                    ]
                },
                "TreeEmits": {
                    "description": "Defines valid emits in Tree component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:expandedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "TreeExpandedKeys",
                                    "description": "New expanded keys."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expanded keys change."
                        },
                        {
                            "name": "update:selectionKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "TreeSelectionKeys",
                                    "description": "New selection keys."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection keys change."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-collapse",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on filter input."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TreePassThroughOptionType": {
                    "values": "TreePassThroughAttributes | (options: TreePassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "tree/style/TreeStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "treenode": {
        "description": "PrimeVue tree components share a common api to specify the node.",
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeNode": {
                    "description": "Custom TreeNode metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "key",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Mandatory unique key of the node."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label of the node."
                        },
                        {
                            "name": "data",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Data represented by the node."
                        },
                        {
                            "name": "type",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Type of the node to match a template."
                        },
                        {
                            "name": "icon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon of the node to display next to content."
                        },
                        {
                            "name": "children",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes as children."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the node."
                        },
                        {
                            "name": "styleClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Style class of the node."
                        },
                        {
                            "name": "selectable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the node is selectable when selection mode is enabled."
                        },
                        {
                            "name": "leaf",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Specifies if the node has children. Used in lazy loading."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Specifies the node loading. Used in Tree and TreeTable."
                        },
                        {
                            "name": "expandedIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to use in expanded state."
                        },
                        {
                            "name": "collapsedIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Icon to use in collapsed state."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "treeselect": {
        "description": "TreeSelect is a form component to choose from hierarchical data.\n\n[Live Demo](https://www.primevue.org/treeselect/)",
        "components": {
            "default": {
                "description": "TreeSelect is a form component to choose from hierarchical data.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeSelectPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeSelectState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TreeSelectProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "labelContainer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label container's DOM element."
                        },
                        {
                            "name": "label",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the label's DOM element."
                        },
                        {
                            "name": "token",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the token's DOM element."
                        },
                        {
                            "name": "tokenLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the token label's DOM element."
                        },
                        {
                            "name": "trigger",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the trigger's DOM element."
                        },
                        {
                            "name": "triggerIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the trigger icon's DOM element."
                        },
                        {
                            "name": "panel",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the panel's DOM element."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "tree",
                            "optional": true,
                            "readonly": false,
                            "type": "TreePassThroughOptions<TreeSelectSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to Tree component."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "hiddenInputWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden input wrapper's DOM element."
                        },
                        {
                            "name": "hiddenInput",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden input's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        },
                        {
                            "name": "transition",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeSelectPassThroughTransitionType",
                            "default": "",
                            "description": "Used to control Vue Transition API."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeSelectState": {
                    "description": "Defines current inline state in TreeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "focused",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current focused state as a boolean."
                        },
                        {
                            "name": "overlayVisible",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current overlay visible state as a boolean."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeExpandedKeys",
                            "default": "",
                            "description": "Current expanded keys state."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectProps": {
                    "description": "Defines valid properties in TreeSelect component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Value of the component."
                        },
                        {
                            "name": "options",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "200px",
                            "description": "Height of the viewport, a scrollbar is defined if height of list exceeds this value."
                        },
                        {
                            "name": "placeholder",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Label to display when there are no selections."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\"",
                            "default": "",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "panelClass",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the overlay panel."
                        },
                        {
                            "name": "appendTo",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement | HintedString<\"body\" | \"self\">",
                            "default": "body",
                            "description": "A valid query selector or an HTMLElement to specify where the overlay gets attached."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "No results found",
                            "description": "Text to display when there are no options available. Defaults to value from PrimeVue locale configuration."
                        },
                        {
                            "name": "display",
                            "optional": true,
                            "readonly": false,
                            "type": "\"comma\" | \"chip\"",
                            "default": "comma",
                            "description": "Defines how the selected items are displayed."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "inputProps",
                            "optional": true,
                            "readonly": false,
                            "type": "InputHTMLAttributes",
                            "default": "",
                            "description": "Used to pass all properties of the HTMLInputElement to the focusable input element inside the component."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TreeSelectPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TreeSelectSlots": {
                    "description": "Defines valid slots in TreeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "value",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Selected value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">placeholder</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Placeholder</span>\n }",
                                    "description": "value slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom value template."
                        },
                        {
                            "name": "header",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Selected value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// An array of treenodes.</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">value</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Selected value</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// An array of treenodes.</span>\n }",
                                    "description": "footer slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "indicator",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template.",
                            "deprecated": "since v3.27.0. Use 'triggericon' slot."
                        },
                        {
                            "name": "triggericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "triggericon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom indicator template."
                        },
                        {
                            "name": "itemtogglericon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">node</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Node instance</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">expanded</span>: <span class=\"doc-option-parameter-type\">TreeNode</span>, <span class=\"doc-option-parameter-type\">// Expanded state of the node</span>\n }",
                                    "description": "item toggler icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item toggler icon template."
                        },
                        {
                            "name": "itemcheckboxicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">checked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Check state of the node</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">partialChecked</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Partial check state of the node</span>\n }",
                                    "description": "item checkbox icon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item checkbox icon template."
                        }
                    ]
                },
                "TreeSelectEmits": {
                    "description": "Defines valid emits in TreeSelect component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "any",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string[]",
                                    "description": "Selected node keys"
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "before-show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is shown."
                        },
                        {
                            "name": "before-hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke before the overlay is hidden."
                        },
                        {
                            "name": "show",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is shown."
                        },
                        {
                            "name": "hide",
                            "parameters": [],
                            "returnType": "void",
                            "description": "Callback to invoke when the overlay is hidden."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-collapse",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TreeSelectPassThroughOptionType": {
                    "values": "TreeSelectPassThroughAttributes | (options: TreeSelectPassThroughMethodOptions) => undefined | string | null | undefined"
                },
                "TreeSelectPassThroughTransitionType": {
                    "values": "TransitionProps | (options: TreeSelectPassThroughMethodOptions) => TransitionProps | undefined"
                }
            }
        }
    },
    "treeselect/style/TreeSelectStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeSelectStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "treetable": {
        "description": "TreeTable is used to display hierarchical data in tabular format.\n\n[Live Demo](https://www.primevue.org/treetable/)",
        "components": {
            "default": {
                "description": "TreeTable is used to display hierarchical data in tabular format.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeTablePassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TreeTableSharedPassThroughMethodOptions": {
                    "description": "Custom shared passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableState",
                            "default": "",
                            "description": "Defines current inline state."
                        }
                    ],
                    "methods": []
                },
                "TreeTableFilterMetaData": {
                    "description": "Custom treetable filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filter value"
                        },
                        {
                            "name": "matchMode",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Filter match mode"
                        }
                    ],
                    "methods": []
                },
                "TreeTableOperatorFilterMetaData": {
                    "description": "Custom operator filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "operator",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Filter operator"
                        },
                        {
                            "name": "constraints",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMetaData[]",
                            "default": "",
                            "description": "Array of filter meta datas."
                        }
                    ],
                    "methods": []
                },
                "TreeTableFilterMeta": {
                    "description": "Custom filter metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "string | TreeTableFilterMetaData | TreeTableOperatorFilterMetaData"
                        }
                    ],
                    "methods": []
                },
                "TreeTableSortEvent": {
                    "description": "Custom sort event.",
                    "relatedProp": "TreeTableEmits.sort",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "TreeTablePageEvent,TreeTableFilterEvent"
                },
                "TreeTablePageEvent": {
                    "description": "Custom page event.",
                    "relatedProp": "TreeTableEmits.sort",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "New page number"
                        },
                        {
                            "name": "pageCount",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Total page count"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "TreeTableSortEvent"
                },
                "TreeTableFilterEvent": {
                    "description": "Custom filter event.",
                    "relatedProp": "TreeTableEmits.sort",
                    "props": [
                        {
                            "name": "originalEvent",
                            "optional": false,
                            "readonly": false,
                            "type": "Event",
                            "default": "",
                            "description": "Browser event."
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of first record"
                        },
                        {
                            "name": "rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display in new page"
                        },
                        {
                            "name": "sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Field to sort against"
                        },
                        {
                            "name": "sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Sort order as integer"
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "MultiSort metadata"
                        },
                        {
                            "name": "filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Collection of active filters"
                        },
                        {
                            "name": "filterMatchModes",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | HintedString<\"endsWith\" | \"startsWith\" | \"contains\" | \"in\" | \"notContains\" | \"equals\" | \"notEquals\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\">",
                            "default": "",
                            "description": "Match modes per field"
                        },
                        {
                            "name": "filteredValue",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Filtered collection (non-lazy only)"
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "TreeTableSortEvent"
                },
                "TreeTableSortMeta": {
                    "description": "Custom sort metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "field",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Column field"
                        },
                        {
                            "name": "order",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | null | 0 | 1 | -1",
                            "default": "",
                            "description": "Column sort order"
                        }
                    ],
                    "methods": []
                },
                "TreeTableExpandedKeys": {
                    "description": "Custom expanded keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeTableSelectionKeys": {
                    "description": "Custom selection keys metadata.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeTablePassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TreeTableProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "loadingWrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading wrapper's DOM element."
                        },
                        {
                            "name": "loadingOverlay",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading overlay's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "header",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header's DOM element."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "PaginatorPassThroughOptionType<TreeTableSharedPassThroughMethodOptions>",
                            "default": "",
                            "description": "Used to pass attributes to the Paginator component."
                        },
                        {
                            "name": "wrapper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the wrapper's DOM element."
                        },
                        {
                            "name": "table",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the table's DOM element."
                        },
                        {
                            "name": "thead",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the thead's DOM element."
                        },
                        {
                            "name": "headerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the header row's DOM element."
                        },
                        {
                            "name": "tbody",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the tbody's DOM element."
                        },
                        {
                            "name": "row",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the row's DOM element."
                        },
                        {
                            "name": "emptyMessage",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message's DOM element."
                        },
                        {
                            "name": "emptyMessageCell",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the empty message cell's DOM element."
                        },
                        {
                            "name": "tfoot",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the tfoot's DOM element."
                        },
                        {
                            "name": "footerRow",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer row's DOM element."
                        },
                        {
                            "name": "footer",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the footer's DOM element."
                        },
                        {
                            "name": "resizeHelper",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTablePassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the resize helper's DOM element."
                        },
                        {
                            "name": "column",
                            "optional": true,
                            "readonly": false,
                            "type": "ColumnPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the Column helper components."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TreeTablePassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TreeTableState": {
                    "description": "Defines current inline state in TreeTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "d_first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index of first record as a number."
                        },
                        {
                            "name": "d_rows",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current number of rows to display in new page as a number."
                        },
                        {
                            "name": "d_sortField",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | string | Function",
                            "default": "",
                            "description": "Current sort field."
                        },
                        {
                            "name": "d_sortOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current order to sort the data by default."
                        },
                        {
                            "name": "d_multiSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableSortMeta[]",
                            "default": "",
                            "description": "Current sortmeta objects to sort the data."
                        },
                        {
                            "name": "d_groupRowsSortMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableSortMeta",
                            "default": "",
                            "description": "Current group sortmeta objects to sort the data."
                        },
                        {
                            "name": "d_selectionKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current keys of selected rows."
                        },
                        {
                            "name": "d_expandedRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Current keys of rows in expanded state."
                        },
                        {
                            "name": "d_columnOrder",
                            "optional": false,
                            "readonly": false,
                            "type": "string[]",
                            "default": "",
                            "description": "Current order of the columns."
                        },
                        {
                            "name": "d_editingRowKeys",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Current keys of editing rows."
                        },
                        {
                            "name": "d_editingMeta",
                            "optional": false,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Current editing meta data."
                        },
                        {
                            "name": "d_filters",
                            "optional": false,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Current filters object."
                        },
                        {
                            "name": "d_editing",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current editing as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TreeTableContext": {
                    "description": "Defines current options in TreeTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Current index state of the item."
                        },
                        {
                            "name": "frozen",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current frozen state of the row as a boolean."
                        },
                        {
                            "name": "selectable",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selectable state of the row as a boolean."
                        },
                        {
                            "name": "selected",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current selected state of the row as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TreeTableProps": {
                    "description": "Defines valid properties in TreeTable component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "value",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeNode[]",
                            "default": "",
                            "description": "An array of treenodes."
                        },
                        {
                            "name": "dataKey",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "\"key\"",
                            "description": "Name of the field that uniquely identifies the a record in the data."
                        },
                        {
                            "name": "expandedKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTableExpandedKeys",
                            "default": "",
                            "description": "A map of keys to represent the state of the tree expansion state in controlled mode."
                        },
                        {
                            "name": "selectionKeys",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTableSelectionKeys",
                            "default": "",
                            "description": "A map of keys to control the selection state."
                        },
                        {
                            "name": "selectionMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"checkbox\" | \"single\"",
                            "default": "",
                            "description": "Defines the selection mode."
                        },
                        {
                            "name": "metaKeySelection",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually.\nOn touch enabled devices, metaKeySelection is turned off automatically."
                        },
                        {
                            "name": "rows",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of rows to display per page."
                        },
                        {
                            "name": "first",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Index of the first row to be displayed."
                        },
                        {
                            "name": "totalRecords",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Number of total records, defaults to length of value when not defined."
                        },
                        {
                            "name": "paginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified as true, enables the pagination."
                        },
                        {
                            "name": "paginatorPosition",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"top\" | \"bottom\"",
                            "default": "bottom",
                            "description": "Position of the paginator, options are 'top','bottom' or 'both'."
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Whether to show it even there is only one page."
                        },
                        {
                            "name": "paginatorTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. It can be customized using the template property using the predefined keys. Here are the available elements that can be placed inside a paginator in any order.\n\n- FirstPageLink\n- PrevPageLink\n- PageLinks\n- NextPageLink\n- LastPageLink\n- RowsPerPageDropdown\n- JumpToPageDropdown\n- JumpToPageInput\n- CurrentPageReport"
                        },
                        {
                            "name": "pageLinkSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "5",
                            "description": "Number of page links to display."
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "number[]",
                            "default": "",
                            "description": "Array of integer values to display inside rows per page dropdown."
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "'({currentPage} of {totalPages})'",
                            "description": "Template of the current page report element. It displays information about the pagination state.\n\n- {currentPage}\n- {totalPages}\n- {rows}\n- {first}\n- {last}\n- {totalRecords}"
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "The icon to show while indicating data load is in progress.",
                            "deprecated": "since v3.27.0. Use 'loadingicon' slot."
                        },
                        {
                            "name": "loadingMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"mask\" | \"icon\"",
                            "default": "mask",
                            "description": "Loading mode display."
                        },
                        {
                            "name": "rowHover",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, background of the rows change on hover."
                        },
                        {
                            "name": "autoLayout",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether the cell widths scale according to their content or not."
                        },
                        {
                            "name": "sortField",
                            "optional": true,
                            "readonly": false,
                            "type": "string | Function",
                            "default": "",
                            "description": "Property name or a getter function of a row data used for sorting by default."
                        },
                        {
                            "name": "sortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Order to sort the data by default."
                        },
                        {
                            "name": "defaultSortOrder",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Default sort order of an unsorted column."
                        },
                        {
                            "name": "multiSortMeta",
                            "optional": true,
                            "readonly": false,
                            "type": "null | TreeTableSortMeta[]",
                            "default": "",
                            "description": "An array of SortMeta objects to sort the data by default in multiple sort mode."
                        },
                        {
                            "name": "sortMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"multiple\" | \"single\"",
                            "default": "single",
                            "description": "Defines whether sorting works on single column or on multiple columns."
                        },
                        {
                            "name": "removableSort",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can have an un-sorted state."
                        },
                        {
                            "name": "filters",
                            "optional": true,
                            "readonly": false,
                            "type": "TreeTableFilterMeta",
                            "default": "",
                            "description": "Filters object with key-value pairs to define the filters."
                        },
                        {
                            "name": "filterMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"strict\" | \"lenient\"",
                            "default": "lenient",
                            "description": "Mode for filtering."
                        },
                        {
                            "name": "filterLocale",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale."
                        },
                        {
                            "name": "resizableColumns",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, columns can be resized using drag and drop."
                        },
                        {
                            "name": "columnResizeMode",
                            "optional": true,
                            "readonly": false,
                            "type": "\"expand\" | \"fit\"",
                            "default": "fit",
                            "description": "Defines whether the overall table width should change on column resize."
                        },
                        {
                            "name": "indentation",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "1",
                            "description": "Indentation factor as rem value for children nodes."
                        },
                        {
                            "name": "showGridlines",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show grid lines between cells."
                        },
                        {
                            "name": "scrollable",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When specified, enables horizontal and/or vertical scrolling."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "HintedString<\"flex\">",
                            "default": "",
                            "description": "Height of the scroll viewport in fixed pixels or the 'flex' keyword for a dynamic size."
                        },
                        {
                            "name": "scrollDirection",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"horizontal\" | \"vertical\"",
                            "default": "vertical",
                            "description": "Orientation of the scrolling."
                        },
                        {
                            "name": "responsiveLayout",
                            "optional": true,
                            "readonly": false,
                            "type": "\"scroll\" | \"stack\"",
                            "default": "stack",
                            "description": "Defines the responsive mode, currently only option is scroll."
                        },
                        {
                            "name": "size",
                            "optional": true,
                            "readonly": false,
                            "type": "\"small\" | \"large\"",
                            "default": "",
                            "description": "Defines the size of the table."
                        },
                        {
                            "name": "tableProps",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Props to pass to the table element."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TreeTablePassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TreeTableSlots": {
                    "description": "Defines valid slots in TreeTable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "header",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom header template."
                        },
                        {
                            "name": "footer",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom footer template."
                        },
                        {
                            "name": "paginatorstart",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator start template."
                        },
                        {
                            "name": "paginatorend",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator end template."
                        },
                        {
                            "name": "empty",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom empty template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        },
                        {
                            "name": "checkboxicon",
                            "parameters": [],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom checkbox icon template."
                        },
                        {
                            "name": "paginatorfirstpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator first page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator first page link icon template."
                        },
                        {
                            "name": "paginatorprevpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator prev page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator previous page link icon template."
                        },
                        {
                            "name": "paginatornextpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator next page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator next page link icon template."
                        },
                        {
                            "name": "paginatorlastpagelinkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator last page link icon.</span>\n }"
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginator last page link icon template."
                        },
                        {
                            "name": "paginatorrowsperpagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator rows per page dropdown icon.</span>\n }",
                                    "description": "paginatorrowsperpagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginatorrowsperpagedropdownicon template."
                        },
                        {
                            "name": "paginatorjumptopagedropdownicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the paginator jump to page dropdown icon.</span>\n }",
                                    "description": "paginatorjumptopagedropdownicon's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom paginatorjumptopagedropdownicon template."
                        }
                    ]
                },
                "TreeTableEmits": {
                    "description": "Defines valid emits in TreeTable component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:expandedKeys",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "TreeTableExpandedKeys",
                                    "description": "New expanded keys."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the expanded keys change."
                        },
                        {
                            "name": "update:selectionKeys",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableSelectionKeys"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the selection keys change."
                        },
                        {
                            "name": "update:first",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the first changes."
                        },
                        {
                            "name": "update:rows",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the rows changes."
                        },
                        {
                            "name": "update:sortField",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "string",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortField changes."
                        },
                        {
                            "name": "update:sortOrder",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | number",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the sortOrder changes."
                        },
                        {
                            "name": "update:multiSortMeta",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "undefined | null | TreeTableSortMeta[]",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the multiSortMeta changes."
                        },
                        {
                            "name": "page",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTablePageEvent",
                                    "description": "Custom page event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on pagination. Sort and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "sort",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableSortEvent",
                                    "description": "Custom sort event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on sort. Page and Filter information is also available for lazy loading implementation."
                        },
                        {
                            "name": "filter",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "TreeTableFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Event to emit after filtering, not triggered in lazy mode."
                        },
                        {
                            "name": "node-select",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is selected."
                        },
                        {
                            "name": "node-unselect",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is unselected."
                        },
                        {
                            "name": "node-expand",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is expanded."
                        },
                        {
                            "name": "node-collapse",
                            "parameters": [
                                {
                                    "name": "node",
                                    "optional": false,
                                    "type": "TreeNode",
                                    "description": "Node instance."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a node is collapsed."
                        },
                        {
                            "name": "column-resize-end",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when a column is resized."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TreeTablePassThroughOptionType": {
                    "values": "TreeTablePassThroughAttributes | (options: TreeTablePassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "treetable/style/TreeTableStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TreeTableStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "tristatecheckbox": {
        "description": "TriStateCheckbox is used to select either 'true', 'false' or 'null' as the value.\n\n[Live Demo](https://www.primevue.org/tristatecheckbox/)",
        "components": {
            "default": {
                "description": "TriStateCheckbox is used to select either 'true', 'false' or 'null' as the value.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": []
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TriStateCheckboxPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "TriStateCheckboxProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "TriStateCheckboxState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "context",
                            "optional": false,
                            "readonly": false,
                            "type": "TriStateCheckboxContext",
                            "default": "",
                            "description": "Defines current options."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "TriStateCheckboxPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "TriStateCheckboxProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "input",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the input's DOM element."
                        },
                        {
                            "name": "box",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the box's DOM element."
                        },
                        {
                            "name": "checkIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the check icon's DOM element."
                        },
                        {
                            "name": "uncheckIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the uncheck icon's DOM element."
                        },
                        {
                            "name": "nullableIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the nullable icon's DOM element."
                        },
                        {
                            "name": "hiddenValueLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "TriStateCheckboxPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the hidden value label's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "TriStateCheckboxPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TriStateCheckboxState": {
                    "description": "Defines current inline state in TriStateCheckbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "TriStateCheckboxContext": {
                    "description": "Defines current options in TriStateCheckbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "active",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current active state as a boolean."
                        },
                        {
                            "name": "disabled",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Current disabled state as a boolean."
                        }
                    ],
                    "methods": []
                },
                "TriStateCheckboxProps": {
                    "description": "Defines valid properties in TriStateCheckbox component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "modelValue",
                            "optional": true,
                            "readonly": false,
                            "type": "Nullable<boolean>",
                            "default": "null",
                            "description": "Value of the component."
                        },
                        {
                            "name": "invalid",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled."
                        },
                        {
                            "name": "variant",
                            "optional": true,
                            "readonly": false,
                            "type": "\"filled\" | \"outlined\"",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component."
                        },
                        {
                            "name": "readonly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "When present, it specifies that an input field is read-only."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inputId",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Identifier of the underlying input element."
                        },
                        {
                            "name": "inputClass",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": "",
                            "description": "Style class of the input field."
                        },
                        {
                            "name": "inputStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "string | object",
                            "default": "",
                            "description": "Inline style of the input field."
                        },
                        {
                            "name": "ariaLabelledby",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs."
                        },
                        {
                            "name": "ariaLabel",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Establishes a string value that labels the component."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<TriStateCheckboxPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": []
                },
                "TriStateCheckboxSlots": {
                    "description": "Defines valid slots in TriStateCheckbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "checkicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "checkicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom check icon template."
                        },
                        {
                            "name": "uncheckicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "uncheckicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom uncheck icon template."
                        },
                        {
                            "name": "nullableicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "nullableicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom nullable icon template."
                        }
                    ]
                },
                "TriStateCheckboxEmits": {
                    "description": "Defines valid emits in TriStateCheckbox component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:modelValue",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "Nullable<boolean>",
                                    "description": "New value."
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the value changes."
                        },
                        {
                            "name": "change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke on value change."
                        },
                        {
                            "name": "focus",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component receives focus."
                        },
                        {
                            "name": "blur",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when the component loses focus."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "TriStateCheckboxPassThroughOptionType": {
                    "values": "TriStateCheckboxPassThroughAttributes | (options: TriStateCheckboxPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "tristatecheckbox/style/TriStateCheckboxStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "TriStateCheckboxStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    },
    "ts-helpers": {
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "PublicProps": {
                    "values": "VNodeProps & AllowedComponentProps & ComponentCustomProps"
                },
                "UnionToIntersection": {
                    "values": "(U extends any ? Function : never) extends Function ? I : never"
                },
                "EmitFn": {
                    "values": "Options extends (infer V)[] ? Function : Object extends Options ? Function : UnionToIntersection<{ [key in Event]: Options[key] extends Function ? Function : Function }[Event]>"
                },
                "GlobalComponentConstructor": {
                    "values": "{}"
                },
                "Booleanish": {
                    "values": "boolean | \"true\" | \"false\"",
                    "description": "Custom types"
                },
                "Numberish": {
                    "values": "number | string"
                },
                "Nullable": {
                    "values": "T | null | undefined"
                },
                "PassThrough": {
                    "values": "T | object | undefined"
                },
                "DefaultPassThrough": {
                    "values": "T | (instance: VNode) => undefined | undefined"
                },
                "HintedString": {
                    "values": "string & Object | T"
                }
            }
        }
    },
    "useconfirm/UseConfirm": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "useConfirm": {
                    "name": "useConfirm",
                    "parameters": [],
                    "returnType": "Object"
                }
            }
        }
    },
    "usedialog/UseDialog": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "useDialog": {
                    "name": "useDialog",
                    "parameters": [],
                    "returnType": "Object"
                }
            }
        }
    },
    "usestyle/UseStyle": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "useStyle": {
                    "name": "useStyle",
                    "parameters": [
                        {
                            "name": "css",
                            "type": "string"
                        },
                        {
                            "name": "options",
                            "type": "StyleOptions"
                        }
                    ],
                    "returnType": "Style"
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "StyleOptions": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "document",
                            "optional": true,
                            "readonly": false,
                            "type": "HTMLElement",
                            "default": ""
                        },
                        {
                            "name": "immediate",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "manual",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        },
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "media",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "nonce",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "props",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        }
                    ],
                    "methods": []
                },
                "Style": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "name",
                            "optional": false,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": ""
                        },
                        {
                            "name": "unload",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "load",
                            "optional": false,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "isLoaded",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": ""
                        }
                    ],
                    "methods": []
                }
            }
        }
    },
    "usetoast/UseToast": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "useToast": {
                    "name": "useToast",
                    "parameters": [],
                    "returnType": "ToastServiceMethods"
                }
            }
        }
    },
    "utils/Utils": {
        "functions": {
            "description": "Defines the custom functions used by the module.",
            "values": {
                "UniqueComponentId": {
                    "name": "UniqueComponentId",
                    "parameters": [
                        {
                            "name": "prefix",
                            "type": "string"
                        }
                    ],
                    "returnType": "string"
                },
                "EventBus": {
                    "name": "EventBus",
                    "parameters": [],
                    "returnType": "Object"
                }
            }
        }
    },
    "virtualscroller": {
        "description": "VirtualScroller is a performant approach to handle huge data efficiently.\n\n[Live Demo](https://www.primevue.org/virtualscroller/)",
        "components": {
            "default": {
                "description": "VirtualScroller is a performant approach to handle huge data efficiently.",
                "methods": {
                    "description": "Defines methods that can be accessed by the component's reference.",
                    "values": [
                        {
                            "name": "scrollTo",
                            "parameters": [
                                {
                                    "name": "options",
                                    "type": "ScrollToOptions",
                                    "description": "scoll options."
                                }
                            ],
                            "returnType": "void",
                            "description": "Scroll to move to a specific position."
                        },
                        {
                            "name": "scrollToIndex",
                            "parameters": [
                                {
                                    "name": "index",
                                    "type": "number",
                                    "description": "Index of item according to orientation mode."
                                },
                                {
                                    "name": "behavior",
                                    "type": "ScrollBehavior",
                                    "description": "Behavior of scroll."
                                }
                            ],
                            "returnType": "void",
                            "description": "Scroll to move to a specific item."
                        },
                        {
                            "name": "scrollInView",
                            "parameters": [
                                {
                                    "name": "index",
                                    "type": "number",
                                    "description": "Index of item according to orientation mode."
                                },
                                {
                                    "name": "to",
                                    "type": "\"to-start\" | \"to-end\"",
                                    "description": "Defines the location of the item in view,"
                                },
                                {
                                    "name": "behavior",
                                    "type": "ScrollBehavior",
                                    "description": "Behavior of scroll"
                                }
                            ],
                            "returnType": "void",
                            "description": "It is used to move the specified index into the view. It is a method that will usually be needed when keyboard support is added to the virtualScroller component."
                        },
                        {
                            "name": "getRenderedRange",
                            "parameters": [],
                            "returnType": "VirtualScrollerRangeMethod",
                            "description": "Returns the range of items added to the DOM."
                        }
                    ]
                }
            }
        },
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "VirtualScrollerPassThroughMethodOptions": {
                    "description": "Custom passthrough(pt) option method.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "instance",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines instance."
                        },
                        {
                            "name": "props",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerProps",
                            "default": "",
                            "description": "Defines valid properties."
                        },
                        {
                            "name": "state",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerState",
                            "default": "",
                            "description": "Defines current inline state."
                        },
                        {
                            "name": "attrs",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines valid attributes."
                        },
                        {
                            "name": "parent",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Defines parent options."
                        },
                        {
                            "name": "global",
                            "optional": false,
                            "readonly": false,
                            "type": "undefined | object",
                            "default": "",
                            "description": "Defines passthrough(pt) options in global config."
                        }
                    ],
                    "methods": []
                },
                "VirtualScrollerScrollIndexChangeEvent": {
                    "description": "Custom scroll index change event.",
                    "relatedProp": "VirtualScrollerEmits['scroll-index-change']",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "First index of the new data range to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Last index of the new data range to be loaded."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "VirtualScrollerLazyEvent,VirtualScrollerViewport"
                },
                "VirtualScrollerLazyEvent": {
                    "description": "Custom lazy event.",
                    "relatedProp": "VirtualScrollerEmits['scroll-index-change']",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "First index of the new data range to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Last index of the new data range to be loaded."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "VirtualScrollerScrollIndexChangeEvent"
                },
                "VirtualScrollerViewport": {
                    "description": "Custom virtualscroller viewport metadata.",
                    "relatedProp": "VirtualScrollerEmits['scroll-index-change']",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "First index of the new data range to be loaded."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Last index of the new data range to be loaded."
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "VirtualScrollerScrollIndexChangeEvent"
                },
                "VirtualScrollerRangeMethod": {
                    "description": "Virtual scroller rendered range.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Whether the item is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Whether the item is last."
                        },
                        {
                            "name": "viewport",
                            "optional": false,
                            "readonly": false,
                            "type": "VirtualScrollerViewport",
                            "default": "",
                            "description": "Viewport info."
                        }
                    ],
                    "methods": []
                },
                "VirtualScrollerItemOptions": {
                    "description": "Custom item options.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Item index"
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Items count"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is last."
                        },
                        {
                            "name": "even",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is even."
                        },
                        {
                            "name": "odd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is odd."
                        },
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": [],
                    "extendedBy": "VirtualScrollerLoaderOptions"
                },
                "VirtualScrollerPassThroughOptions": {
                    "description": "Custom passthrough(pt) options.",
                    "relatedProp": "VirtualScrollerProps.pt",
                    "props": [
                        {
                            "name": "root",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the root's DOM element."
                        },
                        {
                            "name": "content",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the content's DOM element."
                        },
                        {
                            "name": "loader",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loader's DOM element."
                        },
                        {
                            "name": "loadingIcon",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the loading icon's DOM element."
                        },
                        {
                            "name": "spacer",
                            "optional": true,
                            "readonly": false,
                            "type": "VirtualScrollerPassThroughOptionType",
                            "default": "",
                            "description": "Used to pass attributes to the spacer's DOM element."
                        },
                        {
                            "name": "hooks",
                            "optional": true,
                            "readonly": false,
                            "type": "ComponentHooks",
                            "default": "",
                            "description": "Used to manage all lifecycle hooks."
                        }
                    ],
                    "methods": []
                },
                "VirtualScrollerPassThroughAttributes": {
                    "description": "Custom passthrough attributes for each DOM elements",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "[key: string]",
                            "optional": false,
                            "readonly": false,
                            "type": "any"
                        }
                    ],
                    "methods": []
                },
                "VirtualScrollerState": {
                    "description": "Defines current inline state in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "First index of the new data range to be loaded as a number."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Last index of the new data range to be loaded as a number."
                        },
                        {
                            "name": "page",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Index of the first item as a number."
                        },
                        {
                            "name": "numItemsInViewport",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Visible item count in the viewport as a number."
                        },
                        {
                            "name": "lastScrollPos",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Lastest scroll position as a number."
                        },
                        {
                            "name": "d_numToleratedItems",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Additional elements to add to the DOM outside of the view as a number."
                        },
                        {
                            "name": "d_loading",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "false",
                            "description": "Current loading state as a boolean."
                        },
                        {
                            "name": "loaderArr",
                            "optional": false,
                            "readonly": false,
                            "type": "any[]",
                            "default": "",
                            "description": "Loadable items array."
                        },
                        {
                            "name": "spacerStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The style of spacer element."
                        },
                        {
                            "name": "contentStyle",
                            "optional": false,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "The style of content element."
                        }
                    ],
                    "methods": []
                },
                "VirtualScrollerLoaderOptions": {
                    "description": "Custom virtualscroller loader options",
                    "relatedProp": "undefined.VirtualScrollerItemOptions",
                    "props": [
                        {
                            "name": "index",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Item index"
                        },
                        {
                            "name": "count",
                            "optional": false,
                            "readonly": false,
                            "type": "number",
                            "default": "",
                            "description": "Items count"
                        },
                        {
                            "name": "first",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is first."
                        },
                        {
                            "name": "last",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is last."
                        },
                        {
                            "name": "even",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is even."
                        },
                        {
                            "name": "odd",
                            "optional": false,
                            "readonly": false,
                            "type": "boolean",
                            "default": "",
                            "description": "Whether the item is odd."
                        }
                    ],
                    "methods": [],
                    "extendedBy": "ColumnLoadingOptions",
                    "extendedTypes": "VirtualScrollerItemOptions"
                },
                "VirtualScrollerProps": {
                    "description": "Defines valid properties in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "id",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Unique identifier of the element."
                        },
                        {
                            "name": "style",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Inline style of the component."
                        },
                        {
                            "name": "class",
                            "optional": true,
                            "readonly": false,
                            "type": "any",
                            "default": "",
                            "description": "Style class of the component."
                        },
                        {
                            "name": "items",
                            "optional": true,
                            "readonly": false,
                            "type": "null | any[] | any[][]",
                            "default": "",
                            "description": "An array of objects to display."
                        },
                        {
                            "name": "itemSize",
                            "optional": true,
                            "readonly": false,
                            "type": "number | number[]",
                            "default": "",
                            "description": "The height/width of item according to orientation."
                        },
                        {
                            "name": "scrollHeight",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Height of the scroll viewport."
                        },
                        {
                            "name": "scrollWidth",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": "",
                            "description": "Width of the scroll viewport."
                        },
                        {
                            "name": "orientation",
                            "optional": true,
                            "readonly": false,
                            "type": "\"both\" | \"horizontal\" | \"vertical\"",
                            "default": "vertical",
                            "description": "The orientation of scrollbar."
                        },
                        {
                            "name": "numToleratedItems",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "half the number of items shown in the view.",
                            "description": "Determines how many additional elements to add to the DOM outside of the view.\nAccording to the scrolls made up and down, extra items are added in a certain algorithm in the form of multiples of this number."
                        },
                        {
                            "name": "delay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Delay in scroll before new data is loaded."
                        },
                        {
                            "name": "resizeDelay",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "10",
                            "description": "Delay after window's resize finishes."
                        },
                        {
                            "name": "lazy",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner."
                        },
                        {
                            "name": "disabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "If disabled, the VirtualScroller feature is eliminated and the content is displayed directly."
                        },
                        {
                            "name": "loaderDisabled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to implement a custom loader instead of using the loader feature in the VirtualScroller."
                        },
                        {
                            "name": "showLoader",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to show loader."
                        },
                        {
                            "name": "showSpacer",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "true",
                            "description": "Used to implement a custom spacer instead of using the spacer feature in the VirtualScroller."
                        },
                        {
                            "name": "loading",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to load items."
                        },
                        {
                            "name": "tabindex",
                            "optional": true,
                            "readonly": false,
                            "type": "string | number",
                            "default": "0",
                            "description": "Index of the element in tabbing order."
                        },
                        {
                            "name": "inline",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, positions the content as inline."
                        },
                        {
                            "name": "step",
                            "optional": true,
                            "readonly": false,
                            "type": "number",
                            "default": "0",
                            "description": "Used to specify how many items to load in each load method in lazy mode."
                        },
                        {
                            "name": "appendOnly",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Used to append each loaded item to top without removing any items from the DOM. Using very large data may cause the browser to crash."
                        },
                        {
                            "name": "autoSize",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "Whether to dynamically change the height or width of scrollable container."
                        },
                        {
                            "name": "pt",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThrough<VirtualScrollerPassThroughOptions>",
                            "default": "",
                            "description": "Used to pass attributes to DOM elements inside the component."
                        },
                        {
                            "name": "ptOptions",
                            "optional": true,
                            "readonly": false,
                            "type": "PassThroughOptions",
                            "default": "",
                            "description": "Used to configure passthrough(pt) options of the component."
                        },
                        {
                            "name": "unstyled",
                            "optional": true,
                            "readonly": false,
                            "type": "boolean",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core."
                        }
                    ],
                    "methods": [
                        {
                            "name": "onLazyLoad",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "VirtualScrollerLazyEvent",
                                    "description": "Custom lazy event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke in lazy mode to load new data."
                        }
                    ]
                },
                "VirtualScrollerSlots": {
                    "description": "Defines valid slots in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "content",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">items</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// An array of objects to display for virtualscroller</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">styleClass</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the content</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">contentRef</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">el</span>: any) &rArr; void</span>, <span class=\"doc-option-parameter-type\">// Referance of the content</span>\n\t <span class=\"ml-3 doc-option-parameter-name\">getItemOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number) &rArr; VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Options of the items</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">loading</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the data is loaded.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">getLoaderOptions</span>: <span class=\"doc-option-parameter-type\">(<span class=\"doc-option-parameter-name\">index</span>: number, <span class=\"doc-option-parameter-name\">ext</span>: any) &rArr; VirtualScrollerLoaderOptions</span>, <span class=\"doc-option-parameter-type\">// Loader options of the items while the data is loading.</span>\n \t <span class=\"ml-3 doc-option-parameter-name\">itemSize</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// The height/width of item according to orientation.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">rows</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// The number of the rendered rows.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">columns</span>: <span class=\"doc-option-parameter-type\">undefined</span>, <span class=\"doc-option-parameter-type\">// The number of the rendered columns.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">spacerStyle</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// The style of spacer element.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">contentStyle</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// The style of content element.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">vertical</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the orientation is vertical.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">horizontal</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the orientation is horizontal.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">both</span>: <span class=\"doc-option-parameter-type\">boolean</span>, <span class=\"doc-option-parameter-type\">// Whether the orientation is both.</span>\n }",
                                    "description": "content slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom content template."
                        },
                        {
                            "name": "item",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">item</span>: <span class=\"doc-option-parameter-type\">any</span>, <span class=\"doc-option-parameter-type\">// Item data.</span>\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">VirtualScrollerItemOptions</span>, <span class=\"doc-option-parameter-type\">// Item options.</span>\n }",
                                    "description": "item slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom item template."
                        },
                        {
                            "name": "loader",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">options</span>: <span class=\"doc-option-parameter-type\">VirtualScrollerLoaderOptions</span>, <span class=\"doc-option-parameter-type\">// Loader options.</span>\n }",
                                    "description": "header slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loader template."
                        },
                        {
                            "name": "loadingicon",
                            "parameters": [
                                {
                                    "name": "scope",
                                    "optional": false,
                                    "type": "{\n  \t <span class=\"ml-3 doc-option-parameter-name\">class</span>: <span class=\"doc-option-parameter-type\">string</span>, <span class=\"doc-option-parameter-type\">// Style class of the icon.</span>\n }",
                                    "description": "loadingicon slot's params."
                                }
                            ],
                            "returnType": "VNode<RendererNode, RendererElement, Object>[]",
                            "description": "Custom loading icon template."
                        }
                    ]
                },
                "VirtualScrollerEmits": {
                    "description": "Defines valid emits in VirtualScroller component.",
                    "relatedProp": "",
                    "props": [],
                    "methods": [
                        {
                            "name": "update:numToleratedItems",
                            "parameters": [
                                {
                                    "name": "value",
                                    "optional": false,
                                    "type": "number",
                                    "description": "New number tolerated items"
                                }
                            ],
                            "returnType": "void",
                            "description": "Emitted when the numToleratedItems changes."
                        },
                        {
                            "name": "scroll",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "Event",
                                    "description": "Browser event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when scroll position changes."
                        },
                        {
                            "name": "scroll-index-change",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "VirtualScrollerScrollIndexChangeEvent",
                                    "description": "Custom tab open event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke when scroll position and item's range in view changes."
                        },
                        {
                            "name": "lazy-load",
                            "parameters": [
                                {
                                    "name": "event",
                                    "optional": false,
                                    "type": "VirtualScrollerLazyEvent",
                                    "description": "Custom lazy event."
                                }
                            ],
                            "returnType": "void",
                            "description": "Callback to invoke in lazy mode to load new data."
                        }
                    ]
                }
            }
        },
        "types": {
            "description": "Defines the custom types used by the module.",
            "values": {
                "VirtualScrollerPassThroughOptionType": {
                    "values": "VirtualScrollerPassThroughAttributes | (options: VirtualScrollerPassThroughMethodOptions) => undefined | string | null | undefined"
                }
            }
        }
    },
    "virtualscroller/style/VirtualScrollerStyle": {
        "interfaces": {
            "description": "Defines the custom interfaces used by the module.",
            "eventDescription": "Defines the custom events used by the component's emit.",
            "methodDescription": "Defines methods that can be accessed by the component's reference.",
            "typeDescription": "Defines the custom types used by the module.",
            "values": {
                "VirtualScrollerStyle": {
                    "relatedProp": "",
                    "props": [
                        {
                            "name": "name",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "css",
                            "optional": true,
                            "readonly": false,
                            "type": "string",
                            "default": ""
                        },
                        {
                            "name": "classes",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "inlineStyles",
                            "optional": true,
                            "readonly": false,
                            "type": "object",
                            "default": ""
                        },
                        {
                            "name": "loadStyle",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        },
                        {
                            "name": "getStyleSheet",
                            "optional": true,
                            "readonly": false,
                            "type": "Function",
                            "default": ""
                        }
                    ],
                    "methods": [],
                    "extendedTypes": "BaseStyle"
                }
            }
        }
    }
}